<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello World!</title>
  <subtitle>Android 技术图谱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-23T07:16:45.481Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>行者</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>opencv api 笔记</title>
    <link href="http://yoursite.com/2016/11/22/opencv-api-%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/11/22/opencv-api-笔记/</id>
    <published>2016-11-22T07:23:18.000Z</published>
    <updated>2016-11-23T07:16:45.481Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>opencv在图像处理中使用广泛，许多常见的应用场景例如人脸识别，车牌识别等都是基于opencv开发的。本文是学习opencv api的一些笔记。<br>感兴趣的朋友欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<p><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/tutorials.html" target="_blank" rel="external">《openCV中文教程》</a></p>
<h2 id="Mat-基本图像容器"><a href="#Mat-基本图像容器" class="headerlink" title="Mat-基本图像容器"></a><strong>Mat-基本图像容器</strong></h2><p><a href="http://docs.opencv.org/2.4/modules/core/doc/basic_structures.html#mat" target="_blank" rel="external">Mat官方解释</a><br><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/core/mat%20-%20the%20basic%20image%20container/mat%20-%20the%20basic%20image%20container.html#matthebasicimagecontainer" target="_blank" rel="external">教程</a><br>基本上讲 Mat 是一个类，由两个数据部分组成：矩阵头（包含矩阵尺寸，存储方法，存储地址等信息）和一个指向存储所有像素值的矩阵（根据所选存储方法的不同矩阵可以是不同的维数）的指针。矩阵头的尺寸是常数值，但矩阵本身的尺寸会依图像的不同而不同，通常比矩阵头的尺寸大数个数量级。因此，当在程序中传递图像并创建拷贝时，大的开销是由矩阵造成的，而不是信息头。OpenCV是一个图像处理库，囊括了大量的图像处理函数，为了解决问题通常要使用库中的多个函数，因此在函数中传递图像是家常便饭。同时不要忘了我们正在讨论的是计算量很大的图像处理算法，因此，除非万不得已，我们不应该拷贝 大 的图像，因为这会降低程序速度。</p>
<p>为了搞定这个问题，OpenCV使用引用计数机制。其思路是让<strong>每个 Mat 对象有自己的信息头，但共享同一个矩阵。这通过让矩阵指针指向同一地址而实现。而拷贝构造函数则 只拷贝信息头和矩阵指针 ，而不拷贝矩阵。</strong></p>
<p>但某些时候你仍会想<strong>拷贝矩阵</strong>本身(不只是信息头和矩阵指针)，这时可以使用函数<strong> clone() </strong>或者 <strong>copyTo()</strong> 。</p>
<ul>
<li>OpenCV函数中输出图像的内存分配是自动完成的（如果不特别指定的话）。</li>
<li>使用OpenCV的C++接口时不需要考虑内存释放问题。</li>
<li>赋值运算符和拷贝构造函数（ ctor ）只拷贝信息头。</li>
<li>使用函数 clone() 或者 copyTo() 来拷贝一副图像的矩阵。</li>
</ul>
<h4 id="Mat-ptr"><a href="#Mat-ptr" class="headerlink" title="Mat::ptr"></a><strong>Mat::ptr</strong></h4><p><a href="http://docs.opencv.org/2.4/modules/core/doc/basic_structures.html#mat-ptr" target="_blank" rel="external">ptr API文档</a><br>Returns a pointer to the specified matrix row<br>返回指向指定矩阵行的指针</p>
<h4 id="Mat-channels"><a href="#Mat-channels" class="headerlink" title="Mat::channels"></a><strong>Mat::channels</strong></h4><p><a href="http://docs.opencv.org/2.4/modules/core/doc/basic_structures.html#mat-channels" target="_blank" rel="external">channels API文档</a><br>Returns the number of matrix channels.</p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a><strong>API</strong></h2><h3 id="imread"><a href="#imread" class="headerlink" title="imread"></a><strong>imread</strong></h3><p><a href="http://docs.opencv.org/modules/highgui/doc/reading_and_writing_images_and_video.html#imread" target="_blank" rel="external">imread API文档</a><br>imread：读取图片文件，并按照一定的格式将其返回（Mat对象）<br><strong>C++: Mat imread(const string&amp; filename, int flags=1 )</strong><br>Python: cv2.imread(filename[, flags]) → retval<br>C: IplImage<em> cvLoadImage(const char</em> filename, int iscolor=CV_LOAD_IMAGE_COLOR )<br>C: CvMat<em> cvLoadImageM(const char</em> filename, int iscolor=CV_LOAD_IMAGE_COLOR )<br>Python: cv.LoadImage(filename, iscolor=CV_LOAD_IMAGE_COLOR) → None<br>Python: cv.LoadImageM(filename, iscolor=CV_LOAD_IMAGE_COLOR) → None</p>
<p>Parameters:    </p>
<ul>
<li>filename – Name of file to be loaded.</li>
<li>flags –Flags specifying the color type of a loaded image:<ul>
<li>CV_LOAD_IMAGE_ANYDEPTH - If set, return 16-bit/32-bit image when the input has the corresponding depth, otherwise convert it to 8-bit.</li>
<li>CV_LOAD_IMAGE_COLOR - If set, always convert image to the color one</li>
<li>CV_LOAD_IMAGE_GRAYSCALE - If set, always convert image to the grayscale one</li>
<li><blockquote>
<p>0 Return a 3-channel color image.<br>Note In the current implementation the alpha channel, if any, is stripped from the output image. Use negative value if you need the alpha channel.</p>
</blockquote>
</li>
</ul>
</li>
<li>=0 Return a grayscale image.</li>
<li>&lt;0 Return the loaded image as is (with alpha channel).</li>
</ul>
<h3 id="cvtColor"><a href="#cvtColor" class="headerlink" title="cvtColor"></a><strong>cvtColor</strong></h3><p><a href="http://docs.opencv.org/modules/imgproc/doc/miscellaneous_transformations.html#cvtcolor" target="_blank" rel="external">cvtColor API文档</a><br>对图片进行处理，从一种颜色空间转换到另一种颜色空间（Converts an image from one color space to another.）</p>
<ul>
<li><strong>RGB &lt;–&gt; GRAY</strong> ( CV_BGR2GRAY, CV_RGB2GRAY, CV_GRAY2BGR, CV_GRAY2RGB )</li>
<li><strong>RGB &lt;–&gt;  CIE XYZ.Rec 709 with D65 white point </strong>( CV_BGR2XYZ, CV_RGB2XYZ, CV_XYZ2BGR, CV_XYZ2RGB )</li>
<li><strong>RGB &lt;–&gt; YCrCb JPEG (or YCC)</strong> ( CV_BGR2YCrCb, CV_RGB2YCrCb, CV_YCrCb2BGR, CV_YCrCb2RGB )</li>
<li><strong>RGB &lt;–&gt; HSV</strong> ( CV_BGR2HSV, CV_RGB2HSV, CV_HSV2BGR, CV_HSV2RGB )</li>
<li><strong>RGB &lt;–&gt; HLS</strong> ( CV_BGR2HLS, CV_RGB2HLS, CV_HLS2BGR, CV_HLS2RGB )</li>
<li><strong>RGB &lt;–&gt; CIE L<em>a</em>b* </strong>( CV_BGR2Lab, CV_RGB2Lab, CV_Lab2BGR, CV_Lab2RGB )</li>
<li><strong>RGB &lt;–&gt; CIE L<em>u</em>v* </strong>( CV_BGR2Luv, CV_RGB2Luv, CV_Luv2BGR, CV_Luv2RGB )</li>
<li><strong>Bayer -&gt; RGB</strong> ( CV_BayerBG2BGR, CV_BayerGB2BGR, CV_BayerRG2BGR, CV_BayerGR2BGR, CV_BayerBG2RGB, CV_BayerGB2RGB, CV_BayerRG2RGB, CV_BayerGR2RGB )</li>
</ul>
<h3 id="split"><a href="#split" class="headerlink" title="split"></a><strong>split</strong></h3><p><a href="http://docs.opencv.org/2.4/modules/core/doc/operations_on_arrays.html#split" target="_blank" rel="external">split API文档</a><br>split函数的主要功能是把一个彩色图像分割成3个通道，方便进一步的图像处理，具体说明如下：<br>split Divides a multi-channel array into several single-channel arrays.<br>C++: void split(const Mat&amp; mtx, Mat* mv)<br>C++: void split(const Mat&amp; mtx, vector&amp; mv)</p>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a><strong>merge</strong></h3><p><a href="http://docs.opencv.org/2.4/modules/core/doc/operations_on_arrays.html#merge" target="_blank" rel="external">merge API文档</a><br>merge可以实现与split相反的操作，简单说明如下：<br>merge Composes a multi-channel array from several single-channel arrays.<br>C++: void merge(const Mat* mv, size_t count, OutputArray dst)<br>C++: void merge(const vector&amp; mv, OutputArray dst)</p>
<h3 id="mixChannels"><a href="#mixChannels" class="headerlink" title="mixChannels"></a><strong>mixChannels</strong></h3><p><a href="http://docs.opencv.org/2.4/modules/core/doc/operations_on_arrays.html#mixChannels" target="_blank" rel="external">mixChannels API文档</a></p>
<h3 id="equalizeHist"><a href="#equalizeHist" class="headerlink" title="equalizeHist"></a><strong>equalizeHist</strong></h3><p><a href="http://docs.opencv.org/2.4/modules/imgproc/doc/histograms.html#equalizehist" target="_blank" rel="external">equalizeHist API文档</a><br><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/histograms/histogram_equalization/histogram_equalization.html" target="_blank" rel="external">直方图均衡化</a><br>将灰度图进行直方图均衡化（直方图均衡化是通过拉伸像素强度分布范围来增强图像对比度的一种方法）</p>
<p>C++: void equalizeHist(InputArray src, OutputArray dst)<br>Python: cv2.equalizeHist(src[, dst]) → dst<br>C: void cvEqualizeHist(const CvArr<em> src, CvArr</em> dst)<br>Parameters:<br>src – Source 8-bit single channel image.<br>dst – Destination image of the same size and type as src .</p>
<p>原理：<br>1，Calculate the histogram H for src .<br>2，Normalize the histogram so that the sum of histogram bins is 255.<br>3，Compute the integral of the histogram:<br><img src="/hello-world/img/sum_H.png" alt="求和"><br>4，Transform the image using H’ as a look-up table: <strong>dst(x,y) = H’(src(x,y))</strong></p>
<p>The algorithm normalizes the brightness and increases the contrast of the image.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;opencv在图像处理中使用广泛，许多常见的应用场景例如人脸识别，车牌识别等都是基于opencv开发的。本文是学习opencv api的一些笔记。&lt;br&gt;感兴趣的朋友欢迎加入&lt;strong&gt;学习小组QQ群: 193765960&lt;
    
    </summary>
    
      <category term="opencv" scheme="http://yoursite.com/categories/opencv/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>App移动端项目管理</title>
    <link href="http://yoursite.com/2016/11/11/App%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2016/11/11/App移动端项目管理/</id>
    <published>2016-11-11T02:10:37.000Z</published>
    <updated>2016-11-16T10:02:31.174Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>刚刚做完一个项目，值得总结，在此记录一下。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> 。 欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
</blockquote>
<h3 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a><strong>项目流程</strong></h3><p>一款应用的开发大体流程如下：<br>1、项目立项：产品经理<br>2、需求确认：产品经理(业务逻辑说明文档)<br>3、业务确认：产品经理，技术经理，架构师<br>4、业务架构：技术经理，架构师（业务流程文档）<br>5、UI确认：产品经理，设计人员，开发人员全体<br>6、UI交互确认：产品经理，移动端，前段开发人员<br>7、接口确认：架构师，接口开发人员，移动端、前端开发人员<br>8.1、UI工时评估：产品经理，设计人员<br>8.2、接口工时评估：架构师，接口开发人员<br>8.3、移动端、前端工时评估：相关开发人员，技术经理<br>9、工时确认：产品经理，技术经理，设计人员<br>10、项目开发<br>11、测试用例及流程设计：产品经理、测试组<br>12、测试用例及流程确认：产品经理、开发人员，测试组<br>13、测试及debug：产品经理，测试组，开发<br>14、产品定版，release</p>
<h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a><strong>项目管理</strong></h3><h4 id="文档管理：SVN服务器管理"><a href="#文档管理：SVN服务器管理" class="headerlink" title="文档管理：SVN服务器管理"></a><strong>文档管理：</strong>SVN服务器管理</h4><p>1、需求文档：需求列表，业务说明文档<br>2、UI交互文档：交互稿（交互细节）<br>3、技术文档：业务逻辑的技术实现流程（技术流程文档：异常处理）<br>4、接口文档：数据格式（统一大小写，编码格式，浮点型精度，使用long类型表示浮点数据），通讯协议，数据结构<br>5、设计文档：效果图，切图，标注图<br>6、代码：代码更新和共同维护<br>7、上线资料<br>8、测试用例</p>
<h4 id="流程管理："><a href="#流程管理：" class="headerlink" title="流程管理："></a><strong>流程管理：</strong></h4><p>1、需求变更：原则上可以中前期增加需求；原则上不允许频繁变更需求；原则上不允许修改业务逻辑。需求变更必须经过产品经理、技术经理共同确认后才可变更。<br>2、业务逻辑变更：原则上不允许更改业务逻辑。<br>3、技术逻辑变更：架构师，接口开发人员，移动端开发人员共同确认<br>4、测试流程变更：产品经理确认</p>
<h4 id="开发管理："><a href="#开发管理：" class="headerlink" title="开发管理："></a><strong>开发管理：</strong></h4><p>1、开发人员：明确需求和业务、交互逻辑。开发以需求和业务逻辑为准。<br>2、发现业务缺陷：需与产品经理，技术经理汇报。如要变更业务逻辑：必须重新评估开发工时和工期。<br>3、如没有明确要求，UI在细节和使用习惯上，请尽量遵守各自系统的设计规范。<br>4、协同开发：需分工明确，工作量尽量均衡。分工应报与技术经理知晓。<br>5、变更需求，开发人员需向技术经理确认。<br>6、当前的bug,当日尽量解决。<br>7、优化性、新需求性bug：请分发产品经理。<br>8、优化性、新需求性修改：请知会其他平台开发人员。<br>9、周报：本周开发内容；本周技术点总结；自评开发中最好的地方；遇到的问题；下周计划。</p>
<h4 id="测试：mantis-bug-tracker管理bug"><a href="#测试：mantis-bug-tracker管理bug" class="headerlink" title="测试：mantis bug tracker管理bug"></a><strong>测试</strong>：mantis bug tracker管理bug</h4><p>1、新需求性bug：提交产品经理，产品经理作为新需求提出，不分发bug。<br>2、优化型bug：提交产品经理，产品经理作为新需求提出，不分发bug。<br>3、开发bug：提交开发人员。</p>
<p>注：<br>1、明确bug等级，非业务性bug、非严重缺陷bug、非崩溃性bug谨慎提交为严重缺陷等级。<br>2、重点把握测试流程，明确测试方向：前期重点为功能性测试，业务逻辑测试。中后期加入交互性测试。<br>3、谨慎使用边开发边测试的开发测试流程：这种模式下，请明确测试重点（开发完毕前侧重功能性、业务性测试）<br>4、开发没有结束前的测试：测试人员禁止频繁交涉开发人员，所有bug只需提交服务器。<br>5、测试人员发起的需求性、优化性bug，请提交产品经理，产品经理请严格遵守需求变更流程。</p>
<h4 id="上线："><a href="#上线：" class="headerlink" title="上线："></a><strong>上线：</strong></h4><p>1、测试发布测试完结，产品达到上线要求报告。<br>2、技术经理发布上线申请。<br>3、产品经理确认可以上线，发布上线请求。<br>4、上线人员release应用到各个渠道，上线后邮件知会相关人员产品上线情况。</p>
<h3 id="项目总结："><a href="#项目总结：" class="headerlink" title="项目总结："></a><strong>项目总结：</strong></h3><p>1、产品经理：新需求追加列表，优化性需求追加列表。<br>2、设计人员：改版明细<br>3、开发人员：改版明细，开发模块，代码量及技术点总结报告。<br>4、测试报告，测试数据统计。<br>5、项目总结报告</p>
<h3 id="情绪管理"><a href="#情绪管理" class="headerlink" title="情绪管理"></a><strong>情绪管理</strong></h3><p>情绪管理在项目开发中尤其是高压快节奏的开发中很重要但也很容易被忽略。一旦产生了情绪，对项目的推进和沟通必然存在影响。</p>
<p>其实，开发人员希望自己能够开发出具有良好用户体验和易扩展的应用；测试人员希望尽可能多的测出bug，尽可能的优化用户体验；产品经理希望自己的产品能够尽量的功能完善，体验最佳；管理人员希望我们的软件能够尽可能的稳定、健壮。</p>
<p><strong>单独来看，大家的意愿和目标都是好的，高度一致的，那为什么还会产生情绪，进而发生执行困难呢？</strong><br>经过思考，总结出大体以下几点：<br>1、初期业务没有思虑清晰、周全，导致中后期业务逻辑发生改变。<br>2、业务逻辑的改变，导致UI交互逻辑的改变。<br>3、业务和交互逻辑（流程）缺乏有效、明确的文档，导致开发人员、产品对业务的理解各自出现偏差，这种偏差发现的越晚，矛盾就会越大。<br>4、研发人员技术崇拜，又或者软件上的设计方案和各平台本身的设计规范冲突，导致开发人员的开发意愿和产品经理的设计意愿冲突。<br>5、高强度工作等导致的生理性反应。<br>6、不同平台的开发者之间，对一些细节或需求变更没有相互通知，造成相互挖坑的被坑情绪。<br>7、加入存在边开发边测试的情况，测试人员频繁的交涉技术人员，会导致开发流程中断，在开发阶段为开发人员产生非功能性、业务逻辑性的bug,导致开发人员可测试人员各自的情绪波动。<br>8、产品失败，努力白流，付出无法得到认可导致的情绪。</p>
<p>以上几点，基本可以涵盖主要的影响整个产品涉及人员的情绪波动的原因。<br><strong>那么，该如何尽量的减少负面的情绪波动呢？</strong><br>1、产品在立项和需求确认阶段，要充分的讨论和思考整个业务逻辑，尽量达到少更改或不更改需求。<br>2、业务逻辑和交互逻辑，要形成明确细致的流程性文档，避免出现需求不明确和业务理解偏差。<br>3、在开发阶段，产品与测试人员尽量减少交涉，有问题尽量通过技术经理沟通传达。<br>4、在产品开发阶段，如果要进行并行测试，尽量合理规划测试流程，明确测试重点。<br>5、整个产品周期中，遇到任何问题，需要主动沟通。<br>6、开发启动前，明确项目的管理流程，开发中尽量严格按照管理流程推进。<br>7、产生负面情绪，要学会调节和沟通释放负面情绪，归根结底，大家的目标都是一致的。</p>
<p><strong>后记</strong><br>流程是死的，人是活的，问题是在所难免的。在实际的项目管理中，各自都尽量的把自己的工作在项目早期完善，后面才会更加顺利的推进。<br><img src="/hello-world/img/workload.png" alt="工作状态"><br>如图所示，一项工作，假如我们在前50%的时间完成了80%工作，那么最终的结果我们可能会达到90%或100%期望；如果我们在前50%的时间只完成了30%的工作，那么我们就有很大的风险到最后只达到60%的期望。</p>
<p>这是我以前学到的一个道理，送给各位看官。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;刚刚做完一个项目，值得总结，在此记录一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版权归作者所有，如有转发，请注明文章出处：&lt;a href=&quot;https://xiaodanchen.github.io/archives
    
    </summary>
    
      <category term="项目管理" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>机器学习：概论</title>
    <link href="http://yoursite.com/2016/11/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%A6%82%E8%AE%BA/"/>
    <id>http://yoursite.com/2016/11/06/机器学习：概论/</id>
    <published>2016-11-06T05:44:50.000Z</published>
    <updated>2016-11-07T02:54:31.839Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>本文是对“从机器学习谈起.pdf”的笔记。<br>感兴趣的朋友欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h2 id="一个故事说明什么是机器学习"><a href="#一个故事说明什么是机器学习" class="headerlink" title="一个故事说明什么是机器学习"></a>一个故事说明什么是机器学习</h2><p>等人问题：</p>
<h2 id="机器学习的定义"><a href="#机器学习的定义" class="headerlink" title="机器学习的定义"></a>机器学习的定义</h2><p>机器学习就是计算机利用已有数据，得出某种模型，然后利用该模型预测未来的一种方法。<br>区别于我们常见的计算机程序基于因果（固定程序方法）的，机器学习是基于经验（数据）的算法。</p>
<h2 id="机器学习的范围"><a href="#机器学习的范围" class="headerlink" title="机器学习的范围"></a>机器学习的范围</h2><ul>
<li>模式识别：模式识别=机器学习。模式识别源于工业界，机器学习源于计算机科学，二者是统一问题在两个领域的不同体现。</li>
<li>数据挖掘：数据挖掘=机器学习+数据库。</li>
<li>统计学习：统计学习近似于机器学习。机器学习的大量方法来自于统计学，区别是，前者偏重于数学领域，后者偏重于实践。</li>
<li>计算机视觉：计算机视觉=图像处理+机器学习。图像处理技术将图片处理成时候机器学习算法适用的输入数据，学习算法则根据机器学习模型从输入图像中识别出相关的模式。例如：百度识图，手写输入，车牌识别等。</li>
<li>语音识别：语音处理+机器学习。</li>
<li>自然语言处理：文本处理+机器学习。</li>
</ul>
<h2 id="机器学习的方法"><a href="#机器学习的方法" class="headerlink" title="机器学习的方法"></a>机器学习的方法</h2><h3 id="回归算法"><a href="#回归算法" class="headerlink" title="回归算法"></a>回归算法</h3><ul>
<li><strong>线性回归</strong>：数值问题。最小二乘法；数值计算：梯度下降法，牛顿法<br>例子：预测房价问题。</li>
<li><strong>逻辑回归</strong>：分类问题。<br>例子：预测肿瘤问题。<h3 id="神经网络："><a href="#神经网络：" class="headerlink" title="神经网络："></a>神经网络：</h3>ANN（人工神经网络）算法，<strong>BP算法（加速神经网络训练过程的数值算法）</strong>。神经网络学习的机理简单来说就是<strong>“分解与组合”</strong>。</li>
</ul>
<p>下面让我们来看一个简单的神经网络模型：输入层 -&gt; 隐藏层 -&gt; 输出层。输入层负责接收信号数据。隐藏层负责数据的分析和处理，最后将结果整合输出到输出层。<br><img src="/hello-world/img/simple_ann.png" alt="简单神经网络模型"><br>如图：每层中的一个元代表了一个处理单元，模拟了一个神经元。若干个处理单元组成一个层，若干个层组成一个简单的“神经网络”。</p>
<p>在神经网络中，每个处理单元实际上就是一个“逻辑回归模型”。逻辑回归模型接收上一层的输入，把模型的预测结果作为输出传递给下一层。通过这样的过程，神经网络可以实现非常复杂的非线性分类。</p>
<p>进入90年代，神经网络算法进入一个瓶颈期，原因是虽然具有<strong>BP算法</strong>的加速，神经网络的训练过程仍然很困难。因此90年代后期支持向量机算法（SVM）取代了神经网络的地位。</p>
<h3 id="支持向量机（SVM）算法："><a href="#支持向量机（SVM）算法：" class="headerlink" title="支持向量机（SVM）算法："></a>支持向量机（SVM）算法：</h3><p>支持向量机算法是但是与统计学习界，同时在机器学习界大放光彩的经典算法。</p>
<p>SVM从某种意义上来说是逻辑回归算法的强化：通过给与逻辑回归算法更加严格的优化条件，SVM可以获得比逻辑回归算法更好的分类界限，从而达成很好的效果。</p>
<p>通过和<strong>高斯“核“</strong>的结合，SVM可以表达出非常复杂的分类界线。”核”实际上是一种特殊的函数，最典型的特征就是可以将低维的空间映射到高维的空间(但却不会带来计算复杂性的提升)。</p>
<p>SVG一直占据着机器学习最核心的地位，基本取代了神经网络算法，直至近期神经网络接着<strong>深度学习</strong>重新崛起，两者之间才又发生了微妙的平衡变化。</p>
<h3 id="聚类算法："><a href="#聚类算法：" class="headerlink" title="聚类算法："></a>聚类算法：</h3><p>前面的算法一个显著的特征就是训练数据中包含了标签，训练出的模型可以对其他数据预测标签，即<strong>监督式学习</strong>。<br>在下面的算法中，训练数据是不含标签的，而算法的目的是通过训练，推测这些数据的标签，即<strong>无监督算法</strong>。<br>无监督式学习最典型的算法就是聚类算法。比如K-Means算法。</p>
<h3 id="降维（特征量）算法："><a href="#降维（特征量）算法：" class="headerlink" title="降维（特征量）算法："></a>降维（特征量）算法：</h3><p>降维算法也是一种无监督式学习算法，其特征就是将数据从高位降低到低维层次。<br>降维算法的主要作用是压缩数据以及提升其他算法的效率。降维算法的另一个好处是可以实现数据的可视化（降维至3维以下）。<br>降维算法的代表是<strong>PCA算法（主成分分析算法）</strong>。</p>
<h3 id="推荐算法："><a href="#推荐算法：" class="headerlink" title="推荐算法："></a>推荐算法：</h3><p>推荐算法是目前非常火的一种算法，在电商领域得到了非常广泛的运用。推荐算法的主要特征就是可以自动向用户推荐他们感兴趣的东西，从而增加购买率，提升效率。<br>推荐算法有两个主要的类别：</p>
<ul>
<li><strong>基于物品内容的推荐：</strong>是将与用户购买的内容相似的物品推荐给用户。这样的前提是每个物品都得有若干个标签，好处是物品关联度较大，缺点是因为每个物品都要贴标签，工作量较大。</li>
<li><strong>基于用户相似度的推荐：</strong>是将与目标用户兴趣相同的其他用户购买的物品推荐给目标用户。<br>这两种类别的算法各有优缺点，一般混合使用。最著名的就是<strong>协同过滤算法</strong>。<h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3>除了以上算法外，机器学习领域还有其他算法，例如：高斯判别，朴素贝叶斯算法，决策树等等。但是上面六种是使用最多，影响最广，类型最全的典型算法。</li>
</ul>
<h2 id="机器学习的应用–大数据"><a href="#机器学习的应用–大数据" class="headerlink" title="机器学习的应用–大数据"></a>机器学习的应用–大数据</h2><p>众所周知，现在是大数据的时代。那么，到底什么是大数据呢？实际上，大数据是一门实实在在的有着基础理论和科学研究背景的一门技术，其中包含着分布式计算、内存计算、机器学习、计算机视觉、语音识别、自然语言处理等众多计算机界崭新的技术，而且是这些技术综合的产物。</p>
<p>事实上，大数据包含着4大特征，即4V理念：Volume(体量)、Varity(多样性)、Velocity(速度)、Value(价值)。如图：<br><img src="/hello-world/img/bigData.png" alt="大数据"></p>
<p>大数据的核心是利用<strong>数据的价值</strong>，机器学习是利用数据价值的关键技术。同时，复杂的机器学习算法的计算时间迫切需要<strong>分布式计算</strong>，<strong>内存计算</strong>这样的关键技术。机器学习与大数据二者是相辅相成，相互促进的关系。</p>
<p><strong>成功的机器学习应用不是拥有最好算法，而是拥有做多的数据。</strong><br>大数据分布式计算技术<strong>Map-Reduce</strong>使得计算越来越快。</p>
<h2 id="机器学习的子类–深度学习"><a href="#机器学习的子类–深度学习" class="headerlink" title="机器学习的子类–深度学习"></a>机器学习的子类–深度学习</h2><p>进来，机器学习的发展产生了一个新的方向：深度学习。听起来非常高大上，但其原理非常简单，即将传统的神经网络发展到了多隐藏层的地步。</p>
<p>2006年Geoffrey Hinton在《科学》杂志上发表了一片文章，论证了两个观点：<br><strong>1，多隐藏层的神经网络具有优异的特征学习能力，学习到的特征对数据有更本质的刻画，从而有利于可视化和分类。<br>2，深度神经网络在训练上的难度，可以通过“逐层初始化”来有效克服。</strong></p>
<h2 id="机器学习的父类–人工智能（AI）"><a href="#机器学习的父类–人工智能（AI）" class="headerlink" title="机器学习的父类–人工智能（AI）"></a>机器学习的父类–人工智能（AI）</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;本文是对“从机器学习谈起.pdf”的笔记。&lt;br&gt;感兴趣的朋友欢迎加入&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版权归作者所有，如有转发，请注明文章出处：&lt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Android WebView加载地图HTML设置</title>
    <link href="http://yoursite.com/2016/11/05/Android-WebView%E5%8A%A0%E8%BD%BD%E5%9C%B0%E5%9B%BEHTML%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/11/05/Android-WebView加载地图HTML设置/</id>
    <published>2016-11-05T14:23:04.000Z</published>
    <updated>2016-11-05T14:27:25.885Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>本篇将要介绍Android 通过webview加载地图相关的URL需要的相关设置。<br>欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="适配地图显示所需要的设置"><a href="#适配地图显示所需要的设置" class="headerlink" title="适配地图显示所需要的设置"></a>适配地图显示所需要的设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">webSettings.setDomStorageEnabled(<span class="keyword">true</span>); </div><div class="line">webSettings.setDatabaseEnabled(<span class="keyword">true</span>);</div><div class="line">String dir = getApplicationContext().getDir(<span class="string">"database"</span>, Context.MODE_PRIVATE).getPath();</div><div class="line">webSettings.setGeolocationEnabled(<span class="keyword">true</span>);</div><div class="line">webSettings.setGeolocationDatabasePath(dir);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本篇将要介绍Android 通过webview加载地图相关的URL需要的相关设置。&lt;br&gt;欢迎加入&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版权归作
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/categories/Android/HTML/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Android在断网时本地化显示H5错误页</title>
    <link href="http://yoursite.com/2016/11/05/Android%E5%9C%A8%E6%96%AD%E7%BD%91%E6%97%B6%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%98%BE%E7%A4%BAH5%E9%94%99%E8%AF%AF%E9%A1%B5/"/>
    <id>http://yoursite.com/2016/11/05/Android在断网时本地化显示H5错误页/</id>
    <published>2016-11-05T09:14:10.000Z</published>
    <updated>2016-11-05T09:42:52.213Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>本篇将要介绍如何在没有网络的状态下，显示本地的H5界面,并跳回上级原生界面。<br>欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="实现本地化H5界面："><a href="#实现本地化H5界面：" class="headerlink" title="实现本地化H5界面："></a>实现本地化H5界面：</h3><p>本地化HTML文件，CSS文件，JS文件，图片资源等：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在Android工程assets目录下保存H5界面相关资源和文件，例如：</span></div><div class="line">|assets-----</div><div class="line">       |</div><div class="line">       |--error.html</div><div class="line">       |--css\error_style.css</div><div class="line">       |--js\error.js（由于功能简单，我的demo中就没有单独写成js文件，直接在HTML中实现）</div><div class="line">       |--img\error.png</div><div class="line">       |</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//error.html资源的引用</div><div class="line">﻿<span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"black"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>抱歉，信息加载失败<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    //加载css样式</div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"file:///android_asset/css/error_style.css"</span> /&gt;</span></div><div class="line">    </div><div class="line">    //js接口定义:也可以写成单独的js文件，目录如CSS资源加载目录</div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">        function back() &#123;</div><div class="line">            window.location.href = "activity:finish";//使用重定向，在webActivity中去捕获,"activity:finish"可自行定义</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"ww"</span>&gt;</span></div><div class="line"></div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"yyyy"</span>&gt;</span></div><div class="line">  //加载图片资源</div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"file:///android_asset/img/error.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aaaa"</span>&gt;</span>抱歉，信息加载失败<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bbbb"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:back();"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="点击返回，跳转到上级原生界面："><a href="#点击返回，跳转到上级原生界面：" class="headerlink" title="点击返回，跳转到上级原生界面："></a>点击返回，跳转到上级原生界面：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//WebActivity中捕获重定向url</span></div><div class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(url.length() != <span class="number">0</span> &amp;&amp; url.startsWith(<span class="string">"activity:finish"</span>))&#123;</div><div class="line">        	finish();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">        	view.loadUrl(url);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如何使用："><a href="#如何使用：" class="headerlink" title="如何使用："></a>如何使用：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在需要使用该本地资源的地方重新复制URL：</span></div><div class="line"><span class="comment">//XXXActivity：</span></div><div class="line">url = <span class="string">"file:///android_asset/error.html"</span>;</div><div class="line"> </div><div class="line"><span class="comment">//WebActivity:</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, <span class="keyword">int</span> errorCode, String description, String failingUrl)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onReceivedError(mWebView, errorCode, description, failingUrl);</div><div class="line">	<span class="comment">//判断网络状态的代码请自行实现</span></div><div class="line">	<span class="keyword">if</span>(NetWorkUtil.getNetWorkState(WebPageActivity.<span class="keyword">this</span>) == -<span class="number">1</span>)&#123;</div><div class="line">		view.loadUrl(<span class="string">"file:///android_asset/error.html"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本篇将要介绍如何在没有网络的状态下，显示本地的H5界面,并跳回上级原生界面。&lt;br&gt;欢迎加入&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版权归作者所有
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/categories/Android/HTML/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>架构师之路（一）：门外汉的杂想</title>
    <link href="http://yoursite.com/2016/10/31/%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%97%A8%E5%A4%96%E6%B1%89%E7%9A%84%E6%9D%82%E6%83%B3/"/>
    <id>http://yoursite.com/2016/10/31/架构师之路（一）：门外汉的杂想/</id>
    <published>2016-10-31T03:34:48.000Z</published>
    <updated>2016-11-09T03:48:43.799Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>作为Android移动端的一枚小菜鸟，时不时的也会想想自己未来的路该如何走。架构师是个不错的方向，作为一个门外汉，仅以此篇记录下自己那些七零八碎靠谱或者不靠谱的想法。<br>欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="通讯协议和数据格式"><a href="#通讯协议和数据格式" class="headerlink" title="通讯协议和数据格式"></a>通讯协议和数据格式</h3><p>request、response<br>head、body<br>error code、error message<br>客户端、服务端统一参数定义格式，统一大小写，统一编码格式</p>
<h3 id="接口版本技术："><a href="#接口版本技术：" class="headerlink" title="接口版本技术："></a>接口版本技术：</h3><p>为了兼容不同的软件版本或者业务版本，在后台接口设计的时候加入版本信息字段。后台根据版本信息做逻辑处理。</p>
<h3 id="数据同步技术："><a href="#数据同步技术：" class="headerlink" title="数据同步技术："></a>数据同步技术：</h3><h4 id="唯一标识方案："><a href="#唯一标识方案：" class="headerlink" title="唯一标识方案："></a>唯一标识方案：</h4><p>1、服务器端产生GUID作为数据的唯一标识同步到本地（优点：唯一性；缺点：需要存储多终端oldGUID，数据处理逻辑稍复杂。）</p>
<p>2、使用几个特殊字段拼出一个字符串做加密（MD5?），使用密文作为唯一标识（优点：同步逻辑简单。缺点：字段如果有变化，数据不会作为修改数据而是作为新增数据）</p>
<p>3、业务ID与物理ID：<br>使用GUID作为物理ID；使用某些业务数据拼出的MD5加密字符串作为业务ID。<br>新增、修改、删除数据在向服务器同步时，服务器需要校验业务ID。<br>如果服务器已存在业务ID，根据物理ID来进行数据是新增还是合并。如果数据存在合并，服务器需要向客户端返回合并后的物理ID和客户端原来的物理ID，客户端接收到合并信息后，对本地的数据的物理ID进行修改。</p>
<h4 id="数据同步方案："><a href="#数据同步方案：" class="headerlink" title="数据同步方案："></a>数据同步方案：</h4><p>方案一：<br>1，同步方法：<br>对所有需要同步的数据按新增、修改、删除进行分类。<br>按照修改 -&gt; 删除 -&gt; 新增 -&gt; 查询的流程逐条同步。在每一条同步结束后，回调同步方法。</p>
<p>2，缺点：<br>如果在某条数据同步失败，容易使整个同步流程陷入死循环或者卡壳。<br>死循环：造成应用卡顿，同步失败。<br>卡壳：数据同步失败。</p>
<p>3，解决办法：<br>客户端和服务端要协定好各种业务异常的通知机制。</p>
<p>方案二：<br>1，同步方法：<br>设定初始同步起始物理ID（最小比如“0000”）<br>根据同步起始物理ID，检出本地所有需要同步的数据，数据按物理ID从小到大排序。<br>取出第一条数据，判断数据是新增、修改还是删除。<br>将该条数据的物理ID设置为同步起始物理ID。<br>对该条数据调用相应的同步接口。<br>该条数据返回后，不论是否出现异常，继续回调同步方法（本条数据的物理ID为同步起始ID）。</p>
<p>当所有同步数据同步完成后，清零化同步起始物理ID，查询服务器数据到本地。</p>
<p>2，优点：<br>不会死循环和卡壳</p>
<p>3，缺点：<br>失败的数据不会同步到服务器，除非服务器做特定的兼容和适配。</p>
<p>注意：<br>以上两种方案，在获取到批量数据更新到本地数据库时，需要判断本地数据的状态，本地未同步的数据不允许被服务器的数据覆盖。<br>增量更新。</p>
<h3 id="数据备份技术："><a href="#数据备份技术：" class="headerlink" title="数据备份技术："></a>数据备份技术：</h3><p>双机热备份技术</p>
<blockquote>
<p>未完，待续</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作为Android移动端的一枚小菜鸟，时不时的也会想想自己未来的路该如何走。架构师是个不错的方向，作为一个门外汉，仅以此篇记录下自己那些七零八碎靠谱或者不靠谱的想法。&lt;br&gt;欢迎加入&lt;strong&gt;学习小组QQ群: 19
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Android/Java/"/>
    
      <category term="架构师" scheme="http://yoursite.com/categories/Android/Java/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="架构师" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>Android在H5加载完成前显示加载进度条</title>
    <link href="http://yoursite.com/2016/10/30/Android%E5%9C%A8H5%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%E5%89%8D%E6%98%BE%E7%A4%BA%E5%8A%A0%E8%BD%BD%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>http://yoursite.com/2016/10/30/Android在H5加载完成前显示加载进度条/</id>
    <published>2016-10-30T05:16:56.000Z</published>
    <updated>2016-11-05T09:08:46.193Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>H5加载慢，想要在移动端显示加载进度？答案就是这么简单！<br>欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="实现方案："><a href="#实现方案：" class="headerlink" title="实现方案："></a>实现方案：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_webpage);</div><div class="line">    initData();</div><div class="line">    initView();</div><div class="line">	<span class="comment">//注意：不要在mWebView loadUrl的时候显示进度条，因为这时候有可能你的webActivity的view还没有初始化，造成activity 的content view覆盖了进度条。</span></div><div class="line">    showLoading();</div><div class="line">&#125;</div><div class="line"></div><div class="line">mWebView.setWebChromeClient(<span class="keyword">new</span> WebPageChromeClient()&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</div><div class="line"> 	<span class="comment">//第二次更新：随着mwebview的设置不停增加。不知道什么时候发现进度条又不可见了。</span></div><div class="line">    <span class="comment">//这时候需要加入以下代码：</span></div><div class="line">    <span class="comment">//if(mProgressBar.getVisibility()==ProgressBar.GONE)&#123;</span></div><div class="line">	<span class="comment">//	mProgressBar.setVisibility(ProgressBar.VISIBLE);</span></div><div class="line">	<span class="comment">//&#125;</span></div><div class="line">    <span class="comment">//以上三行代码可以暂时解决问题，mProgressBar是我在BaseActivity中自己定义的对象。</span></div><div class="line">    <span class="keyword">if</span>(mProgressBar.getVisibility()==ProgressBar.GONE)&#123;</div><div class="line">		mProgressBar.setVisibility(ProgressBar.VISIBLE);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="comment">///////////////////////////////////////////////////</span></div><div class="line">    <span class="keyword">if</span>(newProgress == <span class="number">100</span>)&#123;</div><div class="line">    	cancelLoading();<span class="comment">//取消进度条显示</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.onProgressChanged(view, newProgress);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="错误方案："><a href="#错误方案：" class="headerlink" title="错误方案："></a>错误方案：</h3><p>假如你使用了<strong>onPageFinished()方案</strong>，那么恭喜你，你很有可能掉坑里了。因为url如果存在重定向等情况，onPageFinished会多次调用，而且很有可能，H5的界面还没有真正加载显示，你的loading界面就取消掉了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;H5加载慢，想要在移动端显示加载进度？答案就是这么简单！&lt;br&gt;欢迎加入&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版权归作者所有，如有转发，请注明文
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/categories/Android/HTML/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML与Android、IOS的JS调用</title>
    <link href="http://yoursite.com/2016/10/30/HTML%E4%B8%8EAndroid%E3%80%81IOS%E7%9A%84JS%E8%B0%83%E7%94%A8/"/>
    <id>http://yoursite.com/2016/10/30/HTML与Android、IOS的JS调用/</id>
    <published>2016-10-30T04:49:18.000Z</published>
    <updated>2016-10-30T05:14:46.288Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>近期研究了H5界面与移动端（Android，IOS）的交互方案，记录一下以飨众友。<strong>学习小组QQ群: 193765960</strong>。</p>
<p>本篇重点介绍H5调用移动端接口的通用方案，其他方案或者移动端调用H5接口的方法请自行研究。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><ul>
<li>移动端使用H5自带的标题栏，通过点击H5标题栏返回按钮回退或者跳转到移动端的某个原生界面。</li>
<li>点击H5的电话号码，本地拨打电话<h3 id="解决方案（Android-amp-IOS）"><a href="#解决方案（Android-amp-IOS）" class="headerlink" title="解决方案（Android &amp; IOS）"></a>解决方案（Android &amp; IOS）</h3><strong>1，定义接口</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidJsInterface</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AndroidJsInterface</span><span class="params">(Context activity)</span> </span>&#123;</div><div class="line">		mContext = activity;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@JavascriptInterface</span><span class="comment">//系统sdk 版本在v4.2以上时，必须加这个注解（安全性）</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//点击H5的某个区域，实现APP的跳转（退出WebpageActivity）</span></div><div class="line">		Intent intent = <span class="keyword">new</span> Intent(mContext, MainActivity.class);</div><div class="line">		mContext.startActivity(intent);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>2，activity处理</strong></p>
<ul>
<li><strong>方式一：向webview注册js接口–存在安全隐患（适用于Android，IOS是否适用待确认）</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Android端主要代码</span></div><div class="line">WebSettings webSettings = mWebView.getSettings();</div><div class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">mWebView.addJavascriptInterface(<span class="keyword">new</span> AndroidJsInterface(context), <span class="string">"android"</span>);<span class="comment">//注意：这里一定要让别名的首字母为小写，因为JS端实际调用中会将别名处理成小写。</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//JS端主要代码</span></div><div class="line">jsFun = <span class="keyword">new</span> function()&#123;</div><div class="line">  <span class="keyword">if</span>(app.isIOS())&#123;</div><div class="line">    ......</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(app.isAndroid())&#123;</div><div class="line">    android.fun1();<span class="comment">//别名首字母默认会被处理成小写，所以为了避免调用出错，最好统一采用小写字母</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Html端主要代码</span></div><div class="line">......(通过href或者onclick调用js的jsFun)</div></pre></td></tr></table></figure>
<ul>
<li><strong>方式二：h5重定向URL，移动端捕获（Android，IOS均可）</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Android端主要代码</span></div><div class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (url.length() != <span class="number">0</span> &amp;&amp; url.startsWith(<span class="string">"app:"</span>)) &#123;<span class="comment">//和后台约定好移动端js交互接口重定向URL的前缀：例如“app:”</span></div><div class="line">            <span class="comment">// 获得方法名</span></div><div class="line">            String methodName = url.substring(<span class="string">"app:"</span>.length());</div><div class="line">            <span class="comment">// 通过方法名反射获得方法</span></div><div class="line">            Method method;</div><div class="line">            Class&lt;?&gt; c;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                c = Class.forName(<span class="string">"com.base.web.AndroidJsInterface"</span>);</div><div class="line">                Constructor&lt;?&gt;[] constructors = c.getDeclaredConstructors();</div><div class="line">                Constructor&lt;?&gt; constructor = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; constructors.length; i++) &#123;</div><div class="line">                    constructor = constructors[i];</div><div class="line">                    <span class="keyword">if</span> (constructor.getGenericParameterTypes().length == <span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                constructor.setAccessible(<span class="keyword">true</span>);</div><div class="line">                Object clazz = constructor.newInstance(context);</div><div class="line"></div><div class="line">                method = clazz.getClass().getDeclaredMethod(methodName);</div><div class="line">                <span class="comment">// 执行该方法</span></div><div class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> != method)&#123;</div><div class="line">                    method.setAccessible(<span class="keyword">true</span>);</div><div class="line">                    method.invoke(clazz);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(url.length() != <span class="number">0</span> &amp;&amp; url.startsWith(<span class="string">"tel:"</span>))&#123;</div><div class="line">        	<span class="comment">//打电话：H5直接重定向href=“tel:13120003456”</span></div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_DIAL,</div><div class="line">            Uri.parse(url));</div><div class="line">            startActivity(intent);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">        	view.loadUrl(url);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//JS端主要代码</span></div><div class="line">jsFun1 = <span class="keyword">new</span> function()&#123;</div><div class="line">  window.location.href=<span class="string">"app:fun1"</span>;<span class="comment">//"app:"是和服务器约定好的前缀，fun1是移动端定义的名为fun1的js回调接口</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">jsFun2 = <span class="keyword">new</span> function()&#123;</div><div class="line">  window.location.href=<span class="string">"app:fun2"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Html端主要代码</span></div><div class="line">......(通过href或者onclick调用js的jsFun*)</div></pre></td></tr></table></figure>
<p><strong>需要注意的几点：</strong><br>1，采用方式一，一定要注意别名的首字母小写（是不是需要全部小写没有验证）<br>2，小米系列的手机可能对webview和Android的交互存在一些问题，如果发现交互怎么都不起作用，试试把APP卸载后重新安装（有缓存）。<br>3，使用方式二，一定要注意使用反射时，要调用反射类的构造函数实例化，否则会报告一堆的异常。</p>
<h3 id="H5中使用第三方API-比如百度的导航"><a href="#H5中使用第三方API-比如百度的导航" class="headerlink" title="H5中使用第三方API,比如百度的导航"></a>H5中使用第三方API,比如百度的导航</h3><p>Android中需要做一些特别的设置才可以<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//h5 调用第三方的API：百度导航</span></div><div class="line">webSettings.setDomStorageEnabled(<span class="keyword">true</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;近期研究了H5界面与移动端（Android，IOS）的交互方案，记录一下以飨众友。&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本篇重点介绍H5调用移动端接口的通用方案，其他方案
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/categories/Android/HTML/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title>基于PtrFrameLayout实现自定义仿京东下拉刷新控件</title>
    <link href="http://yoursite.com/2016/10/13/%E5%9F%BA%E4%BA%8EPtrFrameLayout%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%BF%E4%BA%AC%E4%B8%9C%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E6%8E%A7%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/10/13/基于PtrFrameLayout实现自定义仿京东下拉刷新控件/</id>
    <published>2016-10-13T10:36:33.000Z</published>
    <updated>2016-10-14T03:24:34.747Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>最近基于项目需要，使用PtrFrameLayout框架实现了自定义的下拉刷新控件，大体效果类似于京东APP的下拉刷新动态效果。在这里和大家分享一下具体的思路和需要注意的地方，以便帮助有类似开发和学习需求的同学省点时间。如果这篇文章对大家实际开发有所帮助，还望大家多多转发。</p>
<p>由于项目原因，本文不会涉及详细的具体实现，主要是提供思路和关键点。感兴趣的欢迎大家加入<strong>学习小组QQ群</strong>: 193765960，该群是技术分享和讨论群，还请遵守小组纪律。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/" target="_blank" rel="external">https://xiaodanchen.github.io/</a> </p>
</blockquote>
<p><a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">PtrFrameLayout开源项目下载地址</a></p>
<h3 id="实现的目标和效果"><a href="#实现的目标和效果" class="headerlink" title="实现的目标和效果"></a>实现的目标和效果</h3><p>1，尽可能的能够包裹各类布局和控件，不要仅仅适用于listview。<br>2，通过animation-list的xml作为动画的来源，方便替换<br>3，head部分通过layout xml定义，包括至少三部分：动画部分，刷新状态提示，上次刷新时间提示<br>（注：控件不支持上拉加载，其实按照逻辑，加载部分应该由子view自己实现比较好）</p>
<h3 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h3><ul>
<li><strong>MyPtrFrameLayout.java</strong>：最终控件，在我们的layout xml中用来包裹我们需要下拉刷新的布局。该类主要参照官方的<strong>PtrClassicFrameLayout.java</strong>实现。</li>
<li><strong>MyPtrHeaderView.java</strong>：MyPtrFrameLayout的头部，布局由<strong>layout_header_view.xml</strong>定义。该类主要参照官方的<strong>PtrClassicDefaultHeader.java</strong>实现。</li>
<li><strong>MyPtrAnimationDrawable.java</strong>：MyPtrHeaderView的动画部分，动画来源于自定义的<strong>res/drawable/xxx_animation.xml</strong></li>
</ul>
<h3 id="代码精要"><a href="#代码精要" class="headerlink" title="代码精要"></a>代码精要</h3><h4 id="MyPtrAnimationDrawable-java"><a href="#MyPtrAnimationDrawable-java" class="headerlink" title="MyPtrAnimationDrawable.java"></a>MyPtrAnimationDrawable.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPtrAnimationDrawable</span> <span class="keyword">extends</span> <span class="title">Drawable</span> <span class="keyword">implements</span> <span class="title">Animatable</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyPtrAnimationDrawable</span><span class="params">(Context context, View parent)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">        mParent = parent;</div><div class="line">        initAnimations();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    ......</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">		mAnimation.start();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</div><div class="line">        mAnimation.stop();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initAnimations</span><span class="params">()</span> </span>&#123;</div><div class="line">    	mParent.setBackgroundResource(R.drawable.xxx_animation);</div><div class="line">    	mAnimation = (AnimationDrawable) mParent.getBackground();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="MyPtrHeaderView-java"><a href="#MyPtrHeaderView-java" class="headerlink" title="MyPtrHeaderView.java"></a>MyPtrHeaderView.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPtrHeaderView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> <span class="keyword">implements</span> <span class="title">PtrUIHandler</span> </span>&#123;</div><div class="line">  ......</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        View header = LayoutInflater.from(getContext()).inflate(R.layout.layout_header_view, <span class="keyword">this</span>);</div><div class="line">        </div><div class="line">        mAnimaView = header.findViewById(R.id.xxx);</div><div class="line">        mDrawable = <span class="keyword">new</span> MyPtrAnimationDrawable(mContext, mAnimaView);</div><div class="line">        mDrawable.start();</div><div class="line">        mRefreshTextView = (TextView) header.findViewById(R.id.yyy);</div><div class="line">        mLastUpdateTextView = (TextView) header.findViewById(R.id.zzz);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ......</div><div class="line">    <span class="comment">//主要逻辑参照官方的**PtrClassicDefaultHeader.java**实现，代码官方类都有。这里不方便多写，但是不难，基本逻辑都一样。说白了就是替换，窗户纸一层。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="MyPtrFrameLayout-java"><a href="#MyPtrFrameLayout-java" class="headerlink" title="MyPtrFrameLayout.java"></a>MyPtrFrameLayout.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//该类主要参照官方的**PtrClassicFrameLayout.java**实现。代码总共没有多少行，纯替换。非重点就不啰嗦的贴代码了。</span></div></pre></td></tr></table></figure>
<h3 id="重要的知识点（-）"><a href="#重要的知识点（-）" class="headerlink" title="重要的知识点（*）"></a>重要的知识点（<strong><strong>*</strong></strong>）</h3><ul>
<li><p>当我们的下拉刷新控件包裹了可滑动的视图布局时，当视图上滑出屏幕一部分时再下拉视图，会发现我们的视图滑出去的部分没有滑回来，而是出现了被下来控件headerview遮盖的情况。</p>
</li>
<li><p>通过设置setPullToRefresh（boolean pull_2_fresh）方法可以设置释放刷新还是下拉过程中到达刷新边界自动刷新</p>
</li>
</ul>
<p>经查资料，发现官方早已给我们封装好了默认的处理类。不废话，直接上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加入在MainActivity中使用了MyPtrFrameLayout下拉刷新控件布局</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> initView（）&#123;</div><div class="line">  frame = (MyPtrFrameLayout) view.findViewById(R.id.my_ptr_framelayout);</div><div class="line">  frame.setPullToRefresh(<span class="keyword">true</span>);<span class="comment">//true:下拉过程中刷新；false：释放刷新</span></div><div class="line">  frame.setLastUpdateTimeKey(HomePage.class.getName());</div><div class="line">  <span class="comment">//以下代码是解决滑出视图被遮盖的关键：</span></div><div class="line">  <span class="comment">//1. 使用官方提供的PtrDefaultHandler类</span></div><div class="line">  frame.setPtrHandler(<span class="keyword">new</span> PtrDefaultHandler() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkCanDoRefresh</span><span class="params">(PtrFrameLayout frame, View content, View header)</span> </span>&#123;</div><div class="line">        	<span class="comment">//2. 使用这个代码可以解决滑动冲突（*****）,切记</span></div><div class="line">        	<span class="keyword">return</span> PtrDefaultHandler.checkContentCanBePulledDown(frame, content, header)&amp;&amp;!frame.isRefreshing();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefreshBegin</span><span class="params">(PtrFrameLayout frame)</span> </span>&#123;</div><div class="line">        	<span class="comment">//加载数据，回调刷新界面的代码</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考：<br><a href="http://blog.csdn.net/wateryi/article/details/51315079" target="_blank" rel="external">下拉刷新PtrFrameLayout组件的使用</a></p>
<blockquote>
<p>这篇文章中所用到的代码项目原因可能具有版权问题，大家是在实际开发中还是以参考借鉴为主吧。最后，如果这篇文章对大家有帮助，大家就偷偷看吧，项目原因就不要太扩散了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;最近基于项目需要，使用PtrFrameLayout框架实现了自定义的下拉刷新控件，大体效果类似于京东APP的下拉刷新动态效果。在这里和大家分享一下具体的思路和需要注意的地方，以便帮助有类似开发和学习需求的同学省点时间。如果这篇文
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="pull-to-refresh" scheme="http://yoursite.com/categories/Android/pull-to-refresh/"/>
    
      <category term="下拉刷新" scheme="http://yoursite.com/categories/Android/pull-to-refresh/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="pull-to-refresh" scheme="http://yoursite.com/tags/pull-to-refresh/"/>
    
      <category term="PtrFrameLayout" scheme="http://yoursite.com/tags/PtrFrameLayout/"/>
    
      <category term="下拉刷新" scheme="http://yoursite.com/tags/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习：数学基础（概率论与数理统计）</title>
    <link href="http://yoursite.com/2016/09/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%EF%BC%88%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%EF%BC%89/"/>
    <id>http://yoursite.com/2016/09/26/机器学习：数学基础（概率论与数理统计）/</id>
    <published>2016-09-26T04:49:01.000Z</published>
    <updated>2016-09-27T05:53:53.072Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>近期在自学机器学习，把笔记做个整理，以方便查阅和整理知识框架。喜欢探讨机器学习或者Android开发技术的同学可以加<strong>学习小组QQ群: 193765960</strong>。</p>
<p>本文是机器学习的第二篇，仅是根据自己的理解做一个学习笔记，如果有大牛发现我这个小菜鸟的学习路线跑偏了，还希望能够提醒一下哈，在此表示感谢。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="数学基础教材名目（我自己根据理解指定的，不一定准确）"><a href="#数学基础教材名目（我自己根据理解指定的，不一定准确）" class="headerlink" title="数学基础教材名目（我自己根据理解指定的，不一定准确）"></a>数学基础教材名目（我自己根据理解指定的，不一定准确）</h3><ul>
<li>线性代数（同济大学 第四版）</li>
<li>概率论与数理统计（浙江大学 第三版）</li>
<li>复变函数（西安交通大学 第四版）</li>
<li>随机过程极其应用（陆大絟 清华大学）</li>
</ul>
<h2 id="概率论与数理统计"><a href="#概率论与数理统计" class="headerlink" title="概率论与数理统计"></a>概率论与数理统计</h2><h3 id="第一章-概率论的基本概念"><a href="#第一章-概率论的基本概念" class="headerlink" title="第一章 概率论的基本概念"></a>第一章 概率论的基本概念</h3><ul>
<li>确定性现象：在一定条件下必然发生的现象。</li>
<li>统计规律性：在大量的重复试验或观察中所呈现出的固有规律性。</li>
<li>随机现象：在个别试验中其结果呈现不确定性，在大量重复试验中其结果又具有统计规律性的现象。<h4 id="随机试验"><a href="#随机试验" class="headerlink" title="随机试验"></a>随机试验</h4>我们将具有以下三个特点的试验称为<strong>随机试验</strong>：</li>
<li>可在相同的条件下重复试验。</li>
<li>能事先明确试验的所有可能出现的结果。</li>
<li>进行一次试验，不能确定会出现哪一个试验结果。</li>
</ul>
<h4 id="样本空间，随机事件"><a href="#样本空间，随机事件" class="headerlink" title="样本空间，随机事件"></a>样本空间，随机事件</h4><p><strong>样本空间</strong>：随机试验E所有可能出现的结果所组成的已知的集合S，样本空间的元素称为样本点。<br><strong>随机事件</strong>：试验E的样本空间S的子集，严格说是S中满足某些条件的子集，简称<strong>事件</strong>。由一个样本点组成的单点集，称为<strong>基本事件</strong>。<br><strong>必然事件</strong>：样本空间S。<br><strong>不可能事件</strong>：空集<span>$\varnothing$</span><!-- Has MathJax --></p>
<h4 id="事件间的关系及事件运算"><a href="#事件间的关系及事件运算" class="headerlink" title="事件间的关系及事件运算"></a>事件间的关系及事件运算</h4><ul>
<li>若<span>$A\subset B$</span><!-- Has MathJax -->,称事件B包含事件A</li>
<li>若<span>$A\subset B$</span><!-- Has MathJax --> 且<span>$B\subset A$</span><!-- Has MathJax -->即A=B,责称事件B等于事件A</li>
<li><span>$A\cup B = \left \{ x\mid x\in A或  x\in B\right \}$</span><!-- Has MathJax --> 称为事件A与事件B的<strong>和事件</strong>。类似的<span>$\bigcup_{k=1}^{n}A_k$</span><!-- Has MathJax -->称为n个事件<span>$A_1，A_2，...,A_n$</span><!-- Has MathJax -->的和事件。<span>$\bigcup_{k=1}^{\infty }A_k$</span><!-- Has MathJax -->称为可列事件<span>$A_1，A_2，...$</span><!-- Has MathJax -->的和事件。</li>
<li><span>$A\cap B = \left \{ x\mid x\in A且  x\in B\right \}$</span><!-- Has MathJax --> 称为事件A与事件B的<strong>积事件</strong>。<span>$A\cap B$</span><!-- Has MathJax -->也记作AB。类似的<span>$\bigcap_{k=1}^{n}A_k$</span><!-- Has MathJax -->称为n个事件<span>$A_1，A_2，...,A_n$</span><!-- Has MathJax -->的积事件。<span>$\bigcap_{k=1}^{\infty }A_k$</span><!-- Has MathJax -->称为可列事件<span>$A_1，A_2，...$</span><!-- Has MathJax -->的积事件。</li>
<li><span>$A-B = \left \{ x\mid x\in A或  x\notin B\right \}$</span><!-- Has MathJax --> 称为事件A与B的<strong>差事件</strong>。</li>
<li>若<span>$A\cap B = \varnothing$</span><!-- Has MathJax -->则称事件A与B<strong>互不相容</strong>或者<strong>互斥</strong>。</li>
<li>若<span>$A\cup B = S且A\cap B = \varnothing$</span><!-- Has MathJax -->则称事件A与B<strong>互为逆事件</strong>或者互为<strong>对立事件</strong>。</li>
</ul>
<p><strong>时间运算</strong></p>
<ul>
<li><strong>交换律</strong>：<span>$A\cup B = b\cup A; A\cap B = B\cap A$</span><!-- Has MathJax --></li>
<li><strong>结合律</strong>：<span>$A\cup (B\cup C) = (A\cup B)\cup C;A\cap (B\cap C) = (A\cap B)\cap C;$</span><!-- Has MathJax --></li>
<li><strong>分配律</strong>：<span>$A\cup (B\cap C) = (A\cup B)\cap (A\cup C);A\cap (B\cup C) = (A\cap B)\cup (A\cap C);$</span><!-- Has MathJax --></li>
<li><strong>德.摩根律</strong>：<span>$\overline{A\cup B} = \overline{A} \cap \overline{B};\overline{A\cap B} = \overline{A} \cup \overline{B};$</span><!-- Has MathJax --></li>
</ul>
<h4 id="频率与概率"><a href="#频率与概率" class="headerlink" title="频率与概率"></a>频率与概率</h4><p><strong>定义</strong>：<br>在n次试验中，事件A发生的次数称为<strong>频数</strong>，记为<span>$n_A$</span><!-- Has MathJax -->。比值<span>$\frac{n_A}{n}$</span><!-- Has MathJax -->称为事件A发生的<strong>频率</strong></p>
   <span>$$</span><!-- Has MathJax -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;近期在自学机器学习，把笔记做个整理，以方便查阅和整理知识框架。喜欢探讨机器学习或者Android开发技术的同学可以加&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文是机器学习的第二篇，
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="概率论" scheme="http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
      <category term="数理统计" scheme="http://yoursite.com/tags/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>机器学习：数学基础（线性代数篇）</title>
    <link href="http://yoursite.com/2016/09/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%EF%BC%88%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AF%87%EF%BC%89/"/>
    <id>http://yoursite.com/2016/09/25/机器学习：数学基础（线性代数篇）/</id>
    <published>2016-09-25T05:08:14.000Z</published>
    <updated>2016-09-26T04:50:39.936Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>近期在自学机器学习，把笔记做个整理，以方便查阅和整理知识框架。喜欢探讨机器学习或者Android开发技术的同学可以加<strong>学习小组QQ群: 193765960</strong>。</p>
<p>本文是机器学习的第一篇，因为我本人对机器学习的整个理解有限，就不再给大家一本正经的胡说八道了，以免误人子弟，仅是根据自己的理解做一个学习笔记，如果有大牛发现我这个小菜鸟的学习路线跑偏了，还希望能够提醒一下哈，在此表示感谢。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="数学基础教材名目（我自己根据理解指定的，不一定准确）"><a href="#数学基础教材名目（我自己根据理解指定的，不一定准确）" class="headerlink" title="数学基础教材名目（我自己根据理解指定的，不一定准确）"></a>数学基础教材名目（我自己根据理解指定的，不一定准确）</h3><ul>
<li>线性代数（同济大学 第四版）</li>
<li>概率论与数理统计（浙江大学 第三版）</li>
<li>复变函数（西安交通大学 第四版）</li>
<li>随机过程极其应用（陆大絟 清华大学）</li>
</ul>
<h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><h3 id="第一章-行列式"><a href="#第一章-行列式" class="headerlink" title="第一章 行列式"></a>第一章 行列式</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><ol>
<li>行列式是一个<strong>算术表达式</strong>的矩阵式的表达方式，比如表达式<span>$a_{11}a_{22} - a_{12}a_{21}$</span><!-- Has MathJax -->的二阶行列式表示为：<span>$$\begin{vmatrix}
a_{11}\ \ a_{12} \\ 
a_{21}\ \ a_{22} 
\end{vmatrix}$$</span><!-- Has MathJax -->
$a_{ij}$称为行列式的元素或元</li>
<li>全排列及其逆序数</li>
</ol>
<ul>
<li>把n个元素排成一列就叫这n个元素的一个全排列，简称排列。</li>
<li>对n个元素规定好一个标准的次序，对于这n个元素的任何一个排列，如果任意两个元素相互的先后次序与标准排列中的次序不一致，就说有一个逆序。</li>
<li>一个排列中的逆序总数称为这个排列的逆序数</li>
<li>逆序数为奇数的排列称为奇排列，为偶数的排列称为偶排列。</li>
</ul>
<ol>
<li><p>n阶行列式(t是$p_1，p_2，…，p_n$相对于自然数列1，2，…n的逆序数)</p>
<span>$$\sum(-1)^ta_1p_1a_2p_2...a_np_n = \begin{vmatrix}
a_{11}\ \ a_{12}\ ... a_{1n}\\ 
a_{21}\ \ a_{22}\ ... a_{2n}\\ 
.....\\
a_{n1}\ \ a_{n2}\ ... a_{nn}
\end{vmatrix}= D$$</span><!-- Has MathJax -->
</li>
<li><p>转置行列式$D^T$</p>
<span>$$D = \begin{vmatrix}
a_{11}\ \ a_{12}\ ... a_{1n}\\ 
a_{21}\ \ a_{22}\ ... a_{2n}\\ 
.....\\
a_{n1}\ \ a_{n2}\ ... a_{nn}
\end{vmatrix},D^T = \begin{vmatrix}
a_{11}\ \ a_{21}\ ... a_{n1}\\ 
a_{12}\ \ a_{22}\ ... a_{n2}\\ 
.....\\
a_{1n}\ \ a_{2n}\ ... a_{nn}
\end{vmatrix}$$</span><!-- Has MathJax -->
</li>
</ol>
<h4 id="定理及推论"><a href="#定理及推论" class="headerlink" title="定理及推论"></a>定理及推论</h4><ol>
<li>主对角线以下（上）的元素全为零的行列式叫做上（下）三角行列式，其算术表达式为对角线元素乘积。</li>
<li>一个排列中，任意两个元素对换，排列改变奇偶性。</li>
<li>奇数排列变成标准排列的对换次数为奇数，偶数排列对换成标准排列的次数为偶数。</li>
<li>行列式与他的转置行列式相等</li>
<li>互换行列式的两行（列）,行列式变号。</li>
<li>行列式中如果有两行或两列成比例，则次行列式等于零。</li>
<li>把行列式的某一行（列）的元素各自拆分成2个数字的和，则行列式的值等于拆分的两个子行列式的和</li>
<li><strong>把行列式的某一行（列）的各个元素乘以同一个数加到另一行（列）对应的元素上去，行列式不变。</strong></li>
</ol>
<blockquote>
<p><strong>余子式</strong>：在行列式中，把第<span>$a_{ij}$</span><!-- Has MathJax -->元素所在的行和列删除后，剩余的行列式称为<span>$a_{ij}$</span><!-- Has MathJax -->的余子式，计做<span>$M_{ij}$</span><!-- Has MathJax -->。<span>$A_{ij} = (-1)^{i+j}M_{ij}$</span><!-- Has MathJax -->称为<span>$a_{ij}$</span><!-- Has MathJax -->的代数余子式。</p>
</blockquote>
<ol>
<li>一个行列式，如果其中第i行所有元素除<span>$a_{ij}$</span><!-- Has MathJax -->之外全为零，那么这个行列式等于<span>$a_{ij}$</span><!-- Has MathJax -->与他的代数余子式<span>$A_{ij}$</span><!-- Has MathJax -->的乘积。</li>
<li>行列式等于他的任意一行（列）的各个元素与其对应的代数余子式的乘积之和。（行列式的按行、按列展开）</li>
</ol>
<h4 id="克拉默法则"><a href="#克拉默法则" class="headerlink" title="克拉默法则"></a>克拉默法则</h4><p>含有n个未知数的n个线性方程的方程组<br><span>$$\left\{\begin{matrix}
a_{11}x_1 +  a_{12}x_2 + ...+ a_{1n}x_n = b_1\\ 
a_{21}x_1 +  a_{22}x_2 + ...+ a_{2n}x_n = b_2\\ 
......\\
a_{n1}x_1 +  a_{n2}x_2 + ...+ a_{nn}x_n = b_n
\end{matrix}\right.$$</span><!-- Has MathJax --><br>如果线性方程组的系数不等于零，即<br><span>$$D = \begin{vmatrix}
a_{11}\ \ a_{12}\ ... a_{1n}\\ 
a_{21}\ \ a_{22}\ ... a_{2n}\\ 
.....\\
a_{n1}\ \ a_{n2}\ ... a_{nn}
\end{vmatrix}\neq 0,$$</span><!-- Has MathJax --><br>那么，方程组有唯一解<br><span>$x_1 = \frac{D_1}{D}, x_2 = \frac{D_2}{D},..., x_n = \frac{D_n}{D},$</span><!-- Has MathJax --><br>其中，<span>$D_j(j = 1,2,...,n)$</span><!-- Has MathJax -->是把系数行列式D中的第j列用方程式组右端的常数项替换后所得的n阶行列式。</p>
<p>根据克拉默法则，可以得出如下定理，</p>
<ol>
<li>如果n阶线性方程组的系数行列式不等于0，则方程组一定有唯一解。</li>
<li>如果n元线性方程组无解或者有两个不同的解，则它的系数行列式必为0</li>
<li>如果n元齐次方程组（方程组右端为0）的系数行列式不等于0，则齐次方程组没有非零解。</li>
<li>如果齐次方程组有非零解，则它的系数行列式必为0.</li>
</ol>
<h3 id="第二章：矩阵及其运算"><a href="#第二章：矩阵及其运算" class="headerlink" title="第二章：矩阵及其运算"></a>第二章：矩阵及其运算</h3><h4 id="矩阵定义"><a href="#矩阵定义" class="headerlink" title="矩阵定义"></a>矩阵定义</h4><ol>
<li>由<span>$m \times n$</span><!-- Has MathJax -->个数排成的m行n列的数表称为m行n列矩阵，简称<span>$m \times n$</span><!-- Has MathJax -->矩阵,记作<span>$$A = \begin{bmatrix}
a_{11}\ \ a_{12}\ ... a_{1n}\\ 
a_{21}\ \ a_{22}\ ... a_{2n}\\ 
.....\\
a_{m1}\ \ a_{m2}\ ... a_{mn}
\end{bmatrix}\neq 0,$$</span><!-- Has MathJax -->
简记作<span>$A_{m \times n}$</span><!-- Has MathJax --></li>
<li>元素是实数的矩阵称为实矩阵，元素为复数的矩阵称为复矩阵</li>
<li>行数和列数都为n的矩阵称为n阶方阵，记为<span>$A_n$</span><!-- Has MathJax --></li>
<li>只有一行的矩阵称为<strong>行矩阵</strong>，又叫做<strong>行向量</strong></li>
<li>只有一列的矩阵称为<strong>列矩阵</strong>，又叫做<strong>列向量</strong></li>
<li>两个行数和列数均分别相等的矩阵，称为<strong>同型矩阵</strong></li>
</ol>
<span>$$</span><!-- Has MathJax -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;近期在自学机器学习，把笔记做个整理，以方便查阅和整理知识框架。喜欢探讨机器学习或者Android开发技术的同学可以加&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文是机器学习的第一篇，
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="线性代数" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android APP更换字体策略精要</title>
    <link href="http://yoursite.com/2016/09/12/Android-APP%E6%9B%B4%E6%8D%A2%E5%AD%97%E4%BD%93%E7%AD%96%E7%95%A5%E7%B2%BE%E8%A6%81/"/>
    <id>http://yoursite.com/2016/09/12/Android-APP更换字体策略精要/</id>
    <published>2016-09-12T02:38:43.000Z</published>
    <updated>2016-09-12T04:56:13.312Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>近期项目需要在我们的APP中使用指定的字体库。经过搜集资料，研读源码，和别人探讨请教，最终产出了一些比较好的方案。不敢专享，写成文章分享出来，希望对大家的实际开发工作有所帮助。喜欢探讨Android开发技术的同学可以加<strong>学习小组QQ群: 193765960</strong>。</p>
<p>本文只总结了较优方案，其他诸如自定义textView类，遍历layout_root_view这样的方案，作者认为限制较大，使用麻烦，就不在这里介绍了，感兴趣的朋友请自行百度。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="Android字体机制介绍"><a href="#Android字体机制介绍" class="headerlink" title="Android字体机制介绍"></a>Android字体机制介绍</h3><h4 id="关键类："><a href="#关键类：" class="headerlink" title="关键类："></a>关键类：</h4><ul>
<li><strong>Typeface:</strong><br>字体类，定义了字体类型到字体库的映射关系，Android有<strong>DEFAULT</strong>, <strong>MONOSPACE</strong>, <strong>SERIF</strong>, <strong>SANS_SERIF</strong>几种字体，根据各自的NORMAL(常规),BOLD(加粗),ITALIC(倾斜),BOLD_ITALIC(加粗倾斜)等几种样式，总共可以映射到至少16种字体库。</li>
<li><strong>TextAppearance:</strong><br>字体外观类，定义了字体的外观比如，typeface，textsize,textcolor等外观属性。</li>
</ul>
<h4 id="TextView的字体显示机制"><a href="#TextView的字体显示机制" class="headerlink" title="TextView的字体显示机制"></a>TextView的字体显示机制</h4><p>先看一下TextView的构造方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TextView</span><span class="params">(Context context)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TextView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TextView</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TextView</span><span class="params">(</span></span></div><div class="line">            Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes);</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>AttributeSet：</strong>xml中设置的属性</li>
<li><strong>defStyleAttr：</strong>系统默认的属性</li>
<li><strong>defStyleRes：</strong>系统默认的样式，<strong>这个是我们需要注意的参数哈</strong></li>
</ul>
<p><strong>Textview的字体设置逻辑：</strong><br>1）查看xml中是否设置了TextAppearance属性，如果设置了就判断外观中是否设置了字体。否则就执行第二步。<br>2）查看xml中是否设置了Typeface属性，指明了字体。否则执行第三步<br>3）使用系统的默认样式：defStyleRes</p>
<blockquote>
<p>所以，假如我们的xml中对字体没有做设置，要是想要修改字体又不想修改xml，那么我们就要想其他办法了。<br>我最终的方案（方案一）是在APP的theme中去设置修改系统的默认样式（最终走到这个思路上是经过了比较酸爽的经过的，就不在这里细说了）。</p>
</blockquote>
<h3 id="方案一（底层方案）：通过反射机制，修改Typeface类的字体库引用"><a href="#方案一（底层方案）：通过反射机制，修改Typeface类的字体库引用" class="headerlink" title="方案一（底层方案）：通过反射机制，修改Typeface类的字体库引用"></a>方案一（底层方案）：通过反射机制，修改Typeface类的字体库引用</h3><p><strong>第一步：</strong>通过反射机制修改Typeface字体指向的字体库到我们的字体库。</p>
<ul>
<li><p>定义修改字体库的方法类（示例）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Typeface;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FontsUtils</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDefaultFont</span><span class="params">(Context context,</span></span></div><div class="line">      String staticTypefaceFieldName, String fontAssetName) &#123;</div><div class="line">      <span class="keyword">final</span> Typeface regular = Typeface.createFromAsset(context.getAssets(),</div><div class="line">  fontAssetName);</div><div class="line">      replaceFont(staticTypefaceFieldName, regular);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">replaceFont</span><span class="params">(String staticTypefaceFieldName,</span></span></div><div class="line">    <span class="keyword">final</span> Typeface newTypeface) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">final</span> Field staticField = Typeface.class</div><div class="line">        .getDeclaredField(staticTypefaceFieldName);</div><div class="line">        staticField.setAccessible(<span class="keyword">true</span>);</div><div class="line">        staticField.set(<span class="keyword">null</span>, newTypeface);</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在工程assets目录下新建fonts文件夹，把我们需要的字库放在里面，比如：FZLTHJW.TTF</p>
</li>
<li><p>在MyApplication.oncreate()中调用修改字体库：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FontsUtils.setDefaultFont(<span class="keyword">this</span>, <span class="string">"DEFAULT"</span>, <span class="string">"fonts/FZLTHJW.TTF"</span>);</div><div class="line">FontsUtils.setDefaultFont(<span class="keyword">this</span>, <span class="string">"MONOSPACE"</span>, <span class="string">"fonts/FZLTHJW.TTF"</span>);</div><div class="line">FontsUtils.setDefaultFont(<span class="keyword">this</span>, <span class="string">"SERIF"</span>, <span class="string">"fonts/FZLTHJW.TTF"</span>);</div><div class="line">FontsUtils.setDefaultFont(<span class="keyword">this</span>, <span class="string">"SANS_SERIF"</span>, <span class="string">"fonts/FZLTHJW.TTF"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>第二步：</strong>修改APP theme的默认属性。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;style name="AppTheme" parent="AppBaseTheme"&gt;</div><div class="line">	&lt;item name="android:textViewStyle"&gt;@style/FontTextviewstyle&lt;/item&gt;</div><div class="line">	&lt;item name="android:buttonStyle"&gt;@style/FontButtonstyle&lt;/item&gt;</div><div class="line">	&lt;item name="editTextStyle"&gt;@style/FontEditTextstyle&lt;/item&gt;</div><div class="line">	&lt;item name="android:radioButtonStyle"&gt;@style/FontradioButtonstyle&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line"> </div><div class="line">&lt;style name="FontTextviewstyle" parent="android:style/Widget.TextView"&gt;</div><div class="line">	&lt;item name="android:textAppearance"&gt;@style/FontTextAppearance&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;style name="FontButtonstyle" parent="android:style/Widget.Button"&gt;</div><div class="line">	&lt;item name="android:textAppearance"&gt;@style/FontTextAppearance&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;style name="FontradioButtonstyle" parent="android:style/Widget.CompoundButton.RadioButton"&gt;</div><div class="line">	&lt;item name="android:textAppearance"&gt;@style/FontTextAppearance&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;style name="FontEditTextstyle" parent="Widget.AppCompat.EditText"&gt;</div><div class="line">	&lt;item name="android:textAppearance"&gt;@style/FontTextAppearance&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;style name="FontTextAppearance" parent="@android:style/TextAppearance"&gt;</div><div class="line">        &lt;item name="android:typeface"&gt;monospace&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p><strong>总结：</strong></p>
<ul>
<li><strong>优点：</strong><ul>
<li>不用修改xml，没有为每个activity创建字体的实例。</li>
<li>除了常见的控件外，对Material Design的新控件也有作业</li>
</ul>
</li>
<li><strong>缺陷：</strong><ul>
<li>对于alertDialog还没有实现style的默认适配</li>
<li>因为是修改的底层逻辑，相较于方案二，稍复杂。</li>
</ul>
</li>
</ul>
<h3 id="方案二（顶层方案）：自定义布局加载器，在加载layout-xml时对view-tree的-view做字体的逻辑处理"><a href="#方案二（顶层方案）：自定义布局加载器，在加载layout-xml时对view-tree的-view做字体的逻辑处理" class="headerlink" title="方案二（顶层方案）：自定义布局加载器，在加载layout_xml时对view tree的 view做字体的逻辑处理"></a>方案二（顶层方案）：自定义布局加载器，在加载layout_xml时对view tree的 view做字体的逻辑处理</h3><ul>
<li><strong>使用：</strong>如下方代码所示，在oncreatview的回调中，对view做类型判断，设置view的字体。</li>
<li><strong>优点：</strong>该方案代码逻辑清晰，使用简单，几行代码就可以搞定问题，不用修改xml等。</li>
<li><strong>缺陷：</strong><ul>
<li>在一些第三方的控件或者自定义控件上可能使用会有限制，如果控件没有提供修改控件字体的接口的话（待验证）</li>
<li>需要注意的是，对于Material Design的<strong>android.support.design.widget.TextInputLayout</strong>，<strong>android.support.design.widget.TabLayout</strong>这样的控件不起作用，需要对这种类型设置*textAppearance这样的属性。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceFont</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> Typeface typeface = Typeface.createFromAsset(getAssets(), <span class="string">"fonts/fangzheng.ttf"</span>);</div><div class="line">		LayoutInflaterCompat.setFactory(LayoutInflater.from(<span class="keyword">this</span>), <span class="keyword">new</span> LayoutInflaterFactory() &#123;</div><div class="line">			   </div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(View parent, String name, Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				AppCompatDelegate delegate = getDelegate();</div><div class="line">				View view = delegate.createView(parent, name, context, attrs);</div><div class="line">				<span class="keyword">if</span>(view != <span class="keyword">null</span> )&#123;</div><div class="line">					<span class="keyword">if</span>(view <span class="keyword">instanceof</span> TextView)&#123;</div><div class="line">						((TextView)view).setTypeface(typeface);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(view <span class="keyword">instanceof</span> Button)&#123;</div><div class="line">						((Button)view).setTypeface(typeface);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(view <span class="keyword">instanceof</span> RadioButton)&#123;</div><div class="line">						((RadioButton)view).setTypeface(typeface);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> view;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line"><span class="comment">/**</span></div><div class="line">*  BaseActivity.java</div><div class="line">*/</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">	replaceFont();<span class="comment">//注意需要在super方法之前调用，否则会报异常</span></div><div class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><strong>总结：</strong></p>
<ul>
<li>通过这个方案，其实我们应该学习到一种<strong>统一对xml viewTree中某种控件设置某种属性的方法。</strong></li>
<li>举一反三，针对刚才上述的缺陷，我们其实也可以尝试设置textAppearance属性（相较于设置typeface麻烦些），感兴趣的同学可以去试验下。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;近期项目需要在我们的APP中使用指定的字体库。经过搜集资料，研读源码，和别人探讨请教，最终产出了一些比较好的方案。不敢专享，写成文章分享出来，希望对大家的实际开发工作有所帮助。喜欢探讨Android开发技术的同学可以加&lt;stro
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Typeface" scheme="http://yoursite.com/tags/Typeface/"/>
    
  </entry>
  
  <entry>
    <title>那些年,Android我们踩过的坑</title>
    <link href="http://yoursite.com/2016/09/11/%E9%82%A3%E4%BA%9B%E5%B9%B4%EF%BC%8CAndroid%E6%88%91%E4%BB%AC%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2016/09/11/那些年，Android我们踩过的坑/</id>
    <published>2016-09-11T07:13:29.000Z</published>
    <updated>2016-11-03T06:02:38.876Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>笔记贴，记录平时开发遇到的一些值得总结的bug。欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h2 id="ViewPager-fragment-生命周期"><a href="#ViewPager-fragment-生命周期" class="headerlink" title="ViewPager + fragment: 生命周期"></a>ViewPager + fragment: 生命周期</h2><p>当viewpger和fragment搭配使用时，一定会遇到过各种各样的问题。<br>诸如，二次进入界面，数据丢失了，界面空白等等。<br><strong>但凡viepager+fragment的种种问题，都可以从此种情况下fragment的生命周期得到解释和解决。</strong><br>因为预加载的缘故，当现实<strong>当前fragment</strong>时，<strong>下一页fragment</strong>已预加载好（resume状态）。<strong>上一页fragment</strong>(如果当前页不是第一页)也处于resumed状态。<br><strong>简单粗暴点说，viewpager同时有三个页处于onresume状态，其中中间那个页处于可见状态。</strong><br>以现实页为中心的三页(三剑客)作为一个整体，这个整体的上一页和下一页都处于ondestroyview状态（之前已经加载过）。<br>“三剑客”的前一个或者下一个再次显示的时候，需要经oncreatview启动显示。所以，如果在oncreatview和ondestroyview中的UI和数据处理不合理，就会导致各种内存浪费，数据空指针等问题。</p>
<p>我建议：<br><strong>在onAttach方法中来初始化context、adapter等</strong>，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">	mContext = context;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">null</span> == mAdapter)&#123;</div><div class="line">		mAdapter = <span class="keyword">new</span> HomePageListAdapter(mContext, data);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">super</span>.onAttach(context);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>在onDetach方法中来释放非view类资源</strong>，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetach</span><span class="params">()</span> </span>&#123;</div><div class="line">	mContext = <span class="keyword">null</span>;</div><div class="line">	jump2activity = <span class="keyword">null</span>;</div><div class="line">	mAdapter = <span class="keyword">null</span>;</div><div class="line">	data = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">super</span>.onDetach();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>在onCreateView方法中来初始化view类资源</strong>，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		View view = inflater.inflate(R.layout.fragment_xxxx, container,<span class="keyword">false</span>);</div><div class="line">		lv_orders = (ListView)view.findViewById(R.id.lv_orders);</div><div class="line">		lv_orders.setAdapter(mAdapter);</div><div class="line">		<span class="keyword">return</span> view;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p><strong>在onCreateView方法中来初释放view类资源</strong>，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</div><div class="line">	lv_orders = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">super</span>.onDestroyView();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Activity-fragment-二次进入fragment-某个button点击效果没有了"><a href="#Activity-fragment-二次进入fragment-某个button点击效果没有了" class="headerlink" title="Activity + fragment: 二次进入fragment 某个button点击效果没有了"></a>Activity + fragment: 二次进入fragment 某个button点击效果没有了</h2><p><strong>Q: 通过replace方法，切换fragment，后来发现某个button的点击效果没有了。</strong><br><strong>A: </strong>通过private OnClickListener mListener  = new OnClickListener{…}方式声明的对象在第二次进入fragment的时候成为了null。<br>没有搞懂为啥，但是先把解决办法记录下来吧，很傻的方案：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> OnClickListener mListener  = <span class="keyword">null</span>;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container,</span></span></div><div class="line">		@Nullable Bundle savedInstanceState) &#123;</div><div class="line">	<span class="keyword">super</span>.onCreateView(inflater, container, savedInstanceState);</div><div class="line">	......</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">null</span> == mListener)&#123;</div><div class="line">		mListener = <span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">				<span class="comment">//TODO</span></div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> view;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="TabLayout-ViewPager-fragment"><a href="#TabLayout-ViewPager-fragment" class="headerlink" title="TabLayout+ViewPager + fragment:"></a>TabLayout+ViewPager + fragment:</h2><p>滑动page的时候不要将fragment 干掉，否则会存在异步刷新界面出现问题。<br>因为将fragment干掉后，再次创建fragment后，从视图上看不出区别来，但是fragment的对象已经变了，此时如果存在异步刷新界面的情况，就会存在问题。<br>正确的办法是，判断fragment是否存在，如果存在的话，就想办法让界面单纯的刷新数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在界面的回调中需要刷新viewpager的数据时</span></div><div class="line"><span class="comment">//判断界面fragment已经初始化</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">null</span> == mViewPager.getAdapter())&#123;</div><div class="line">	setupViewPager(mViewPager);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//通过广播通知fragment去刷新界面（fragment中注册reciver）</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(CFTGlobal.HOME_UPDATE_MESSAGE_ACTION);</div><div class="line">sendBroadcast(intent);</div></pre></td></tr></table></figure></p>
<h2 id="H5与Android，IOS的JS交互"><a href="#H5与Android，IOS的JS交互" class="headerlink" title="H5与Android，IOS的JS交互"></a>H5与Android，IOS的JS交互</h2><p><strong>1，定义接口</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidJsInterface</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AndroidJsInterface</span><span class="params">(Context activity)</span> </span>&#123;</div><div class="line">		mContext = activity;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@JavascriptInterface</span><span class="comment">//系统sdk 版本在v4.2以上时，必须加这个注解（安全性）</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//点击H5的某个区域，实现APP的跳转（退出WebpageActivity）</span></div><div class="line">		Intent intent = <span class="keyword">new</span> Intent(mContext, MainActivity.class);</div><div class="line">		mContext.startActivity(intent);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2，activity处理</strong></p>
<ul>
<li><strong>方式一：向webview注册js接口–存在安全隐患（适用于Android，IOS是否适用待确认）</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Android端主要代码</span></div><div class="line">WebSettings webSettings = mWebView.getSettings();</div><div class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">mWebView.addJavascriptInterface(<span class="keyword">new</span> AndroidJsInterface(context), <span class="string">"android"</span>);<span class="comment">//注意：这里一定要让别名的首字母为小写，因为JS端实际调用中会将别名处理成小写。</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//JS端主要代码</span></div><div class="line">jsFun = <span class="keyword">new</span> function()&#123;</div><div class="line">  <span class="keyword">if</span>(app.isIOS())&#123;</div><div class="line">    ......</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(app.isAndroid())&#123;</div><div class="line">    android.fun1();<span class="comment">//别名首字母默认会被处理成小写，所以为了避免调用出错，最好统一采用小写字母</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Html端主要代码</span></div><div class="line">......(通过href或者onclick调用js的jsFun)</div></pre></td></tr></table></figure>
<ul>
<li><strong>方式二：h5重定向URL，移动端捕获（Android，IOS均可）</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Android端主要代码</span></div><div class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (url.length() != <span class="number">0</span> &amp;&amp; url.startsWith(<span class="string">"app:"</span>)) &#123;<span class="comment">//和后台约定好移动端js交互接口重定向URL的前缀：例如“app:”</span></div><div class="line">            <span class="comment">// 获得方法名</span></div><div class="line">            String methodName = url.substring(<span class="string">"app:"</span>.length());</div><div class="line">            <span class="comment">// 通过方法名反射获得方法</span></div><div class="line">            Method method;</div><div class="line">            Class&lt;?&gt; c;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                c = Class.forName(<span class="string">"com.base.web.AndroidJsInterface"</span>);</div><div class="line">                Constructor&lt;?&gt;[] constructors = c.getDeclaredConstructors();</div><div class="line">                Constructor&lt;?&gt; constructor = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; constructors.length; i++) &#123;</div><div class="line">                    constructor = constructors[i];</div><div class="line">                    <span class="keyword">if</span> (constructor.getGenericParameterTypes().length == <span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                constructor.setAccessible(<span class="keyword">true</span>);</div><div class="line">                Object clazz = constructor.newInstance(context);</div><div class="line"></div><div class="line">                method = clazz.getClass().getDeclaredMethod(methodName);</div><div class="line">                <span class="comment">// 执行该方法</span></div><div class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> != method)&#123;</div><div class="line">                    method.setAccessible(<span class="keyword">true</span>);</div><div class="line">                    method.invoke(clazz);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(url.length() != <span class="number">0</span> &amp;&amp; url.startsWith(<span class="string">"tel:"</span>))&#123;</div><div class="line">        	<span class="comment">//打电话：H5直接重定向href=“tel:13120003456”</span></div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_DIAL,</div><div class="line">            Uri.parse(url));</div><div class="line">            startActivity(intent);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">        	view.loadUrl(url);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//JS端主要代码</span></div><div class="line">jsFun1 = <span class="keyword">new</span> function()&#123;</div><div class="line">  window.location.href=<span class="string">"app:fun1"</span>;<span class="comment">//"app:"是和服务器约定好的前缀，fun1是移动端定义的名为fun1的js回调接口</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">jsFun2 = <span class="keyword">new</span> function()&#123;</div><div class="line">  window.location.href=<span class="string">"app:fun2"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Html端主要代码</span></div><div class="line">......(通过href或者onclick调用js的jsFun*)</div></pre></td></tr></table></figure>
<p><strong>需要注意的几点：</strong><br>1，采用方式一，一定要注意别名的首字母小写（是不是需要全部小写没有验证）<br>2，小米系列的手机可能对webview和Android的交互存在一些问题，如果发现交互怎么都不起作用，试试把APP卸载后重新安装（有缓存）。<br>3，使用方式二，一定要注意使用反射时，要调用反射类的构造函数实例化，否则会报告一堆的异常。</p>
<h2 id="Activity-finish-与onDestroy"><a href="#Activity-finish-与onDestroy" class="headerlink" title="Activity: finish()与onDestroy()"></a>Activity: finish()与onDestroy()</h2><p>activity调用finish()方法，可以关闭自己，在finish方法中国默认会调用onDestroy()方法。所以不要在finish中做清除view等操作，这样会导致activity退出的时候出现闪现空白界面的假象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ViewGroup view = (ViewGroup) getWindow().getDecorView();</div><div class="line">view.removeAllViews();</div></pre></td></tr></table></figure></p>
<p>这段代码不要放在finish中。</p>
<blockquote>
<p>笔记贴，持续更新记录……</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;笔记贴，记录平时开发遇到的一些值得总结的bug。欢迎加入&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版权归作者所有，如有转发，请注明文章出处：&lt;a h
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Debugging" scheme="http://yoursite.com/tags/Debugging/"/>
    
  </entry>
  
  <entry>
    <title>跟着源码学设计：Glide框架及源码解析（五）</title>
    <link href="http://yoursite.com/2016/09/11/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://yoursite.com/2016/09/11/跟着源码学设计：Glide框架及源码解析（五）/</id>
    <published>2016-09-11T06:32:09.000Z</published>
    <updated>2016-10-30T04:42:47.637Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。<strong>学习小组QQ群: 193765960</strong>。</p>
<p>本篇是Glide框架及源码解析的第五篇，主要是总结记录Glide的一些使用技巧（会持续更新）。如果这篇文章对大家学习Glide有帮助，还望大家多多转载。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<p><strong>往期文章：</strong></p>
<p><a href="https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">跟着源码学设计：Glide框架及源码解析（一）</a><br><a href="https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="external">跟着源码学设计：Glide框架及源码解析（二）</a><br><a href="https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/" target="_blank" rel="external">跟着源码学设计：Glide框架及源码解析（三）</a><br><a href="https://xiaodanchen.github.io/2016/08/23/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E5%9B%9B%EF%BC%89/" target="_blank" rel="external">跟着源码学设计：Glide框架及源码解析（四）</a></p>
<h3 id="显示拍照或者相册中的照片：Uri"><a href="#显示拍照或者相册中的照片：Uri" class="headerlink" title="显示拍照或者相册中的照片：Uri"></a>显示拍照或者相册中的照片：Uri</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Glide.with(<span class="keyword">this</span>).load(uri).into(im_car_pic);</div></pre></td></tr></table></figure>
<h3 id="将资源转换成base64数据"><a href="#将资源转换成base64数据" class="headerlink" title="将资源转换成base64数据"></a>将资源转换成base64数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.util.Base64;</div><div class="line">......</div><div class="line">Glide.with(<span class="keyword">this</span>).load(datastr).asBitmap().toBytes().into(<span class="keyword">new</span> SimpleTarget&lt;<span class="keyword">byte</span>[]&gt;(<span class="number">320</span>,<span class="number">150</span>) &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(<span class="keyword">byte</span>[] bytes, GlideAnimation&lt;? <span class="keyword">super</span> <span class="keyword">byte</span>[]&gt; arg1)</span> </span>&#123;</div><div class="line">    String base64Data = Base64.encodeToString(bytes, Base64.DEFAULT);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Glide动态加载本地base64或者服务器URL"><a href="#Glide动态加载本地base64或者服务器URL" class="headerlink" title="Glide动态加载本地base64或者服务器URL"></a>Glide动态加载本地base64或者服务器URL</h3><p>在设置图片时，我们往往需要将本地图片转换成base64上传服务器，服务器再将base64解析成图片，将服务器中图片的URL返回给移动端。<br>这时候要考虑异步显示：假如本地只保存了base64数据（服务器尚未返回或者断网状态下），我们要求存储的图片资源也要能够显示。<br>基本的思路有两种，根据实际的需求来选择。</p>
<ul>
<li>1，将选取的图片保存成本地的图片（文件），数据库中保存的是本地的路径，根据本地路径显示</li>
<li>2，数据库中保存的就是base64数据，根据base64显示</li>
</ul>
<p>第一种很好实现，在此处不再记录。<br>第二种方案如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!TextUtils.isEmpty(car.getCarpic()))&#123;</div><div class="line">	<span class="comment">//carpic存放的是否是URL资源</span></div><div class="line">    <span class="keyword">if</span>(car.getCarpic().startsWith(<span class="string">"http"</span>))&#123;</div><div class="line">    	Glide.with(<span class="keyword">this</span>).load(car.getCarpic()).into(im_car_pic);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">    	<span class="comment">//当存放的是base64数据时</span></div><div class="line">        Glide.with(<span class="keyword">this</span>).load(Base64.decode(car.getCarpic(), Base64.DEFAULT)).into(im_car_pic);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Gson-数据转换成json字符串时，默认会对一些特殊字符进行转义"><a href="#Gson-数据转换成json字符串时，默认会对一些特殊字符进行转义" class="headerlink" title="Gson 数据转换成json字符串时，默认会对一些特殊字符进行转义"></a>Gson 数据转换成json字符串时，默认会对一些特殊字符进行转义</h3><p>这种情况下，如果服务器存在对Json数据的验证就会导致服务器端进行签名验证不会通过。<br>比如图片的base64数据，其末尾=\n处的=会被转义为\u003d，这时候如果对数据进行签名验证就会失败。<br>具体的字符串转义情况大致如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">REPLACEMENT_CHARS[<span class="string">'"'</span>] = <span class="string">"\\\""</span>;  </div><div class="line">REPLACEMENT_CHARS[<span class="string">'\\'</span>] = <span class="string">"\\\\"</span>;  </div><div class="line">REPLACEMENT_CHARS[<span class="string">'\t'</span>] = <span class="string">"\\t"</span>;  </div><div class="line">REPLACEMENT_CHARS[<span class="string">'\b'</span>] = <span class="string">"\\b"</span>;  </div><div class="line">REPLACEMENT_CHARS[<span class="string">'\n'</span>] = <span class="string">"\\n"</span>;  </div><div class="line">REPLACEMENT_CHARS[<span class="string">'\r'</span>] = <span class="string">"\\r"</span>;  </div><div class="line">REPLACEMENT_CHARS[<span class="string">'\f'</span>] = <span class="string">"\\f"</span>;  </div><div class="line">HTML_SAFE_REPLACEMENT_CHARS = REPLACEMENT_CHARS.clone();  </div><div class="line">HTML_SAFE_REPLACEMENT_CHARS[<span class="string">'&lt;'</span>] = <span class="string">"\\u003c"</span>;  </div><div class="line">HTML_SAFE_REPLACEMENT_CHARS[<span class="string">'&gt;'</span>] = <span class="string">"\\u003e"</span>;  </div><div class="line">HTML_SAFE_REPLACEMENT_CHARS[<span class="string">'&amp;'</span>] = <span class="string">"\\u0026"</span>;  </div><div class="line">HTML_SAFE_REPLACEMENT_CHARS[<span class="string">'='</span>] = <span class="string">"\\u003d"</span>;  </div><div class="line">HTML_SAFE_REPLACEMENT_CHARS[<span class="string">'\''</span>] = <span class="string">"\\u0027"</span>;</div></pre></td></tr></table></figure></p>
<p>解决这个问题的方法是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder().disableHtmlEscaping().create();</div></pre></td></tr></table></figure></p>
<h3 id="Glide加载图片慢？"><a href="#Glide加载图片慢？" class="headerlink" title="Glide加载图片慢？"></a>Glide加载图片慢？</h3><p>取消默认的加载动画<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Glide.with(<span class="keyword">this</span>).load(vcar.getCarpic()).dontAnimate().into(im_car_pic);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>更多用法，持续更新中……</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本篇是Glid
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Glide" scheme="http://yoursite.com/tags/Glide/"/>
    
  </entry>
  
  <entry>
    <title>使用MVP-Retrofit-Rxjava搭建工程实战</title>
    <link href="http://yoursite.com/2016/09/04/%E4%BD%BF%E7%94%A8MVP-Retrofit-Rxjava%E6%90%AD%E5%BB%BA%E5%B7%A5%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2016/09/04/使用MVP-Retrofit-Rxjava搭建工程实战/</id>
    <published>2016-09-04T00:29:52.000Z</published>
    <updated>2016-10-30T04:41:10.865Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>最近使用MVP+Retrofit+Rxjava搭建了新项目的工程框架和网络请求回调框架。在网上也查看了一些资料，但是没有找到很贴合实际项目各自不同的请求及响应报文协议的解决方案。无奈，自己苦逼的一番摸索踩坑，终于搭建出了一个基本还算满意的解决方案，在这里和大家分享一下，希望能够帮助开发工程师们省去一些苦恼。<br>随着深入地开发，这个方案肯定还会陆续暴露出一些坑，我会一直维护这篇文章，将对应的坑和解决办法记录下来。决定使用我这个工程框架的同学还希望能够加<strong>学习小组QQ群</strong>: 193765960，将实际开发中遇到的坑在群中进行讨论和分享。<br>如果这篇文章对大家实际开发有所帮助，还望大家多多转发。</p>
<p>在阅读这篇文章之前要求读者对MVP，retrofit，rxjava，Gson具有一定的了解。<br>我在这里帮大家整理了一些比较好的文章，需要的同学自行查看。<br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0303/4029.html" target="_blank" rel="external">《Retrofit使用教程(一)》</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0323/4074.html" target="_blank" rel="external">《Retrofit使用教程(二)》</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/2016/0325/4082.html" target="_blank" rel="external">《Retrofit使用教程(三) : Retrofit与RxJava初相逢》</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0518/4270.html" target="_blank" rel="external">《你真的会用Retrofit2吗?Retrofit2完全教程》</a><br><a href="http://www.jianshu.com/p/e740196225a4" target="_blank" rel="external">《你真的会用Gson吗?Gson使用指南》</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1012/3572.html" target="_blank" rel="external">《给 Android 开发者的 RxJava 详解》</a></p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/" target="_blank" rel="external">https://xiaodanchen.github.io/</a> </p>
</blockquote>
<h3 id="MVP部分"><a href="#MVP部分" class="headerlink" title="MVP部分"></a>MVP部分</h3><p>本篇不讲解什么是MVP，不懂MVP的童鞋请自行百度。</p>
<h4 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h4><p><strong>BasePresenter.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePresenter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * View的引用，使用弱引用，当弱引用所引用的对象被销毁，软引用也会被释放</div><div class="line">	 */</div><div class="line">	<span class="keyword">protected</span> WeakReference&lt;T&gt; mViewRef;</div><div class="line">		 </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Presenter与View关联</div><div class="line">	 * <span class="doctag">@param</span> view</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachView</span><span class="params">(T view)</span></span>&#123;</div><div class="line">		mViewRef = <span class="keyword">new</span> WeakReference&lt;T&gt;(view);</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Presenter与View解除关联</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detacheView</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(mViewRef != <span class="keyword">null</span>)&#123;</div><div class="line">			mViewRef.clear();</div><div class="line">			mViewRef = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="function"><span class="keyword">protected</span> T <span class="title">getView</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(mViewRef != <span class="keyword">null</span>)&#123;</div><div class="line">			<span class="keyword">return</span> mViewRef.get();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Presenter与View是否已关联</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewAttached</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> mViewRef != <span class="keyword">null</span> &amp;&amp; mViewRef.get() != <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>.<br><strong>BaseActivity.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> &lt;V&gt; 子activity的view接口</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt; 子activity关联的presenter： T extends BasePresenter&lt;V&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span>&lt;<span class="title">V</span>, <span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">V</span>&gt;&gt;  <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">protected</span> T mPresenter;</div><div class="line">	......</div><div class="line">	 </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"> </div><div class="line">		<span class="comment">//初始化Presenter</span></div><div class="line">		mPresenter = createPresenter();</div><div class="line">		<span class="comment">//presenter与View绑定</span></div><div class="line">		<span class="keyword">if</span>(<span class="keyword">null</span> != mPresenter)&#123;</div><div class="line">			mPresenter.attachView((V)<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">		......</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建presenter</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">createPresenter</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">//presenter与activity解绑定</span></div><div class="line">		<span class="keyword">if</span>(<span class="keyword">null</span> != mPresenter)&#123;</div><div class="line">			mPresenter.detacheView();</div><div class="line">			mPresenter = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		......</div><div class="line">		<span class="keyword">super</span>.onDestroy();</div><div class="line">	&#125;</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上是我编写的两个基类，非本文重点，实际开发中大家也可以自己开发自己的基类。下面我将以登录界面做为业务类的demo讲解。由于项目原因，我会隐去部分细节，请谅解。</p>
<h4 id="业务类：登录"><a href="#业务类：登录" class="headerlink" title="业务类：登录"></a>业务类：登录</h4><p>在我的login业务文件夹下，我将要完成三个类的编写：LoginContract.java, LoginPresenter.java, LoginActivity.java<br><strong>LoginContract.java</strong><br>契约类，将约束定义MVP中V，P的接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginContract</span> </span>&#123;</div><div class="line"> </div><div class="line"> 	<span class="comment">//IBaseView定义了一些View的公共方法，根据实际需要可自行定义。</span></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line">    	<span class="comment">//User：Model bean</span></div><div class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">loginSucceed</span><span class="params">(User user)</span></span>;</div><div class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">loginFailed</span><span class="params">(String errMessage)</span></span>;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span></span>&#123;</div><div class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(String name, String pwd)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>LoginPresenter.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginPresenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">LoginContract</span>.<span class="title">View</span>&gt; <span class="keyword">implements</span> <span class="title">LoginContract</span>.<span class="title">Presenter</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LoginPresenter</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String name, String pwd)</span> </span>&#123;</div><div class="line">		<span class="comment">//因为login的业务逻辑比较简单，我就不再专门去定义Model的接口了</span></div><div class="line">		 </div><div class="line">		<span class="comment">//登录请求及回调（后面细讲）</span></div><div class="line">		......</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>LoginActivity.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">LoginContract</span>.<span class="title">View</span>,<span class="title">LoginPresenter</span>&gt; </span></div><div class="line"><span class="keyword">implements</span> <span class="title">LoginContract</span>.<span class="title">View</span>&#123;</div><div class="line">	 </div><div class="line">	<span class="keyword">private</span> EditText Edt_name;</div><div class="line">	<span class="keyword">private</span> EditText Edt_pwd;</div><div class="line">	 </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_login);</div><div class="line">		initData();</div><div class="line">		initView();</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line"> </div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">		Edt_name = (EditText) findViewById(R.id.edt_name);</div><div class="line">		Edt_pwd = (EditText) findViewById(R.id.edt_pwd);</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> LoginPresenter <span class="title">createPresenter</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> LoginPresenter();</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLogin</span><span class="params">(View v)</span></span>&#123;</div><div class="line">		<span class="comment">//由于是Demo,所以逻辑上不会那么严格，主要讲清楚关键点，各种null检查啥的自己搞</span></div><div class="line">		mPresenter.login(Edt_name.getText().toString(),Edt_pwd.getText().toString());</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginSucceed</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">		BaseFun.makeToast(getApplicationContext(), <span class="string">"登录成功！"</span>+user.getNickName());</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginFailed</span><span class="params">(String errMessage)</span> </span>&#123;</div><div class="line">		BaseFun.makeToast(getApplicationContext(), errMessage);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了，一个基本的MVP框架算是有了，Model的部分根据实际的业务可以灵活的去定义接口或业务类。</p>
<h3 id="网络通讯部分"><a href="#网络通讯部分" class="headerlink" title="网络通讯部分"></a>网络通讯部分</h3><blockquote>
<p>网络框架采用的是retrofit+okhttp+gson+rxjava来进行搭建。在搭建的过程中，请注意各个库之间的版本问题，这个比较让人蛋疼。使用eclipse开发的读者也可以加<strong>学习小组QQ群: 193765960</strong>去下载我提供的jar包。</p>
</blockquote>
<p><strong>构建获取Retrofit对象</strong><br>我封装了一个工具类RetrofitUtils.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Retrofit工具类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetrofitUtils</span> </span>&#123;</div><div class="line">	 </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取retrofit对象</div><div class="line">	 * </div><div class="line">	 * retrofit对象默认使用我们自己的URL：DatasConfig.HOST</div><div class="line">	 * 如果想要指定具体的url,请调用build(baseUrl)方法</div><div class="line">	 * 设置了Rxjava的请求回调机制</div><div class="line">	 * 设置了Gson：json-Java bean的自动解析（序列化和反序列化）</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Retrofit <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">		Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">				.baseUrl(DatasConfig.HOST)</div><div class="line">				.addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">				.addConverterFactory(GsonConverterFactory.create())</div><div class="line">				.client(RetrofitUtils.genericClient())</div><div class="line">				.build();</div><div class="line">		<span class="keyword">return</span> retrofit;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取retrofit对象</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> baseUrl </div><div class="line">	 * </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Retrofit <span class="title">build</span><span class="params">(String baseUrl)</span> </span>&#123;</div><div class="line">		Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(baseUrl)</div><div class="line">				.addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">				.addConverterFactory(GsonConverterFactory.create()).client(RetrofitUtils.genericClient())<span class="comment">// 添加自定义的头信息</span></div><div class="line">				.build();</div><div class="line">		<span class="keyword">return</span> retrofit;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 定制client</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OkHttpClient <span class="title">genericClient</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//日志打印：添加打印对我们开发非常重要哈，这个东西一定要有</span></div><div class="line">		HttpLoggingInterceptor logging = <span class="keyword">new</span> HttpLoggingInterceptor();</div><div class="line">		logging.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class="line">		</div><div class="line">		<span class="comment">//设置HTTP请求通用的协议头 </span></div><div class="line">		Interceptor proheaders = <span class="keyword">new</span> Interceptor() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">				Request request = chain.request().newBuilder()</div><div class="line">						.addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span>)</div><div class="line">						.addHeader(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip, deflate"</span>)</div><div class="line">						.addHeader(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>)</div><div class="line">						.addHeader(<span class="string">"Accept"</span>,<span class="string">"*/*"</span>)</div><div class="line">						.addHeader(<span class="string">"Cookie"</span>, <span class="string">"add cookies here"</span>)</div><div class="line">						.build();</div><div class="line">				</div><div class="line">				<span class="keyword">return</span> chain.proceed(request);</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		 </div><div class="line">		<span class="comment">//设置OkHttpClient</span></div><div class="line">		OkHttpClient httpClient = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">				.addInterceptor(logging)<span class="comment">//添加日志打印功能</span></div><div class="line">				.addInterceptor(proheaders)<span class="comment">//自定义http headers设置</span></div><div class="line">				.readTimeout(<span class="number">60</span>, TimeUnit.SECONDS)<span class="comment">//设置超时</span></div><div class="line">				.connectTimeout(<span class="number">60</span>, TimeUnit.SECONDS)</div><div class="line">				.build();</div><div class="line"> </div><div class="line">		<span class="keyword">return</span> httpClient;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如代码，在开发中一定要加入日志<strong>logging功能</strong>，注意jar包的版本问题，你要是实在搞不定，就去加我的那个QQ群获取jar包吧。</p>
<p><strong>定义登录业务的retrofit服务接口: LoginService.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginService</span></span>&#123;</div><div class="line">	 </div><div class="line">	<span class="comment">//使用retrofit的回调，返回的是User对象</span></div><div class="line">	<span class="meta">@POST</span>(DatasConfig.CMD_USER_LOGINYP)</div><div class="line">	Call&lt;BUResponse&lt;User&gt;&gt; login(<span class="meta">@Body</span> BURequset requset);</div><div class="line">	 </div><div class="line">	<span class="comment">//使用Rxjava的回调，返回的是User对象</span></div><div class="line">	<span class="meta">@POST</span>(DatasConfig.CMD_USER_LOGINYP)</div><div class="line">	Observable&lt;BUResponse&lt;User&gt;&gt; Rxlogin(<span class="meta">@Body</span> BURequset requset);</div><div class="line">	 </div><div class="line">	<span class="comment">//使用Rxjava的回调，但是返回的是原始的响应体数据</span></div><div class="line">	<span class="meta">@POST</span>(DatasConfig.CMD_USER_LOGINYP)</div><div class="line">	<span class="function">Observable&lt;ResponseBody&gt; <span class="title">RxJsonlogin</span><span class="params">(@Body BURequset requset)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我在上面给大家实例了三种写法。</p>
<ul>
<li>第一种不使用rxjava，返回的是Gson将响应报文反序列化后的User bean对象。</li>
<li>第二种使用rxjava，返回的是Gson将响应报文反序列化后的User bean对象。</li>
<li>第三种rxjava，返回的是okhttp的原始响应体ResponseBody，这样我们就可以获取原始的jsonString来自行解析。</li>
</ul>
<p>以上都不是重点，从网上都可以找到很多文章。我要说的<strong>重点是</strong>我们可能需要根据实际的请求和响应的报文协议来<strong>自定义BUResponse和BURequset</strong>这两个类。这一块在网上实在是没有很多讲到这一块的文章，搞不懂这一块，整个的请求和响应流程就无法打通，估计开发者会哭死。</p>
<p>先来看一下示例的请求和响应的协议：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    “head”:&#123;”timestamp”:<span class="number">123456</span>,&#125;,</div><div class="line">    “body”:&#123;“name”:”abcd”,”pwd”:”<span class="number">123456</span>”&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>BURequset.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BURequset</span> </span>&#123;</div><div class="line"> </div><div class="line"> 	<span class="comment">//最重点的就是这里:为啥采用TreeMap来声明head和body?</span></div><div class="line">	<span class="keyword">private</span> TreeMap&lt;String, Object&gt; head;</div><div class="line">	<span class="keyword">private</span> TreeMap&lt;String, Object&gt; body;<span class="comment">//排序</span></div><div class="line">	 </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BURequset</span><span class="params">()</span> </span></div><div class="line">	&#123;</div><div class="line">		head = DemoApplication.reqHead;<span class="comment">//因为是统一的请求头，所以只定义一个就好了</span></div><div class="line">		body = <span class="keyword">new</span> TreeMap&lt;String, Object&gt;();</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="function"><span class="keyword">public</span> TreeMap&lt;String, Object&gt; <span class="title">getHead</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> head;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(TreeMap&lt;String, Object&gt; head)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.head = head;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> TreeMap&lt;String, Object&gt; <span class="title">getBody</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> body;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBody</span><span class="params">(TreeMap&lt;String, Object&gt; body)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.body = body;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如代码所示，为啥要用TreeMap?<br>其实我最开始的时候设计这个类，使用的是JsonObject，但是通过查看log发现，请求报文的jsonString多了一层name_value_pairs的封装。啥意思？即我们希望的json结构是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"xxxx"</span>:<span class="string">"zzzzzzz"</span>,</div><div class="line">    <span class="string">"yyyy"</span>:<span class="string">"uuuuuuu"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而实际生成的却是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"name_value_pairs"</span>: &#123;</div><div class="line">                        <span class="string">"xxxx"</span>:<span class="string">"zzzzzzz"</span>,</div><div class="line">                        <span class="string">"yyyy"</span>:<span class="string">"uuuuuuu"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为啥会这样呢？原来是因为JsonObject的结构是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONObject</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; nameValuePairs;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而retrofit采用<strong>Gson</strong>做json的序列化时，会将JSONObject的<strong>nameValuePairs</strong>封装进序列化结果中。<br>那咋办？我后来<strong>采用了Map来封装我的head，body。</strong>最终得到了我想要的结果，自己也暗自得意。<br>可是，后来<strong>为啥要改成TreeMap呢？</strong>因为我在请我们公司的技术大牛帮我审查这套框架的时候，大牛给指了出来很多的坑。其中一个便是不能用Map,因为Map中的键值对是按照添加顺序排序的，而JsonObject是按照key的升序排序的，而我们常常会用报文来参与生成我们的校验sign。如果用Map的话，我同样的两个参数，put的顺序不同，得到的sign也不同，这显然是不对的。所以，最后<strong>采用了TreeMap来封装head和body，因为TreeMap是默认升序排序的。</strong><br>大家如果要自己封装自己的请求和响应类的时候，一定要注意这个问题。</p>
<p><strong>BUResponse.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BUResponse</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	 </div><div class="line">	<span class="keyword">private</span> ResHead head;</div><div class="line">	<span class="keyword">private</span> T body;<span class="comment">//使用泛型来应对我们各种类型的响应</span></div><div class="line">	 </div><div class="line">	<span class="function"><span class="keyword">public</span> ResHead <span class="title">getHead</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> head;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(ResHead head)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.head = head;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getBody</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> body;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBody</span><span class="params">(T body)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.body = body;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ResHead</span></span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">long</span> timestamp;</div><div class="line">		 </div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimestamp</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> timestamp;</div><div class="line">		&#125;</div><div class="line">		 </div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimestamp</span><span class="params">(<span class="keyword">long</span> timestamp)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.timestamp = timestamp;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>response采用泛型来设计实现通用（响应的结构都一样，特殊的响应结构就再单独处理吧）。</p>
<p><strong>业务的调用和回调</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginPresenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">LoginContract</span>.<span class="title">View</span>&gt; <span class="keyword">implements</span> <span class="title">LoginContract</span>.<span class="title">Presenter</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LoginPresenter</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String name, String pwd)</span> </span>&#123;</div><div class="line">		<span class="comment">//因为login的业务逻辑比较简单，我就不再专门去定义Model的接口了</span></div><div class="line">		<span class="comment">//构建请求</span></div><div class="line">		BURequset request = <span class="keyword">new</span> BURequset();</div><div class="line">		request.getBody().put(<span class="string">"pwd"</span>, pwd);</div><div class="line">		request.getBody().put(<span class="string">"name"</span>, name);</div><div class="line">		 </div><div class="line">		<span class="comment">//获取接口服务</span></div><div class="line">		LoginService service = RetrofitUtils.build().create(LoginService.class);</div><div class="line">		<span class="comment">//第二种方法：使用RxJava的调用</span></div><div class="line">		service.Rxlogin(request)</div><div class="line">				.subscribeOn(Schedulers.newThread()) <span class="comment">// 子线程访问网络</span></div><div class="line">				.observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 回调到主线程</span></div><div class="line">				.subscribe(<span class="keyword">new</span> Observer&lt;BUResponse&lt;User&gt;&gt;() &#123;</div><div class="line">					<span class="meta">@Override</span></div><div class="line">					<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">						<span class="comment">// 所有任务执行完毕</span></div><div class="line">					&#125;</div><div class="line"> </div><div class="line">					<span class="meta">@Override</span></div><div class="line">					<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">						getView().loginFailed(e.toString());</div><div class="line">					&#125;</div><div class="line"> </div><div class="line">					<span class="meta">@Override</span></div><div class="line">					<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(BUResponse&lt;User&gt; result)</span> </span>&#123;</div><div class="line">						<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">							ResHead head = result.getHead();</div><div class="line">							User user = result.getBody();</div><div class="line">							getView().loginSucceed(user);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="需要注意的一些问题"><a href="#需要注意的一些问题" class="headerlink" title="需要注意的一些问题"></a>需要注意的一些问题</h3><h4 id="Gson的基本使用"><a href="#Gson的基本使用" class="headerlink" title="Gson的基本使用"></a>Gson的基本使用</h4><p>Gson实现Java Bean和JsonString之间的相互转化。但是现实往往是：</p>
<ul>
<li>java bean 和jsonString不是完全匹配的，换句话说，我们的java bean中有很多的属性是额外的。</li>
<li>java bean的命名和报文的key是不匹配的，尤其是java bean在多个地方复用的时候。</li>
</ul>
<p>不用担心，这些Gson都替你考虑到了，具体的请去参考<a href="http://www.jianshu.com/p/e740196225a4" target="_blank" rel="external">《你真的会用Gson吗?Gson使用指南》</a><br><strong>需要注意的坑</strong>：</p>
<ul>
<li>retrofit中使用gosn做java bean和json报文的转化时，入参和出参（请求和响应）中如果涉及同一类java bean对象，则要保持字段名的一致，java bean的属性名要和入参中的一致。</li>
</ul>
<p>注意：<br>这篇文章中所用到的代码项目原因可能具有版权问题，大家是在实际开发中还是以参考借鉴为主吧。最后，如果这篇文章对大家有帮助，还是希望多多转发，让更多的朋友能够参与进这个框架的讨论中来，彼此受益。</p>
<h4 id="利用Gson将List的jsonString-转为list对象"><a href="#利用Gson将List的jsonString-转为list对象" class="headerlink" title="利用Gson将List的jsonString 转为list对象"></a>利用Gson将List的jsonString 转为list对象</h4><p>  错误做法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String jsonString = PrefUtils.getString(mContext,key, <span class="string">""</span>);</div><div class="line"><span class="keyword">if</span>(!<span class="string">""</span>.equals(jsonString))&#123;</div><div class="line">  Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">  List&lt;Bean&gt; vTypes = gson.fromJson(jsonString, List.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  正确做法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String jsonString = PrefUtils.getString(mContext,key, <span class="string">""</span>);</div><div class="line"><span class="keyword">if</span>(!<span class="string">""</span>.equals(jsonString))&#123;</div><div class="line">  Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">  List&lt;Bean&gt; vTypes = gson.fromJson(jsonString, <span class="keyword">new</span> TypeToken&lt;List&lt;Bean&gt;&gt;()&#123;&#125;.getType());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="需要考虑对异常和服务器错误的区分对待"><a href="#需要考虑对异常和服务器错误的区分对待" class="headerlink" title="需要考虑对异常和服务器错误的区分对待"></a>需要考虑对异常和服务器错误的区分对待</h4><p>  IBaseView的接口要么定义onError（int level,String err）；要么就分别定义onError和onException两个接口。</p>
<ul>
<li><strong>需要对异常做分类处理</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">//对应HTTP的状态码</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNAUTHORIZED = <span class="number">401</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FORBIDDEN = <span class="number">403</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOT_FOUND = <span class="number">404</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_TIMEOUT = <span class="number">408</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERNAL_SERVER_ERROR = <span class="number">500</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BAD_GATEWAY = <span class="number">502</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVICE_UNAVAILABLE = <span class="number">503</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GATEWAY_TIMEOUT = <span class="number">504</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * 描述：对请求的异常进行逻辑分类</div><div class="line"> * <span class="doctag">@author</span> xiaodanchen</div><div class="line"> * <span class="doctag">@date</span> 2016年10月12日 上午11:36:59</div><div class="line"> * QQ: 1404562848</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> e</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processException</span><span class="params">(Throwable e)</span></span>&#123;</div><div class="line">	String err;</div><div class="line">	<span class="keyword">if</span> (e <span class="keyword">instanceof</span> HttpException)&#123;             <span class="comment">//HTTP错误</span></div><div class="line">           HttpException httpException = (HttpException) e;</div><div class="line">           <span class="keyword">switch</span>(httpException.code())&#123;</div><div class="line">               <span class="keyword">case</span> UNAUTHORIZED:</div><div class="line">               <span class="keyword">case</span> FORBIDDEN:</div><div class="line">               <span class="keyword">case</span> NOT_FOUND:</div><div class="line">               <span class="keyword">case</span> REQUEST_TIMEOUT:</div><div class="line">               <span class="keyword">case</span> GATEWAY_TIMEOUT:</div><div class="line">               <span class="keyword">case</span> INTERNAL_SERVER_ERROR:</div><div class="line">               <span class="keyword">case</span> BAD_GATEWAY:</div><div class="line">               <span class="keyword">case</span> SERVICE_UNAVAILABLE:</div><div class="line">               <span class="keyword">default</span>:</div><div class="line">               	err = <span class="string">"网络异常: "</span>+httpException.code();  <span class="comment">//均视为网络错误</span></div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> err;</div><div class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> JsonParseException</div><div class="line">               || e <span class="keyword">instanceof</span> JSONException</div><div class="line">               || e <span class="keyword">instanceof</span> ParseException)&#123;</div><div class="line">       	err = <span class="string">"解析错误"</span>;            <span class="comment">//均视为解析错误</span></div><div class="line">           <span class="keyword">return</span> err;</div><div class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> ConnectException)&#123;</div><div class="line">       	err = <span class="string">"连接失败"</span>;  <span class="comment">//均视为网络错误</span></div><div class="line">           <span class="keyword">return</span> err;</div><div class="line">       &#125;<span class="keyword">else</span> &#123;</div><div class="line">       	err = <span class="string">"未知错误"</span>;          <span class="comment">//未知错误</span></div><div class="line">           <span class="keyword">return</span> err;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Gson-数据转换成json字符串时，默认会对一些特殊字符进行转义"><a href="#Gson-数据转换成json字符串时，默认会对一些特殊字符进行转义" class="headerlink" title="Gson 数据转换成json字符串时，默认会对一些特殊字符进行转义"></a>Gson 数据转换成json字符串时，默认会对一些特殊字符进行转义</h3><p>这种情况下，如果服务器存在对Json数据的验证就会导致服务器端进行签名验证不会通过。<br>比如图片的base64数据，其末尾=\n处的=会被转义为\u003d，这时候如果对数据进行签名验证就会失败。<br>具体的字符串转义情况大致如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">REPLACEMENT_CHARS[<span class="string">'"'</span>] = <span class="string">"\\\""</span>;  </div><div class="line">REPLACEMENT_CHARS[<span class="string">'\\'</span>] = <span class="string">"\\\\"</span>;  </div><div class="line">REPLACEMENT_CHARS[<span class="string">'\t'</span>] = <span class="string">"\\t"</span>;  </div><div class="line">REPLACEMENT_CHARS[<span class="string">'\b'</span>] = <span class="string">"\\b"</span>;  </div><div class="line">REPLACEMENT_CHARS[<span class="string">'\n'</span>] = <span class="string">"\\n"</span>;  </div><div class="line">REPLACEMENT_CHARS[<span class="string">'\r'</span>] = <span class="string">"\\r"</span>;  </div><div class="line">REPLACEMENT_CHARS[<span class="string">'\f'</span>] = <span class="string">"\\f"</span>;  </div><div class="line">HTML_SAFE_REPLACEMENT_CHARS = REPLACEMENT_CHARS.clone();  </div><div class="line">HTML_SAFE_REPLACEMENT_CHARS[<span class="string">'&lt;'</span>] = <span class="string">"\\u003c"</span>;  </div><div class="line">HTML_SAFE_REPLACEMENT_CHARS[<span class="string">'&gt;'</span>] = <span class="string">"\\u003e"</span>;  </div><div class="line">HTML_SAFE_REPLACEMENT_CHARS[<span class="string">'&amp;'</span>] = <span class="string">"\\u0026"</span>;  </div><div class="line">HTML_SAFE_REPLACEMENT_CHARS[<span class="string">'='</span>] = <span class="string">"\\u003d"</span>;  </div><div class="line">HTML_SAFE_REPLACEMENT_CHARS[<span class="string">'\''</span>] = <span class="string">"\\u0027"</span>;</div></pre></td></tr></table></figure></p>
<p>解决这个问题的方法是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder().disableHtmlEscaping().create();</div></pre></td></tr></table></figure></p>
<h4 id="利用Gson处理String类属性值为null"><a href="#利用Gson处理String类属性值为null" class="headerlink" title="利用Gson处理String类属性值为null"></a>利用Gson处理String类属性值为null</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Gson <span class="title">bulidGson</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		Gson gson = <span class="keyword">new</span> GsonBuilder().serializeNulls()</div><div class="line">				.registerTypeAdapterFactory(<span class="keyword">new</span> NullStringToEmptyAdapterFactory()).disableHtmlEscaping().create();</div><div class="line">		<span class="keyword">return</span> gson;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NullStringToEmptyAdapterFactory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">TypeAdapterFactory</span> </span>&#123;</div><div class="line">		<span class="keyword">public</span> &lt;T&gt; <span class="function">TypeAdapter&lt;T&gt; <span class="title">create</span><span class="params">(Gson gson, TypeToken&lt;T&gt; type)</span> </span>&#123;</div><div class="line">			Class&lt;T&gt; rawType = (Class&lt;T&gt;) type.getRawType();</div><div class="line">			<span class="keyword">if</span> (rawType != String.class) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> (TypeAdapter&lt;T&gt;) <span class="keyword">new</span> StringNullAdapter();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StringNullAdapter</span> <span class="keyword">extends</span> <span class="title">TypeAdapter</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">(JsonReader reader)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">			<span class="keyword">if</span> (reader.peek() == JsonToken.NULL) &#123;</div><div class="line">				reader.nextNull();</div><div class="line">				<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">return</span> reader.nextString();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JsonWriter writer, String value)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">			<span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line">				writer.value(<span class="string">""</span>);</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			writer.value(value);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="UI和任务回调设计"><a href="#UI和任务回调设计" class="headerlink" title="UI和任务回调设计"></a>UI和任务回调设计</h4><p>(这一块一定要在一开始就好好考虑，不然后期再改波及代码太大)<br>利用mvp+retrofit+rxjava：设计view的回调时，在一开始就要考虑好onNext，onError, onException, onComplete这几种任务状态下，返还给view的参数，及这几个view接口的入参结构：<strong>哪个任务？哪个请求？需要刷新哪个数据？需要刷新哪部分的界面？</strong></p>
<ul>
<li><strong>进度条在什么时候取消</strong>：一个界面往往有多个任务执行并异步返回，怎么确认所有的任务都执行完了，在所有任务（指定任务）返回后取消界面的进度条？</li>
<li><strong>单个任务怎么控制本地数据的局部更新，进而根据数据刷新界面?</strong></li>
<li>当任务异常或错误时的回调</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;最近使用MVP+Retrofit+Rxjava搭建了新项目的工程框架和网络请求回调框架。在网上也查看了一些资料，但是没有找到很贴合实际项目各自不同的请求及响应报文协议的解决方案。无奈，自己苦逼的一番摸索踩坑，终于搭建出了一个基本
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="MVP" scheme="http://yoursite.com/categories/Android/MVP/"/>
    
      <category term="Retrofit" scheme="http://yoursite.com/categories/Android/MVP/Retrofit/"/>
    
      <category term="Rxjava" scheme="http://yoursite.com/categories/Android/MVP/Retrofit/Rxjava/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="MVP" scheme="http://yoursite.com/tags/MVP/"/>
    
      <category term="Retrofit" scheme="http://yoursite.com/tags/Retrofit/"/>
    
      <category term="Rxjava" scheme="http://yoursite.com/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title>图解Android：View的绘制机制与源码解析</title>
    <link href="http://yoursite.com/2016/08/27/%E5%9B%BE%E8%A7%A3Android%EF%BC%9AView%E7%9A%84%E7%BB%98%E5%88%B6%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2016/08/27/图解Android：View的绘制机制与源码解析/</id>
    <published>2016-08-27T15:01:48.000Z</published>
    <updated>2016-08-28T16:13:27.961Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>Android的视图是如何绘制的？深入了解一下UI的绘制原理无论对我们APP的性能优化还是对我们的自定义view都有很大的帮助。下文将和大家一道探究一下Android的viewTree的绘制原理，希望对大家的开发和学习有所帮助。</p>
<p>本篇是<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">图解Android</a>系列第二篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Android有帮助，还望大家多多转载。<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<hr>
<h3 id="Activity的视图结构"><a href="#Activity的视图结构" class="headerlink" title="Activity的视图结构"></a>Activity的视图结构</h3><p><strong>先看一下activity的视图结构图</strong></p>
<p><img src="/hello-world/img/activity_view.png" alt="Activity的视图结构"></p>
<ul>
<li>每个activity都有一个Window(实际是phonewindow)</li>
<li>Phonewindow含有一个DecorView，这是我们window的topview</li>
<li>DecorView是继承自Framelayout，换言之其为整个ViewTree的根节点viewGroup</li>
</ul>
<p><strong>再看一下Phonewindow的类图</strong></p>
<p><img src="/hello-world/img/decorview.png" alt="Activity的视图结构"></p>
<p><strong>接下来我们来看一下单个Activity的viewTree的结构，我选择了两版sdk来查看</strong></p>
<p>1）Android4.4系统的activity：<br><img src="/hello-world/img/viewTree4.4.png" alt="Activity的视图结构"><br>2）Android6.0系统的activity：<br><img src="/hello-world/img/viewTree6.0.png" alt="Activity的视图结构"></p>
<h3 id="ViewTree的绘制"><a href="#ViewTree的绘制" class="headerlink" title="ViewTree的绘制"></a>ViewTree的绘制</h3><p><strong>id</strong>为<strong>“content”</strong>的ContentFrameLayout是我们的布局文件加载显示的区域，更确切地说是我们activity的setcontentView()方法设置的视图显示的区域。下面我么就看看ContentFrameLayout中整个viewTree是如何绘制出来的。<br><img src="/hello-world/img/viewTreeDemo.png" alt="Activity的视图结构"><br>在<a href="https://xiaodanchen.github.io/2016/08/25/%E5%9B%BE%E8%A7%A3Android%EF%BC%9A%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/" target="_blank" rel="external">《图解Android：事件传递机制》</a>中我们说过Android中的任何一个布局、任何一个控件包括我们自定义的控件其实都是直接或间接继承自View实现的，所以说这些View应该都具有相同的绘制流程与机制才能显示到屏幕上（可能每个控件的具体绘制逻辑有差异， 但是主流程都是一样的）。每一个View的绘制过程都必须经历三个最主要的过程，也就是measure()、layout()和draw()。<br>先看一下类图：<br><img src="/hello-world/img/viewUI.png" alt="Activity的视图结构"></p>
<p>那么，<strong>整个Android的UI绘制机制是从哪里开始的即入口在哪里呢？</strong>答案就是<strong>ViewRootImpl</strong>类的<strong>performTraversals()</strong>方法。ViewRootImpl这个类是一个隐藏类，所以如果你是使用Eclipse开发的话可能看不到这个文件（AndroidStudio可以），没关系，根据路径（androidSDK\android-sdk-windows\sources\android-23\android\view\）去找到ViewRootImpl.Java文件，然后用文本阅读工具直接打开就好。<br>看一下官方对ViewRootImpl的介绍：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* The top of a view hierarchy, implementing the needed protocol between View</div><div class="line">* and the WindowManager.  This is for the most part an internal implementation</div><div class="line">* detail of &#123;<span class="doctag">@link</span> WindowManagerGlobal&#125;.</div><div class="line">*</div><div class="line">* &#123;<span class="doctag">@hide</span>&#125;</div><div class="line">*/</div></pre></td></tr></table></figure></p>
<p>上面这段注释啥意思呢？说白了就是<strong>ViewRootImpl是一个window中的viewTree的入口，实现了window对viewTree管理的必需逻辑。</strong></p>
<blockquote>
<p>ViewRootImpl类performTraversals()代码，源代码长的恐怖，这里给大家过滤一下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performTraversals</span><span class="params">()</span> </span>&#123;</div><div class="line">      ......</div><div class="line">      <span class="comment">//lp.width和lp.height在创建ViewGroup实例时值为MATCH_PARENT</span></div><div class="line">      <span class="keyword">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class="line">      <span class="keyword">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class="line">      ......</div><div class="line">      performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line">      ......</div><div class="line">      performLayout(lp, desiredWindowWidth, desiredWindowHeight);</div><div class="line">      ......</div><div class="line">      performDraw();</div><div class="line">      ......</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="comment">//执行rootView的测量</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performMeasure</span><span class="params">(<span class="keyword">int</span> childWidthMeasureSpec, <span class="keyword">int</span> childHeightMeasureSpec)</span> </span>&#123;</div><div class="line">      Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"measure"</span>);</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">      	<span class="comment">//ViewGroup的measure()方法</span></div><div class="line">          mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">  <span class="comment">//执行layout操作</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performLayout</span><span class="params">(WindowManager.LayoutParams lp, <span class="keyword">int</span> desiredWindowWidth,</span></span></div><div class="line">          <span class="keyword">int</span> desiredWindowHeight) &#123;</div><div class="line">      mLayoutRequested = <span class="keyword">false</span>;</div><div class="line">      mScrollMayChange = <span class="keyword">true</span>;</div><div class="line">      mInLayout = <span class="keyword">true</span>;</div><div class="line">      <span class="keyword">final</span> View host = mView;</div><div class="line">      ......</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">      	<span class="comment">//viewRoot先进行layout</span></div><div class="line">          host.layout(<span class="number">0</span>, <span class="number">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</div><div class="line">          mInLayout = <span class="keyword">false</span>;</div><div class="line">          <span class="comment">//需要layout的子view的数量</span></div><div class="line">          <span class="keyword">int</span> numViewsRequestingLayout = mLayoutRequesters.size();</div><div class="line">          <span class="keyword">if</span> (numViewsRequestingLayout &gt; <span class="number">0</span>) &#123;</div><div class="line">          	<span class="comment">//需要layout的子view</span></div><div class="line">              ArrayList&lt;View&gt; validLayoutRequesters = getValidLayoutRequesters(mLayoutRequesters,</div><div class="line">                      <span class="keyword">false</span>);</div><div class="line">              <span class="keyword">if</span> (validLayoutRequesters != <span class="keyword">null</span>) &#123;</div><div class="line">                  <span class="comment">//如果view中有调用requestLayout()方法，则说明界面需要刷新</span></div><div class="line">                  mHandlingLayoutInLayoutRequest = <span class="keyword">true</span>;</div><div class="line">                  <span class="keyword">int</span> numValidRequests = validLayoutRequesters.size();</div><div class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numValidRequests; ++i) &#123;</div><div class="line">                      <span class="keyword">final</span> View view = validLayoutRequesters.get(i);</div><div class="line">                      view.requestLayout();</div><div class="line">                  &#125;</div><div class="line">                  <span class="comment">//整个viewTree重新measure</span></div><div class="line">                  measureHierarchy(host, lp, mView.getContext().getResources(),</div><div class="line">                          desiredWindowWidth, desiredWindowHeight);</div><div class="line">                  mInLayout = <span class="keyword">true</span>;</div><div class="line">                  <span class="comment">//整个viewTree重新layout</span></div><div class="line">                  host.layout(<span class="number">0</span>, <span class="number">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</div><div class="line"></div><div class="line">                  mHandlingLayoutInLayoutRequest = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">                  <span class="comment">// 再次检查是否有view需要刷新</span></div><div class="line">                  validLayoutRequesters = getValidLayoutRequesters(mLayoutRequesters, <span class="keyword">true</span>);</div><div class="line">                  <span class="keyword">if</span> (validLayoutRequesters != <span class="keyword">null</span>) &#123;</div><div class="line">                      <span class="keyword">final</span> ArrayList&lt;View&gt; finalRequesters = validLayoutRequesters;</div><div class="line">                      <span class="comment">// Post请求，在下一帧的显示的时候去执行刷新</span></div><div class="line">                      getRunQueue().post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                          <span class="meta">@Override</span></div><div class="line">                          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                              <span class="keyword">int</span> numValidRequests = finalRequesters.size();</div><div class="line">                              <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numValidRequests; ++i) &#123;</div><div class="line">                                  <span class="keyword">final</span> View view = finalRequesters.get(i);</div><div class="line">                                  view.requestLayout();</div><div class="line">                              &#125;</div><div class="line">                          &#125;</div><div class="line">                      &#125;);</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class="line">      &#125;</div><div class="line">      mInLayout = <span class="keyword">false</span>;</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performDraw</span><span class="params">()</span> </span>&#123;</div><div class="line">      ......</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          draw(fullRedrawNeeded);</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          mIsDrawing = <span class="keyword">false</span>;</div><div class="line">          Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class="line">      &#125;</div><div class="line">      ......</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">boolean</span> fullRedrawNeeded)</span> </span>&#123;</div><div class="line">      ......</div><div class="line">      <span class="keyword">if</span> (mAttachInfo.mHardwareRenderer != <span class="keyword">null</span> &amp;&amp; mAttachInfo.mHardwareRenderer.isEnabled()) &#123;</div><div class="line">	<span class="comment">//使用硬件渲染，比如GPU</span></div><div class="line">      	mAttachInfo.mHardwareRenderer.draw(mView, mAttachInfo, <span class="keyword">this</span>);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">//使用软件渲染</span></div><div class="line">          <span class="keyword">if</span> (!drawSoftware(surface, mAttachInfo, xOffset, yOffset, scalingRequired, dirty)) &#123;</div><div class="line">              <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">&#125;</div><div class="line">......</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="comment">/**</span></div><div class="line">   * <span class="doctag">@return</span> true if drawing was successful, false if an error occurred</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">drawSoftware</span><span class="params">(Surface surface, AttachInfo attachInfo, <span class="keyword">int</span> xoff, <span class="keyword">int</span> yoff,</span></span></div><div class="line">          <span class="keyword">boolean</span> scalingRequired, Rect dirty) &#123;</div><div class="line">      <span class="comment">// Draw with software renderer.</span></div><div class="line">      <span class="keyword">final</span> Canvas canvas;</div><div class="line">      ......</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          canvas.translate(-xoff, -yoff);</div><div class="line">          <span class="keyword">if</span> (mTranslator != <span class="keyword">null</span>) &#123;</div><div class="line">          mTranslator.translateCanvas(canvas);</div><div class="line">          &#125;</div><div class="line">          canvas.setScreenDensity(scalingRequired ? mNoncompatDensity : <span class="number">0</span>);</div><div class="line">          attachInfo.mSetIgnoreDirtyState = <span class="keyword">false</span>;</div><div class="line"> </div><div class="line">          mView.draw(canvas);</div><div class="line">           </div><div class="line">          drawAccessibilityFocusedDrawableIfNeeded(canvas);</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          <span class="keyword">if</span> (!attachInfo.mSetIgnoreDirtyState) &#123;</div><div class="line">          attachInfo.mIgnoreDirtyState = <span class="keyword">false</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      ......</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="measure相关"><a href="#measure相关" class="headerlink" title="measure相关"></a>measure相关</h4><blockquote>
<p>View类的UI绘制相关函数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//final说明该函数不允许被子类override,不需要关注细节</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">measure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">       ......</div><div class="line">       <span class="comment">//widthMeasureSpec，heightMeasureSpec是由parent决定的</span></div><div class="line">	onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">	......</div><div class="line">   &#125;</div><div class="line">    </div><div class="line">   <span class="comment">/**</span></div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> widthMeasureSpec horizontal space requirements as imposed by the parent.</div><div class="line">    * </div><div class="line">    * <span class="doctag">@param</span> heightMeasureSpec vertical space requirements as imposed by the parent.</div><div class="line">    * </div><div class="line">    * <span class="doctag">@see</span> #getMeasuredWidth()</div><div class="line">    * <span class="doctag">@see</span> #getMeasuredHeight()</div><div class="line">    * <span class="doctag">@see</span> #setMeasuredDimension(int, int)</div><div class="line">    * <span class="doctag">@see</span> #getSuggestedMinimumHeight()</div><div class="line">    * <span class="doctag">@see</span> #getSuggestedMinimumWidth()</div><div class="line">    * <span class="doctag">@see</span> android.view.View.MeasureSpec#getMode(int)</div><div class="line">    * <span class="doctag">@see</span> android.view.View.MeasureSpec#getSize(int)</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">   	<span class="comment">//View类的默认实现，如果自定义view的话，需要我们自己override</span></div><div class="line">   	<span class="comment">//child的宽高有来自parent的widthMeasureSpec、heightMeasureSpec和子的MeasureSpecMode共同决定</span></div><div class="line">       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class="line">               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>注意onMeasure（int widthMeasureSpec, int heightMeasureSpec）入参的含义：<br>  1) widthMeasureSpec和heightMeasureSpec是parent暴露给child的尺寸<br>  2) widthMeasureSpec和heightMeasureSpec是32位的数值，其中高16位为MeasureSpecMode，低16位为MeasureSpecSize<br>  3) MeasureSpecMode有三种取值：<pre><code>* MeasureSpec.EXACTLY：child为精准尺寸（layout_with=mach_parent、24dp的情况）
* MeasureSpec.AT_MOST：child为最大尺寸（layout_with=wrap_content的情况）
* MeasureSpec.UNSPECIFIED：child未指定尺寸
</code></pre></li>
<li>child的尺寸有parent穿过来的widthMeasureSpec、heightMeasureSpec和子的MeasureSpecMode共同决定</li>
</ul>
<h4 id="layout相关"><a href="#layout相关" class="headerlink" title="layout相关"></a>layout相关</h4><blockquote>
<p>View的layout相关代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//非final类型，子类可以重载</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        ......</div><div class="line"></div><div class="line">        <span class="keyword">int</span> oldL = mLeft;</div><div class="line">        <span class="keyword">int</span> oldT = mTop;</div><div class="line">        <span class="keyword">int</span> oldB = mBottom;</div><div class="line">        <span class="keyword">int</span> oldR = mRight;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class="line">                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class="line">            onLayout(changed, l, t, r, b);</div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line">		......</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">//View的onlayout函数默认为空（如果自定义view中需要，可重载）</span></div><div class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>ViewGroup的layout相关代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</div><div class="line">   */</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!mSuppressLayout &amp;&amp; (mTransition == <span class="keyword">null</span> || !mTransition.isChangingLayout())) &#123;</div><div class="line">          <span class="keyword">if</span> (mTransition != <span class="keyword">null</span>) &#123;</div><div class="line">              mTransition.layoutChange(<span class="keyword">this</span>);</div><div class="line">          &#125;</div><div class="line">          <span class="comment">//view的layout方法</span></div><div class="line">          <span class="keyword">super</span>.layout(l, t, r, b);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          mLayoutCalledWhileSuppressed = <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 抽象方法，子类必须实现（因为内部必然存在多个view控件，需要layout）</div><div class="line">   */</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed,</span></span></div><div class="line">          <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line">    * ViewGroup的onLayout()方法都需要子类去实现</div><div class="line">    * 所以我们来看一下LinearLayout的实现</div><div class="line">    */</div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;  </div><div class="line">            layoutVertical();  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            layoutHorizontal();  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">   <span class="comment">//以垂直方向的布局为例</span></div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">layoutVertical</span><span class="params">()</span> </span>&#123;  </div><div class="line">        ......  </div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = getVirtualChildCount();  </div><div class="line">        ......</div><div class="line">		<span class="comment">//遍历child</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;  </div><div class="line">            <span class="keyword">final</span> View child = getVirtualChildAt(i);  </div><div class="line">            <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;  </div><div class="line">                childTop += measureNullChild(i);  </div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;  </div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childWidth = child.getMeasuredWidth();  </div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childHeight = child.getMeasuredHeight();  </div><div class="line">                ......</div><div class="line">                <span class="comment">//递归child调用layout</span></div><div class="line">                setChildFrame(child, childLeft, childTop + getLocationOffset(child),  </div><div class="line">                        childWidth, childHeight);  </div><div class="line">                ......  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setChildFrame</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;          </div><div class="line">    	child.layout(left, top, left + width, top + height);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li>View.layout方法可被重载，ViewGroup.layout为final的不可重载，ViewGroup.onLayout为abstract的，子类必须重载实现自己的位置逻辑。</li>
<li>measure操作完成后得到的是对每个View经测量过的measuredWidth和measuredHeight，layout操作 完成之后得到的是对每个View进行位置分配后的mLeft、mTop、mRight、mBottom，这些值都是相对于父View来说的。</li>
<li>凡是layout_XXX的布局属性基本都针对的是包含子View的ViewGroup的，当对一个没有父容器的View设置相关layout_XXX属性是没有任何意义的。</li>
<li>使用View的getWidth()和getHeight()方法来获取View测量的宽高，必须保证这两个方法在onLayout流程之后被调用才能返回有效值。</li>
</ul>
<h4 id="draw相关"><a href="#draw相关" class="headerlink" title="draw相关"></a>draw相关</h4><blockquote>
<p>View的draw相关代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        ......</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Draw traversal performs several drawing steps which must be executed</div><div class="line">         * in the appropriate order:</div><div class="line">         *</div><div class="line">         *      1. Draw the background</div><div class="line">         *      2. If necessary, save the canvas' layers to prepare for fading</div><div class="line">         *      3. Draw view's content</div><div class="line">         *      4. Draw children</div><div class="line">         *      5. If necessary, draw the fading edges and restore layers</div><div class="line">         *      6. Draw decorations (scrollbars for instance)</div><div class="line">         */</div><div class="line"> </div><div class="line">        <span class="comment">// Step 1, draw the background, if needed</span></div><div class="line">        ......</div><div class="line">        <span class="keyword">if</span> (!dirtyOpaque) &#123;</div><div class="line">            drawBackground(canvas);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="comment">// skip step 2 &amp; 5 if possible (common case)</span></div><div class="line">        ......</div><div class="line"> </div><div class="line">        <span class="comment">// Step 2, save the canvas' layers</span></div><div class="line">        ......</div><div class="line">            <span class="keyword">if</span> (drawTop) &#123;</div><div class="line">                canvas.saveLayer(left, top, right, top + length, <span class="keyword">null</span>, flags);</div><div class="line">            &#125;</div><div class="line">        ......</div><div class="line"> </div><div class="line">        <span class="comment">// Step 3, draw the content</span></div><div class="line">        <span class="keyword">if</span> (!dirtyOpaque) onDraw(canvas);</div><div class="line"> </div><div class="line">        <span class="comment">// Step 4, draw the children</span></div><div class="line">        dispatchDraw(canvas);</div><div class="line"> </div><div class="line">        <span class="comment">// Step 5, draw the fade effect and restore layers</span></div><div class="line">        ......</div><div class="line">        <span class="keyword">if</span> (drawTop) &#123;</div><div class="line">            matrix.setScale(<span class="number">1</span>, fadeHeight * topFadeStrength);</div><div class="line">            matrix.postTranslate(left, top);</div><div class="line">            fade.setLocalMatrix(matrix);</div><div class="line">            p.setShader(fade);</div><div class="line">            canvas.drawRect(left, top, right, top + length, p);</div><div class="line">        &#125;</div><div class="line">        ......</div><div class="line"> </div><div class="line">        <span class="comment">// Step 6, draw decorations (scrollbars)</span></div><div class="line">        onDrawScrollBars(canvas);</div><div class="line">        ......</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li>View的onDraw()方法为空，需要用户自己实现</li>
<li>关于draw，官方的注释已经很清楚，我们需要注意的是第四步：递归调用完成viewTree的绘制</li>
<li>dispatchdraw()为空，需要在子类去实现</li>
</ul>
<blockquote>
<p>ViewGroup的draw相关代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 遍历各种类型的情况的child，并draw</div><div class="line">    */</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">       <span class="keyword">boolean</span> usingRenderNodeProperties = canvas.isRecordingFor(mRenderNode);</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</div><div class="line">       <span class="keyword">final</span> View[] children = mChildren;</div><div class="line">       </div><div class="line">       ......</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenCount; i++) &#123;</div><div class="line">           ......</div><div class="line">           <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class="keyword">null</span>) &#123;</div><div class="line">               more |= drawChild(canvas, child, drawingTime);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">while</span> (transientIndex &gt;= <span class="number">0</span>) &#123;</div><div class="line">           ......</div><div class="line">           <span class="keyword">if</span> ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||</div><div class="line">                   transientChild.getAnimation() != <span class="keyword">null</span>) &#123;</div><div class="line">               more |= drawChild(canvas, transientChild, drawingTime);</div><div class="line">           &#125;</div><div class="line">           ......</div><div class="line">       &#125;</div><div class="line">        </div><div class="line">       <span class="keyword">if</span> (mDisappearingChildren != <span class="keyword">null</span>) &#123;</div><div class="line">           ......</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = disappearingCount; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">               <span class="keyword">final</span> View child = disappearingChildren.get(i);</div><div class="line">               more |= drawChild(canvas, child, drawingTime);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">      ......</div><div class="line">   &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">drawChild</span><span class="params">(Canvas canvas, View child, <span class="keyword">long</span> drawingTime)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> child.draw(canvas, <span class="keyword">this</span>, drawingTime);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="关于invalidate方法"><a href="#关于invalidate方法" class="headerlink" title="关于invalidate方法"></a>关于invalidate方法</h4><p>invalidate系列方法请求重绘View树（也就是draw方法），如果View大小没有发生变化就不会调用layout过程，并且只绘制那 些“需要重绘的”View，也就是哪个View(View只绘制该View，ViewGroup绘制整个ViewGroup)请求invalidate系 列方法，就绘制该View。</p>
<p>有以下几种触发invalidate方法的情况：</p>
<ul>
<li>直接调用invalidate方法：会绘制调用者本身。</li>
<li>触发setSelection方法：会绘制调用者本身。</li>
<li>触发setVisibility方法：当View可视状态在INVISIBLE转换VISIBLE时会间接调用invalidate方法，继而绘制该View。当View的可视状态在 INVISIBLE\VISIBLE 转换为GONE状态时会间接调用requestLayout和invalidate方法，同时由于View树大小发生了变化，所以会请求measure过 程以及draw过程，同样只绘制需要“重新绘制”的视图。</li>
<li>触发setEnabled方法：不会重新绘制任何View包括该调用者本身。</li>
<li>触发requestFocus方法：只绘制“需要重绘”的View。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Android的视图是如何绘制的？深入了解一下UI的绘制原理无论对我们APP的性能优化还是对我们的自定义view都有很大的帮助。下文将和大家一道探究一下Android的viewTree的绘制原理，希望对大家的开发和学习有
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>图解Android：Touch事件传递机制</title>
    <link href="http://yoursite.com/2016/08/25/%E5%9B%BE%E8%A7%A3Android%EF%BC%9A%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2016/08/25/图解Android：事件传递机制/</id>
    <published>2016-08-25T02:26:18.000Z</published>
    <updated>2016-08-27T07:53:58.758Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>Android事件管理机制是一名专业Android研发工程师必须要了解的核心知识之一，深入了解一下该机制无论对我们日常开发还是找工作，乃至于对我们的架构思想都有很大的帮助。Android中我们用到的最多的事件是InputEvent，主要是两类：MotionEvent和KeyEvent。由于事件传递模型基本一致，我将以更常用到的MotionEvent为目标来讲解。</p>
<p>根据实际开发的需要，本文仅讲解touch事件在viewTree中的传递机制，为广大开发者搞清原理、扫清障碍。文章参考了Kelin童鞋的<a href="http://www.jianshu.com/p/e99b5e8bd67b" target="_blank" rel="external">图解Android事件传递机制</a>，写的很好大家也可以去看看。</p>
<p>本篇是<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">图解Android</a>系列第一篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Android有帮助，还望大家多多转载。<strong>学习小组QQ群</strong>: 193765960。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<hr>
<h3 id="Touch事件的分发、传递、消费所涉及的类与函数"><a href="#Touch事件的分发、传递、消费所涉及的类与函数" class="headerlink" title="Touch事件的分发、传递、消费所涉及的类与函数"></a>Touch事件的分发、传递、消费所涉及的类与函数</h3><p>老规矩，让我们先来看一张类图：<br><img src="/hello-world/img/viewgroup.png" alt="Touch事件相关回调接口图谱"></p>
<ul>
<li>View类定义了两个Touch事件传递分发的函数：<ul>
<li>public boolean dispatchTouchEvent(MotionEvent event)</li>
<li>public boolean onTouchEvent(MotionEvent event)</li>
</ul>
</li>
<li>ViewGroup继承自View类，其重写了定义了两个 Touch事件传递分发的函数<ul>
<li>@Override public boolean dispatchTouchEvent(MotionEvent ev)</li>
<li>public boolean onInterceptTouchEvent(MotionEvent ev) </li>
</ul>
</li>
<li>Activity类定义了两个Touch事件传递分发的函数：<ul>
<li>public boolean dispatchTouchEvent(MotionEvent event)</li>
<li>public boolean onTouchEvent(MotionEvent event)</li>
</ul>
</li>
<li>Activity类的viewRoot实际上是PhoneWindow的DecorView（ViewGroup）<ul>
<li>DecorView维护了一个LinearLayout对象，这个对象包括两部分：TitleView和ContentViews（FrameLayout）</li>
<li>我们定义的layout.xml其实是被加载到TitleView和ContentViews中的</li>
</ul>
</li>
</ul>
<blockquote>
<p>Touch事件在Activity的viewTree中的传递分发，如图</p>
</blockquote>
<p><img src="/hello-world/img/touchevent.png" alt="Touch事件在Activity的viewTree中的传递分发"></p>
<ul>
<li>箭头的上面字代表方法返回值:return true、return false、return super.xxxxx(),super 的意思是调用父类实现。</li>
<li>dispatchTouchEvent和 onTouchEvent的框里有个[true—-&gt;消费]的字，表示的意思是如果方法返回true，那么代表事件就此消费，不会继续往别的地方传了，事件终止。</li>
<li>目前所有的图的事件是针对ACTION_DOWN的，对于ACTION_MOVE和ACTION_UP我们最后做分析。</li>
</ul>
<hr>
<h3 id="事件分发入口：Activity类的dispatchTouchEvent-方法"><a href="#事件分发入口：Activity类的dispatchTouchEvent-方法" class="headerlink" title="事件分发入口：Activity类的dispatchTouchEvent()方法"></a>事件分发入口：Activity类的dispatchTouchEvent()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 处理屏幕触摸事件。该方法是activity事件传递的入口。</div><div class="line">    * 你可以通过override这个方法来拦截所有touch事件使不传递给viewTree。</div><div class="line">    * </div><div class="line">    * <span class="doctag">@return</span> 如果事件最终被消费将会返回 true.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">           onUserInteraction();</div><div class="line">       &#125;</div><div class="line">       <span class="comment">//将事件分发给viewTree：以DecorView为RootView的viewTree</span></div><div class="line">       <span class="comment">//DecorView为ViewGroup</span></div><div class="line">       <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class="line">       	<span class="comment">//viewTree存在元素消费了该事件，返回true</span></div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;‘</div><div class="line">       </div><div class="line">       <span class="comment">//viewTree不存在元素消费了该事件，调用activity的onTouchEvent(ev)</span></div><div class="line">       <span class="keyword">return</span> onTouchEvent(ev);</div><div class="line">   &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 当activity中没有任何view可以消费该事件时将会调用该方法. </div><div class="line">    * 该方法常用来处理发生在activity的window边界之外的触摸事件。</div><div class="line">    * (联想：Dialog类型的activity点击外侧弹框消失应该是这货起的作用吧？)</div><div class="line">    * </div><div class="line">    * <span class="doctag">@return</span> 如果你需要消费touch事件，返回true，否则返回false</div><div class="line">    * 默认是返回false的</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (mWindow.shouldCloseOnTouch(<span class="keyword">this</span>, event)) &#123;</div><div class="line">           finish();</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="ViewGroup-中touch事件是如何传递的"><a href="#ViewGroup-中touch事件是如何传递的" class="headerlink" title="ViewGroup 中touch事件是如何传递的"></a>ViewGroup 中touch事件是如何传递的</h3><blockquote>
<p>ViewGroup的dispatchTouchEvent()方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * ViewGroup.java</div><div class="line">   */</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">      </div><div class="line">      ...<span class="comment">//次要代码，在此省略</span></div><div class="line"> </div><div class="line">      <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</div><div class="line">      <span class="keyword">if</span> (onFilterTouchEventForSecurity(ev)) &#123;</div><div class="line">       </div><div class="line">	...<span class="comment">//次要代码，在此省略</span></div><div class="line">	</div><div class="line">	 <span class="comment">//标志是否拦截事件</span></div><div class="line">          <span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;</div><div class="line">          <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">                  || mFirstTouchTarget != <span class="keyword">null</span>) &#123;</div><div class="line">              ...</div><div class="line">              <span class="keyword">if</span> (!disallowIntercept) &#123;</div><div class="line">              	<span class="comment">//当前ViewGroup是否需要拦截该事件</span></div><div class="line">                  intercepted = onInterceptTouchEvent(ev);</div><div class="line">                  ev.setAction(action); </div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  intercepted = <span class="keyword">false</span>;</div><div class="line">              &#125;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              intercepted = <span class="keyword">true</span>;</div><div class="line">          &#125;</div><div class="line">          </div><div class="line">          ...</div><div class="line">          TouchTarget newTouchTarget = <span class="keyword">null</span>;</div><div class="line">          <span class="keyword">boolean</span> alreadyDispatchedToNewTouchTarget = <span class="keyword">false</span>;</div><div class="line">          <span class="comment">//如果当前ViewGroup不拦截该事件，则继续向叶子节点分发该事件</span></div><div class="line">          <span class="keyword">if</span> (!canceled &amp;&amp; !intercepted) &#123;</div><div class="line">              ...</div><div class="line">              <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">                  ...</div><div class="line">                  <span class="comment">//叶子节点的数量</span></div><div class="line">                  <span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</div><div class="line">                  <span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123;</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(actionIndex);</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(actionIndex);</div><div class="line">                      ...</div><div class="line">                      <span class="comment">//根据Z-order得到拍好序的children</span></div><div class="line">                      <span class="keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildOrderedChildList();</div><div class="line">                      ...</div><div class="line">                      <span class="comment">//找到一个能接受Event的子View，再对子View的View树进行遍历</span></div><div class="line">                      <span class="keyword">final</span> View[] children = mChildren;</div><div class="line">                      <span class="comment">//遍历叶子节点</span></div><div class="line">                      <span class="keyword">for</span> (<span class="keyword">int</span> i = childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">                          ...</div><div class="line">                          <span class="keyword">final</span> View child = (preorderedList == <span class="keyword">null</span>)</div><div class="line">                                  ? children[childIndex] : preorderedList.get(childIndex);</div><div class="line">					...</div><div class="line">                          <span class="comment">//当前叶子view不能接收该touch事件，或者该叶子view不在触摸事件的触摸区域内，则查看下一个叶子</span></div><div class="line">                          <span class="keyword">if</span> (!canViewReceivePointerEvents(child)</div><div class="line">                                  || !isTransformedTouchPointInView(x, y, child, <span class="keyword">null</span>)) &#123;</div><div class="line">                              ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">                              <span class="comment">//跳出本次循环，遍历下一个叶子</span></div><div class="line">                              <span class="keyword">continue</span>;</div><div class="line">                          &#125;</div><div class="line">                        </div><div class="line">                          <span class="comment">//找到了可以接收该事件并处于触摸区域内的叶子view: child</span></div><div class="line">                          </div><div class="line">                          newTouchTarget = getTouchTarget(child);</div><div class="line">                          <span class="comment">//child已经存在target链表中</span></div><div class="line">                          <span class="keyword">if</span> (newTouchTarget != <span class="keyword">null</span>) &#123;</div><div class="line">                              <span class="comment">// 如果touch事件之前已经被该child消费，则后续touch事件不会继续向下层viewtree分发</span></div><div class="line">                              <span class="keyword">break</span>;</div><div class="line">                          &#125;</div><div class="line">                          <span class="comment">//将事件分发给该叶子的viewTree</span></div><div class="line">                          <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</div><div class="line">                          	<span class="comment">//叶子dispatch最终返回true</span></div><div class="line">                              ...</div><div class="line">                              <span class="comment">//将child加入到target链表中</span></div><div class="line">                              newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">                              alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</div><div class="line">                              <span class="comment">//终止遍历</span></div><div class="line">                              <span class="keyword">break</span>;</div><div class="line">                          &#125;</div><div class="line">                          <span class="comment">//设置标志：当前遍历没有找到可消费事件的view，事件可继续正常分发</span></div><div class="line">                          ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">                      &#125;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="comment">// 找不到可以消费该事件的view</span></div><div class="line">          <span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123; </div><div class="line">              <span class="comment">//继续事件传递流程</span></div><div class="line">              handled = dispatchTransformedTouchEvent(ev, canceled, <span class="keyword">null</span>,</div><div class="line">                      TouchTarget.ALL_POINTER_IDS);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              </div><div class="line">              TouchTarget predecessor = <span class="keyword">null</span>;</div><div class="line">              TouchTarget target = mFirstTouchTarget;</div><div class="line">              <span class="comment">//找到可以消费该事件的view</span></div><div class="line">              <span class="keyword">while</span> (target != <span class="keyword">null</span>) &#123;</div><div class="line">                  <span class="keyword">final</span> TouchTarget next = target.next;</div><div class="line">                  <span class="comment">//之前已经分发同类事件给了view</span></div><div class="line">                  <span class="keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</div><div class="line">                      <span class="comment">//返回true</span></div><div class="line">                      handled = <span class="keyword">true</span>;</div><div class="line">                  &#125; <span class="keyword">else</span> &#123;</div><div class="line">                      <span class="keyword">final</span> <span class="keyword">boolean</span> cancelChild = resetCancelNextUpFlag(target.child)</div><div class="line">                              || intercepted;</div><div class="line">                       <span class="comment">//将事件分发给他</span></div><div class="line">                      <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,</div><div class="line">                              target.child, target.pointerIdBits)) &#123;</div><div class="line">                        <span class="comment">//返回true  </span></div><div class="line">                        handled = <span class="keyword">true</span>;</div><div class="line">                      &#125;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//返回ViewTree的事件传递消费结果：true 事件被消费；false 事件没有被消费</span></div><div class="line">      <span class="keyword">return</span> handled;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>ViewGroup的dispatchTransformedTouchEvent()方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 将touch事件根据view的坐标系进行变换，</div><div class="line">    * 如果view==null，则将事件传递给viewgroup继续分发事件</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dispatchTransformedTouchEvent</span><span class="params">(MotionEvent event, <span class="keyword">boolean</span> cancel,</span></span></div><div class="line">           View child, <span class="keyword">int</span> desiredPointerIdBits) &#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">boolean</span> handled;</div><div class="line"></div><div class="line">       <span class="comment">//cacel事件</span></div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> oldAction = event.getAction();</div><div class="line">       <span class="keyword">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;</div><div class="line">           event.setAction(MotionEvent.ACTION_CANCEL);</div><div class="line">           <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">               handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               handled = child.dispatchTouchEvent(event);</div><div class="line">           &#125;</div><div class="line">           event.setAction(oldAction);</div><div class="line">           <span class="comment">//cacel事件不需要转换，处理后在此返回处理结果</span></div><div class="line">           <span class="keyword">return</span> handled;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       ...</div><div class="line">       <span class="keyword">final</span> MotionEvent transformedEvent;</div><div class="line">       <span class="keyword">if</span> (newPointerIdBits == oldPointerIdBits) &#123;</div><div class="line">        	<span class="comment">//child不可以消费该事件，继续分发</span></div><div class="line">           <span class="keyword">if</span> (child == <span class="keyword">null</span> || child.hasIdentityMatrix()) &#123;</div><div class="line">               <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">               	<span class="comment">//不存在可以消费该事件的child，父节点继续事件分发</span></div><div class="line">                   handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="keyword">final</span> <span class="keyword">float</span> offsetX = mScrollX - child.mLeft;</div><div class="line">                   <span class="keyword">final</span> <span class="keyword">float</span> offsetY = mScrollY - child.mTop;</div><div class="line">                   event.offsetLocation(offsetX, offsetY);</div><div class="line"></div><div class="line">                   handled = child.dispatchTouchEvent(event);</div><div class="line"></div><div class="line">                   event.offsetLocation(-offsetX, -offsetY);</div><div class="line">               &#125;</div><div class="line">               <span class="comment">//返回分发结果</span></div><div class="line">               <span class="keyword">return</span> handled;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//child可以消费该事件</span></div><div class="line">           transformedEvent = MotionEvent.obtain(event);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">       	<span class="comment">//手指点数变化</span></div><div class="line">           transformedEvent = event.split(newPointerIdBits);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">       	<span class="comment">// 手指点数变化后，child无法对事件消费，则父节点继续分发</span></div><div class="line">           handled = <span class="keyword">super</span>.dispatchTouchEvent(transformedEvent);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="comment">//child可以消费该事件，坐标系变换</span></div><div class="line">           <span class="keyword">final</span> <span class="keyword">float</span> offsetX = mScrollX - child.mLeft;</div><div class="line">           <span class="keyword">final</span> <span class="keyword">float</span> offsetY = mScrollY - child.mTop;</div><div class="line">           transformedEvent.offsetLocation(offsetX, offsetY);</div><div class="line">           <span class="keyword">if</span> (! child.hasIdentityMatrix()) &#123;</div><div class="line">               transformedEvent.transform(child.getInverseMatrix());</div><div class="line">           &#125;</div><div class="line">		<span class="comment">//child分发事件</span></div><div class="line">           handled = child.dispatchTouchEvent(transformedEvent);</div><div class="line">       &#125;</div><div class="line">      </div><div class="line">       transformedEvent.recycle();</div><div class="line">       <span class="comment">//返回child的分发处理结果</span></div><div class="line">       <span class="keyword">return</span> handled;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>ViewGroup的onInterceptTouchEvent()方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * <span class="doctag">@return</span>  true: 拦截事件并交给ViewGroup的onTouchEvent()处理</div><div class="line">    * 			false: ViewGroup不消费事件，继续向子view分发事件</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">   	<span class="comment">//如果子类不override该方法，则默认返回false</span></div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="View-中touch事件是如何传递的"><a href="#View-中touch事件是如何传递的" class="headerlink" title="View 中touch事件是如何传递的"></a>View 中touch事件是如何传递的</h3><blockquote>
<p>View的onInterceptTouchEvent()方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 将屏幕的touch事件传递给目标view或者view自己（view本身就是目标view）</div><div class="line">    * </div><div class="line">    * <span class="doctag">@return</span> True if the event was handled by the view, false otherwise.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">       ...</div><div class="line">       <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</div><div class="line">           mInputEventConsistencyVerifier.onTouchEvent(event, <span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = event.getActionMasked();</div><div class="line">       <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">           <span class="comment">// Defensive cleanup for new gesture</span></div><div class="line">           stopNestedScroll();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class="line">           ListenerInfo li = mListenerInfo;</div><div class="line">           <span class="comment">//如果view设置了touchlistener并且view是enable状态，则在listener中处理事件</span></div><div class="line">           <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></div><div class="line">                   &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">                   &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</div><div class="line">               result = <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">		<span class="comment">//lsitener未处理（包括未定义listener），则交给ontouchEvent()</span></div><div class="line">           <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class="line">               result = <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">	<span class="comment">//如果该view未消费该事件，则标记event交由父节点处理</span></div><div class="line">       <span class="keyword">if</span> (!result &amp;&amp; mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</div><div class="line">           mInputEventConsistencyVerifier.onUnhandledEvent(event, <span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_UP ||</div><div class="line">               actionMasked == MotionEvent.ACTION_CANCEL ||</div><div class="line">               (actionMasked == MotionEvent.ACTION_DOWN &amp;&amp; !result)) &#123;</div><div class="line">           stopNestedScroll();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>View的onTouchEvent()方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Implement this method to handle touch screen motion events.</div><div class="line">    * <span class="doctag">@return</span> True if the event was handled, false otherwise.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">float</span> x = event.getX();</div><div class="line">       <span class="keyword">final</span> <span class="keyword">float</span> y = event.getY();</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> action = event.getAction();</div><div class="line"></div><div class="line">       <span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class="line">           <span class="comment">//view如果是disabled状态，该view仍然消费该事件，但是不会做出UI的相应</span></div><div class="line">           <span class="keyword">return</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE</div><div class="line">                   || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</div><div class="line">                   || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (mTouchDelegate != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</div><div class="line">               (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE) ||</div><div class="line">               (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) &#123;</div><div class="line">           <span class="keyword">switch</span> (action) &#123;</div><div class="line">               <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                   ...</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                   ...</div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">                   ...</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                   ...</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>如果事件不被中断，整个事件流向是一个类U型图，我们来看下这张图，可能更能理解U型图的意思。</p>
</blockquote>
<p><img src="/hello-world/img/Utouchevent.png" alt="U型事件传递模型"><br><strong>注意</strong>：这张图只是一张事件的传递模型的示意图，事件传递的实际实现细节跟图中不太一致，但最终事件的传递方向是一致的。</p>
<p>通过代码我们注意到，每一层的dispatchtouchevent（）都是该层的事件的入口，在每一层的逻辑都大致遵循如下调用规则：</p>
<ul>
<li>dispatchtouchevent捕获到上层分发过来的事件</li>
<li>调用oninterceptTouchevent用来逻辑判断该事件是否需要在本层处理</li>
<li>如果oninterceptTouchevent 返回false，则调用下一层的viewtree的dispatchtouchevent（递归），子viewtree的返回结果会作为本层dispatchtouchevent的结果返回</li>
<li>如果oninterceptTouchevent返回true，则调用本层的ontouchevent方法</li>
<li>ontouchevent的逻辑处理结果会返回给dispatchtouchevent座位结果返回</li>
<li>最终本层的dispatchtouchevent的处理结果会返回给父view</li>
</ul>
<p>整个viewtree其实都是在按照同样的逻辑进行着层层的递归。<br>希望读者能够好好的把握一下代码和递归逻辑，这样在我们的view中就可以根据实际需要灵活使用时间分发、拦截和处理的三种接口，灵活的控制事件的传递和消费。</p>
<h3 id="ACTION-MOVE和ACTION-UP事件"><a href="#ACTION-MOVE和ACTION-UP事件" class="headerlink" title="ACTION_MOVE和ACTION_UP事件"></a>ACTION_MOVE和ACTION_UP事件</h3><p>我们上文中讲到的事件传递流程是ACTION_DOWN的处理流程。<br>由于ACTION_DOWN事件是touch事件的第一个事件，所以其处理流程会相对复杂。而后续的一系列其他事件，其处理逻辑收到ACTION_DOWN事件的处理结果的影响而更加的智能。系统不会傻傻的把前人走过的死路让后人再走一遍。换句话说，一旦ACTION_DOWN事件找到了target，后续的一些列事件就会直达target，而不会再分发往更底层进行逻辑迭代。<br>还是那句话，看图（再次感谢kelin童鞋做出了这么优雅的图片）：<br><img src="/hello-world/img/touchevent2.png" alt="ACTION_MOVE和ACTION_UP事件"></p>
<ul>
<li>红色的箭头代表ACTION_DOWN 事件的流向</li>
<li>蓝色的箭头代表ACTION_MOVE 和 ACTION_UP 事件的流向</li>
</ul>
<p>本篇是Glide框架及源码解析的第一篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/2016/08/25/%E5%9B%BE%E8%A7%A3Android%EF%BC%9A%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/" target="_blank" rel="external">原文链接</a>）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Android事件管理机制是一名专业Android研发工程师必须要了解的核心知识之一，深入了解一下该机制无论对我们日常开发还是找工作，乃至于对我们的架构思想都有很大的帮助。Android中我们用到的最多的事件是Input
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>跟着源码学设计：Glide框架及源码解析（四）</title>
    <link href="http://yoursite.com/2016/08/23/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2016/08/23/跟着源码学设计：Glide框架及源码解析（四）/</id>
    <published>2016-08-23T08:23:29.000Z</published>
    <updated>2016-08-27T07:55:24.639Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。<strong>学习小组QQ群</strong>: 193765960。</p>
<p>本篇是Glide框架及源码解析的第四篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Glide有帮助，还望大家多多转载。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<p><strong>往期文章：</strong></p>
<p><a href="https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">跟着源码学设计：Glide框架及源码解析（一）</a><br><a href="https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="external">跟着源码学设计：Glide框架及源码解析（二）</a><br><a href="https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/" target="_blank" rel="external">跟着源码学设计：Glide框架及源码解析（三）</a></p>
<p>在之前的文章中，我们已经知道了Glide请求是如何被加载到请求队列中并执行的，也了解了资源是如何管理的。本篇文章我们将探究一下资源是如何获取并分发的。</p>
<h3 id="资源请求和回调机制类图"><a href="#资源请求和回调机制类图" class="headerlink" title="资源请求和回调机制类图"></a>资源请求和回调机制类图</h3><p><img src="/hello-world/img/Engin.png" alt="资源请求和回调机制类图"></p>
<h3 id="request开启请求"><a href="#request开启请求" class="headerlink" title="request开启请求"></a>request开启请求</h3><p>request被加载到requestTracker中统一管理启动获取资源，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runRequest</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">  requests.add(request);</div><div class="line">  <span class="keyword">if</span> (!isPaused) &#123;</div><div class="line">  	request.begin();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">  	pendingRequests.add(request);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>request的执行从其begin()方法开始：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public void runRequest(Request request) &#123;</div><div class="line">  requests.add(request);</div><div class="line">  <span class="keyword">if</span> (!isPaused) &#123;</div><div class="line">  	request.begin();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">  	pendingRequests.add(request);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="获取Engin对象并封装任务"><a href="#获取Engin对象并封装任务" class="headerlink" title="获取Engin对象并封装任务"></a>获取Engin对象并封装任务</h3><ul>
<li>获取engine对象，在load()方法中创建EnginJob任务</li>
<li>为Enginjob创建异步线程EnginRunnable</li>
<li>为EnginRunnable初始化资源获取解析任务DecodJob<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T, Z, R&gt; <span class="function">LoadStatus <span class="title">load</span><span class="params">(Key signature, <span class="keyword">int</span> width, <span class="keyword">int</span> height, DataFetcher&lt;T&gt; fetcher,</span></span></div><div class="line">DataLoadProvider&lt;T, Z&gt; loadProvider, Transformation&lt;Z&gt; transformation, ResourceTranscoder&lt;Z, R&gt; transcoder,</div><div class="line">Priority priority, <span class="keyword">boolean</span> isMemoryCacheable, DiskCacheStrategy diskCacheStrategy, ResourceCallback cb) &#123;</div><div class="line"> </div><div class="line">  Util.assertMainThread();</div><div class="line">  <span class="keyword">long</span> startTime = LogTime.getLogTime();</div><div class="line"></div><div class="line">  <span class="keyword">final</span> String id = fetcher.getId();</div><div class="line">   </div><div class="line">  <span class="comment">//获取key</span></div><div class="line">  EngineKey key = keyFactory.buildKey(id, signature, width, height, loadProvider.getCacheDecoder(),</div><div class="line">  loadProvider.getSourceDecoder(), transformation, loadProvider.getEncoder(),</div><div class="line">  transcoder, loadProvider.getSourceEncoder());</div><div class="line"> </div><div class="line">  <span class="comment">//查找LruResourceCache</span></div><div class="line">  EngineResource&lt;?&gt; cached = loadFromCache(key, isMemoryCacheable);</div><div class="line">  <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</div><div class="line">    cb.onResourceReady(cached);</div><div class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">    	logWithTimeAndKey(<span class="string">"Loaded resource from cache"</span>, startTime, key);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">//查找ActiveResourceCache</span></div><div class="line">  EngineResource&lt;?&gt; active = loadFromActiveResources(key, isMemoryCacheable);</div><div class="line">  <span class="keyword">if</span> (active != <span class="keyword">null</span>) &#123;</div><div class="line">    cb.onResourceReady(active);</div><div class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">      logWithTimeAndKey(<span class="string">"Loaded resource from active resources"</span>, startTime, key);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">//任务排重</span></div><div class="line">  EngineJob current = jobs.get(key);</div><div class="line">  <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">    current.addCallback(cb);</div><div class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">    	logWithTimeAndKey(<span class="string">"Added to existing load"</span>, startTime, key);</div><div class="line">    &#125;</div><div class="line">  	<span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, current);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//创建EngineJob</span></div><div class="line">  EngineJob engineJob = engineJobFactory.build(key, isMemoryCacheable);</div><div class="line">   </div><div class="line">  <span class="comment">//创建DecodeJob:注意fetcher（数据加载器）</span></div><div class="line">  DecodeJob&lt;T, Z, R&gt; decodeJob = <span class="keyword">new</span> DecodeJob&lt;T, Z, R&gt;(key, width, height, fetcher, loadProvider, transformation,</div><div class="line">  transcoder, diskCacheProvider, diskCacheStrategy, priority);</div><div class="line">  </div><div class="line">  <span class="comment">//创建任务线程</span></div><div class="line">  EngineRunnable runnable = <span class="keyword">new</span> EngineRunnable(engineJob, decodeJob, priority);</div><div class="line">  </div><div class="line">  <span class="comment">//将任务加入管理队列</span></div><div class="line">  jobs.put(key, engineJob);</div><div class="line">  engineJob.addCallback(cb);</div><div class="line">  </div><div class="line">  <span class="comment">//启动任务</span></div><div class="line">  engineJob.start(runnable);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">  	logWithTimeAndKey(<span class="string">"Started new load"</span>, startTime, key);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, engineJob);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="执行任务获取数据并解析"><a href="#执行任务获取数据并解析" class="headerlink" title="执行任务获取数据并解析"></a>执行任务获取数据并解析</h3><ul>
<li><p>DecodJob通过数据获取器DataFetcher获取数据文件（流）<br>request被加载到requestTracker中统一管理启动获取资源，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//EngineRunnable的run()方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (isCancelled) &#123;</div><div class="line">  	<span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  Exception exception = <span class="keyword">null</span>;</div><div class="line">  Resource&lt;?&gt; resource = <span class="keyword">null</span>;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    resource = decode();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">    Log.v(TAG, <span class="string">"Exception decoding"</span>, e);</div><div class="line">    &#125;</div><div class="line">    exception = e;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (isCancelled) &#123;</div><div class="line">    <span class="keyword">if</span> (resource != <span class="keyword">null</span>) &#123;</div><div class="line">      resource.recycle();</div><div class="line">    &#125;</div><div class="line">  	<span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (resource == <span class="keyword">null</span>) &#123;</div><div class="line">  	onLoadFailed(exception);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">  	onLoadComplete(resource);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"> <span class="keyword">private</span> Resource&lt;?&gt; decode() <span class="keyword">throws</span> Exception &#123;</div><div class="line">   <span class="keyword">if</span> (isDecodingFromCache()) &#123;</div><div class="line">      <span class="keyword">return</span> decodeFromCache();</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> decodeFromSource();</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line">    </div><div class="line"> <span class="keyword">private</span> Resource&lt;?&gt; decodeFromSource() <span class="keyword">throws</span> Exception &#123;</div><div class="line"> 	<span class="keyword">return</span> decodeJob.decodeFromSource();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>数据解析器对data数据解析生成resource资源对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Resource&lt;T&gt; <span class="title">decodeSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Resource&lt;T&gt; decoded = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">long</span> startTime = LogTime.getLogTime();</div><div class="line">        <span class="comment">//数据加载器获取数据</span></div><div class="line">        <span class="keyword">final</span> A data = fetcher.loadData(priority);</div><div class="line">        <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">            logWithTimeAndKey(<span class="string">"Fetched data"</span>, startTime);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (isCancelled) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//data数据解析生成resource资源对象</span></div><div class="line">        decoded = decodeFromSourceData(data);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    	fetcher.cleanup();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> decoded;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//HttpUrlFetcher：网络资源加载器</span></div><div class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">loadData</span><span class="params">(Priority priority)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">return</span> loadDataWithRedirects(glideUrl.toURL(), <span class="number">0</span> <span class="comment">/*redirects*/</span>, <span class="keyword">null</span> <span class="comment">/*lastUrl*/</span>, glideUrl.getHeaders());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>resource资源进一步封装成为EnginResource对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Runnable的方法，在run()方法中调用</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onLoadComplete</span><span class="params">(Resource resource)</span> </span>&#123;</div><div class="line">	manager.onResourceReady(resource);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//manager.onResourceReady(resource)实际回调了Enginjob的接口实现</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(<span class="keyword">final</span> Resource&lt;?&gt; resource)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.resource = resource;</div><div class="line">  MAIN_THREAD_HANDLER.obtainMessage(MSG_COMPLETE, <span class="keyword">this</span>).sendToTarget();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过监听接口回传EnginResource对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleResultOnMainThread</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (isCancelled) &#123;</div><div class="line">    resource.recycle();</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cbs.isEmpty()) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Received a resource without any callbacks to notify"</span>);</div><div class="line">  &#125;</div><div class="line">  engineResource = engineResourceFactory.build(resource, isCacheable);</div><div class="line">  hasResource = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Hold on to resource for duration of request so we don't recycle it in the middle of notifying if it</span></div><div class="line">  <span class="comment">// synchronously released by one of the callbacks.</span></div><div class="line">  engineResource.acquire();</div><div class="line">  listener.onEngineJobComplete(key, engineResource);</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (ResourceCallback cb : cbs) &#123;</div><div class="line">    <span class="keyword">if</span> (!isInIgnoredCallbacks(cb)) &#123;</div><div class="line">      engineResource.acquire();</div><div class="line">      <span class="comment">//回传engineResource到request中，request获取到资源后开始刷新UI</span></div><div class="line">      cb.onResourceReady(engineResource);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Our request is complete, so we can release the resource.</span></div><div class="line">  engineResource.release();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>（本篇是Glide框架及源码解析的第四篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/2016/08/23/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E5%9B%9B%EF%BC%89/" target="_blank" rel="external">原文链接</a>）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。&lt;strong&gt;学习小组QQ群&lt;/strong&gt;: 193765960。&lt;/p&gt;
&lt;p&gt;本篇是Glid
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Glide" scheme="http://yoursite.com/tags/Glide/"/>
    
  </entry>
  
  <entry>
    <title>跟着源码学设计：Glide框架及源码解析（三）</title>
    <link href="http://yoursite.com/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2016/08/22/跟着源码学设计：Glide框架及源码解析（三）/</id>
    <published>2016-08-22T07:30:25.000Z</published>
    <updated>2016-08-27T07:55:46.094Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。<strong>学习小组QQ群</strong>: 193765960。</p>
<p>本篇是Glide框架及源码解析的第三篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Glide有帮助，还望大家多多转载。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<p><strong>往期文章：</strong></p>
<p><a href="https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">跟着源码学设计：Glide框架及源码解析（一）</a><br><a href="https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="external">跟着源码学设计：Glide框架及源码解析（二）</a></p>
<h3 id="Glide内存缓存机制"><a href="#Glide内存缓存机制" class="headerlink" title="Glide内存缓存机制"></a>Glide内存缓存机制</h3><p>在之前的两篇中我们剖析了Glide的生命周期绑定机制和Glide的请求管理机制。接下来按说应该讲到request实际请求资源并回调刷新界面这一块了，但是为了更好的理解Glide在这一块的设计，我先大致的讲一讲Glide的内存缓存和管理机制。<br>不同于其他常见网络加载框架只有LruCatch一种缓存机制，Glide内存为三块（非常牛逼巧妙的设计）：</p>
<ul>
<li>ActiveResourceCache：缓存当前正在使用的资源（注意是弱引用）</li>
<li>LruResourceCache： 缓存最近使用过但是当前未使用的资源，LRU算法</li>
<li>BitmapPool：缓存所有被释放的图片，内存复用，LRU算法</li>
</ul>
<p>注意：</p>
<ul>
<li>LruResourceCache和ActiveResourceCache设计是为了尽可能的资源复用</li>
<li>BitmapPool的设计目的是为了尽可能的内存复用</li>
</ul>
<p>说的比较抽象，是不是懵逼了？别急，上图：<br><img src="/hello-world/img/MemoryCacheManager.png" alt="Glide内存缓存及管理机制"></p>
<ul>
<li>当我们需要显示某个资源时，Glide会先去查找LruResourceCache，找到了则将资源从LruResourceCache移除加入到ActiveResourceCache；</li>
<li>LruResourceCache找不到资源则查找ActiveResourceCache。</li>
<li>如果在ActiveResourceCache也找不到合适的资源，则会根据加载策略从硬盘或者网络加载资源。</li>
<li>获取数据后Glide会从BitmapPool中找寻合适的可供内存复用的废弃recycled bitmap（找不到则会重新创建bitmap对象），然后刷新bitmap的数据。</li>
<li>bitmap被转换封装为Resource缓存入ActiveResourceCache和Request对象中。</li>
<li><p>Request的target会获取resource中引用的bitmap并展示。</p>
</li>
<li><p>当target的资源需要release时，resource会根据缓存策略被缓存到LruResourceCache，同时ActiveResourceCache中的弱引用会被删除。如果，该资源不能缓存到LruResourceCache，则资源将被recycle到BitmapPool。</p>
</li>
<li><p>当需要回收内存时（比如系统内存不足或者生命周期结束），LruResourceCache将根据LRU算法recycle一些resource到BitmapPool。</p>
</li>
<li>BitmapPool会根据缓存池的尺寸和recycled resource的缓存策略来缓存resource的bitmap。</li>
<li>BitmapPool会根据LRU算法和缓存池的尺寸来释放一些老旧资源。</li>
<li>当系统GC时，则会回收可回收的资源释放内存</li>
</ul>
<p>这样就完成了一个资源的完整的循环。</p>
<h3 id="BitmapPool的内存复用机制"><a href="#BitmapPool的内存复用机制" class="headerlink" title="BitmapPool的内存复用机制"></a>BitmapPool的内存复用机制</h3><p>知识储备：</p>
<ul>
<li>BitmapFactory.Options.inBitmap是AndroiD3.0新增的一个属性，如果设置了这个属性则会重用这个Bitmap的内存从而提升性能。</li>
<li>在SDK 11 -&gt; 18之间，重用的bitmap大小必须是一致的，例如给inBitmap赋值的图片大小为100-100，那么新申请的bitmap必须也为100-100才能够被重用。从SDK 19开始，新申请的bitmap大小必须小于或者等于已经赋值过的bitmap大小。</li>
<li>新申请的bitmap与旧的bitmap必须有相同的解码格式，例如大家都是8888的，如果前面的bitmap是8888，那么就不能支持4444与565格式的bitmap了</li>
</ul>
<h4 id="使用inbitmap前，内存占用情况"><a href="#使用inbitmap前，内存占用情况" class="headerlink" title="使用inbitmap前，内存占用情况"></a>使用inbitmap前，内存占用情况</h4><p><img src="/hello-world/img/inbitmap_null.png" alt="使用inbitmap前，内存占用情况"></p>
<h4 id="使用inbitmap后，内存占用情况"><a href="#使用inbitmap后，内存占用情况" class="headerlink" title="使用inbitmap后，内存占用情况"></a>使用inbitmap后，内存占用情况</h4><p><img src="/hello-world/img/inbitmap.png" alt="使用inbitmap后，内存占用情况"></p>
<p>下面看一下核心代码：Downsampler的downsampleWithSize()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Bitmap <span class="title">downsampleWithSize</span><span class="params">(MarkEnforcingInputStream is, RecyclableBufferedInputStream  bufferedStream,</span></span></div><div class="line">BitmapFactory.Options options, BitmapPool pool, <span class="keyword">int</span> inWidth, <span class="keyword">int</span> inHeight, <span class="keyword">int</span> sampleSize,</div><div class="line">DecodeFormat decodeFormat) &#123;</div><div class="line">  <span class="comment">// Prior to KitKat, the inBitmap size must exactly match the size of the bitmap we're decoding.</span></div><div class="line">  Bitmap.Config config = getConfig(is, decodeFormat);</div><div class="line">  options.inSampleSize = sampleSize;</div><div class="line">  options.inPreferredConfig = config;</div><div class="line">  <span class="keyword">if</span> ((options.inSampleSize == <span class="number">1</span> || Build.VERSION_CODES.KITKAT &lt;= Build.VERSION.SDK_INT) &amp;&amp; shouldUsePool(is)) &#123;</div><div class="line">    <span class="keyword">int</span> targetWidth = (<span class="keyword">int</span>) Math.ceil(inWidth / (<span class="keyword">double</span>) sampleSize);</div><div class="line">    <span class="keyword">int</span> targetHeight = (<span class="keyword">int</span>) Math.ceil(inHeight / (<span class="keyword">double</span>) sampleSize);</div><div class="line">    <span class="comment">// BitmapFactory will clear out the Bitmap before writing to it, so getDirty is safe.</span></div><div class="line">    setInBitmap(options, pool.getDirty(targetWidth, targetHeight, config));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> decodeStream(is, bufferedStream, options);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setInBitmap</span><span class="params">(BitmapFactory.Options options, Bitmap recycled)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (Build.VERSION_CODES.HONEYCOMB &lt;= Build.VERSION.SDK_INT) &#123;</div><div class="line">  	options.inBitmap = recycled;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="让我们先看一下我们最常见到的LruMemoryCache机制"><a href="#让我们先看一下我们最常见到的LruMemoryCache机制" class="headerlink" title="让我们先看一下我们最常见到的LruMemoryCache机制"></a>让我们先看一下我们最常见到的LruMemoryCache机制</h3><p><img src="/hello-world/img/NormalLruMemory.png" alt="ActiveResourceCache的设计"></p>
<ul>
<li>如图，当系统内存不足时，LruMemoryCache会根据LRU算法移除一些资源（bitmap）</li>
<li>针对移除的资源，系统在GC时会回收资源(bitmap)以释放内存</li>
<li>当应用再次需要次资源时，需要重新分配内存，重新对资源文件进行解析生成bitmap<br>1）这样会造成内存抖动；<br>2）比较耗费时间，影响流畅度（GC也比较频繁）</li>
</ul>
<h3 id="让我们再来看一下Glide的机制"><a href="#让我们再来看一下Glide的机制" class="headerlink" title="让我们再来看一下Glide的机制"></a>让我们再来看一下Glide的机制</h3><p><img src="/hello-world/img/GlideMemoryResourceCache.png" alt="ActiveResourceCache的设计"></p>
<ul>
<li>如图，当系统内存不足时，LruResourceCache会根据LRU算法移除一些资源（resource）到BitmapPool</li>
<li>到BitmapPool会根据LRU算法移除一些资源（bitmap）</li>
<li>当应用再次需要资源时，会优先复用到BitmapPool中的bitmap对象（复用其内存），只需刷新bitmap的像素数据<br>1）这样能有效地降低内存抖动；<br>2）由于很多情况下可以复用废弃bitmap的内存，因此避免了内存分配等造成的性能损耗，系统比较流畅<br>3）降低了系统GC的频率<br>4）LruResourceCache和BitmapPool中都是当前不在使用的资源，做整体的资源回收那叫一个酸爽。</li>
</ul>
<p>（本篇是Glide框架及源码解析的第三篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/" target="_blank" rel="external">原文链接</a>）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。&lt;strong&gt;学习小组QQ群&lt;/strong&gt;: 193765960。&lt;/p&gt;
&lt;p&gt;本篇是Glid
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Glide" scheme="http://yoursite.com/tags/Glide/"/>
    
  </entry>
  
  <entry>
    <title>跟着源码学设计：Glide框架及源码解析（二）</title>
    <link href="http://yoursite.com/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2016/08/22/跟着源码学设计：Glide框架及源码解析（二）/</id>
    <published>2016-08-22T02:04:12.000Z</published>
    <updated>2016-08-27T07:56:14.983Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。<strong>学习小组QQ群</strong>: 193765960。</p>
<p>本篇是Glide框架及源码解析的第二篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Glide有帮助，还望大家多多转载。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<p><strong>往期文章：</strong><br><a href="https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external"> 跟着源码学设计：Glide框架及源码解析（一）</a></p>
<h3 id="Request管理机制"><a href="#Request管理机制" class="headerlink" title="Request管理机制"></a>Request管理机制</h3><p>在上一篇中我们剖析了Glide的生命周期绑定机制，这一篇我们紧接着Glide的处理流程来学习一下Glide的请求管理机制。<br>我们先来看一下Glide的最简单的使用代码示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ImageView ivImage = (ImageView) findViewById(R.id.ivImage);</div><div class="line">Glide.with(ivImage.getContext()) <span class="comment">//获取RequestManager对象</span></div><div class="line">     .load(url); <span class="comment">//设置Request对象需要的资源链接</span></div><div class="line">     .into(ivImage); <span class="comment">//获取Request对象并绑定viewTarget -&gt; 发起网络请求</span></div></pre></td></tr></table></figure></p>
<p>该段代码十分简洁，但是内部实现的功能却十分的强大，比如：</p>
<ul>
<li>request的生命周期管理（如：退出或者隐藏了界面，需求就取消或暂停了）</li>
<li>viewTarget的生命周期管理</li>
<li>资源的复用和释放</li>
<li>灵活的配置（request的builder模式）</li>
</ul>
<p>针对这些问题，后面将会一一展开剖析。</p>
<h3 id="request及其生命周期管理"><a href="#request及其生命周期管理" class="headerlink" title="request及其生命周期管理"></a>request及其生命周期管理</h3><ul>
<li>通过上一篇的学习，我们知道了Glide内部生命周期接口为LifecycleListener</li>
<li>RequestManager具有生命周期（实现了LifecycleListener接口）</li>
<li>request由RequestManager的into()方法族获得</li>
<li>request的生命周期由RequestManager统一管理</li>
</ul>
<h3 id="RequestManager是如何生成request并管理request队列的？"><a href="#RequestManager是如何生成request并管理request队列的？" class="headerlink" title="RequestManager是如何生成request并管理request队列的？"></a>RequestManager是如何生成request并管理request队列的？</h3><p>老规矩，先上图：<br><img src="/hello-world/img/GlideRequestManager.png" alt="Glide请求管理机制类图"></p>
<ul>
<li>如图， RequestManager持有一个RequestTracker对象requestTracker。</li>
<li>requestTracker对象维护request的队列集合</li>
<li>RequestManager的load()函数用于获取GenericRequestBuilder对象（其实是子类对象）<ul>
<li>load()内部调用loadGeneric()方法，将requestTracker对象引用传递给GenericRequestBuilder类</li>
<li>load()实际调用GenericRequestBuilder.load()方法完成request的URL设置</li>
</ul>
</li>
<li>GenericRequestBuilder的into()方法是实际产生request和消费request的地方。<ul>
<li>GenericRequestBuilder的into(target)方法调用obtainReauest()获取到GenericRequest对象request，request与target相互绑定并被requestTracker维护。</li>
</ul>
</li>
</ul>
<p>下面看一下核心代码：GenericRequestBuilder的into(target)方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class="function">Y <span class="title">into</span><span class="params">(Y target)</span> </span>&#123;</div><div class="line">  Util.assertMainThread();</div><div class="line">  <span class="keyword">if</span> (target == <span class="keyword">null</span>) &#123;</div><div class="line">  	<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"You must pass in a non null Target"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (!isModelSet) &#123;</div><div class="line">  	<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"You must first set a model (try #load())"</span>);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//因为target和request是相互绑定的，所以考虑到复用的情景时，可以先获取一下request</span></div><div class="line">  Request previous = target.getRequest();</div><div class="line">   </div><div class="line">  <span class="comment">//previous != null说明target有复用，需要释放之前绑定的资源</span></div><div class="line">  <span class="comment">//注意：request内部是绑定了资源的，这里还没有讲到，先知道这回事，后面会讲</span></div><div class="line">  <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">//释放资源，防内存泄漏</span></div><div class="line">    <span class="comment">//这段代码是精华，需要好好体会：</span></div><div class="line">    <span class="comment">//Glidek肯定支持view的复用（对吧？），那么复用的view资源是如何绑定和释放的？</span></div><div class="line">    <span class="comment">//这里就是资源释放的地方（入口），资源在何时绑定会在后续的课程讲到。</span></div><div class="line">    previous.clear();</div><div class="line">    requestTracker.removeRequest(previous);</div><div class="line">    previous.recycle();</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="comment">//获取需求对象（对象绑定了target）</span></div><div class="line">  Request request = buildRequest(target);</div><div class="line">  <span class="comment">//target绑定需求</span></div><div class="line">  target.setRequest(request);</div><div class="line">  <span class="comment">//因为target具有生命周期，即实现了LifecycleListener方法，所以将其注册给ActivityFragmentLifecycle统一管理（不知道是啥的去看上一篇文章）</span></div><div class="line">  lifecycle.addListener(target);</div><div class="line">  <span class="comment">//将需求加入队列并执行需求</span></div><div class="line">  <span class="comment">//注意是单线程</span></div><div class="line">  requestTracker.runRequest(request);</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> target;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="request的生命周期管理："><a href="#request的生命周期管理：" class="headerlink" title="request的生命周期管理："></a>request的生命周期管理：</h3><ul>
<li>根据上文得知，request都被加入到requestTracker中来管理</li>
<li>requestTracker由RequestManager创建和管理</li>
<li>RequestManager具有生命周期</li>
</ul>
<p>下面让我们看看RequestManager在各个生命周期回调里都做了什么</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">	resumeRequests();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">	pauseRequests();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">	requestTracker.clearRequests();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseRequests</span><span class="params">()</span> </span>&#123;</div><div class="line">	Util.assertMainThread();</div><div class="line">	requestTracker.pauseRequests();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resumeRequests</span><span class="params">()</span> </span>&#123;</div><div class="line">	Util.assertMainThread();</div><div class="line">	requestTracker.resumeRequests();</div><div class="line">&#125;</div><div class="line"><span class="comment">//下面的两个回调其实和request的关系没有那么直接，先放在这里留个印象    </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTrimMemory</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</div><div class="line">	glide.trimMemory(level);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLowMemory</span><span class="params">()</span> </span>&#123;</div><div class="line">	glide.clearMemory();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 代码很清楚了吧。细心的同学可能注意到了onTrimMemory(int level)和onLowMemory()，这俩货是系统在资源不足时调用的，说白了就是释放内存，具体怎么搞得，后续文章会专门讲到Glide的内存管理机制（也是精华）</p>
<p>最后让我们看看requestTracker都干啥了吧</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTracker</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Request&gt; requests = Collections.newSetFromMap(<span class="keyword">new</span> WeakHashMap&lt;Request, Boolean&gt;());</div><div class="line"></div><div class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"MismatchedQueryAndUpdateOfCollection"</span>)</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Request&gt; pendingRequests = <span class="keyword">new</span> ArrayList&lt;Request&gt;();</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> isPaused;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">  * Starts tracking the given request.</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runRequest</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">    requests.add(request);</div><div class="line">    <span class="keyword">if</span> (!isPaused) &#123;</div><div class="line">    	request.begin();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">   		pendingRequests.add(request);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// Visible for testing.</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addRequest</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">  	requests.add(request);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">  * Stops tracking the given request.</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeRequest</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">  	requests.remove(request);</div><div class="line">  	pendingRequests.remove(request);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">  * Returns &#123;<span class="doctag">@code</span> true&#125; if requests are currently paused, and &#123;<span class="doctag">@code</span> false&#125; otherwise.</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPaused</span><span class="params">()</span> </span>&#123;</div><div class="line">  	<span class="keyword">return</span> isPaused;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">  * Stops any in progress requests.</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseRequests</span><span class="params">()</span> </span>&#123;</div><div class="line">    isPaused = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">for</span> (Request request : Util.getSnapshot(requests)) &#123;</div><div class="line">      <span class="keyword">if</span> (request.isRunning()) &#123;</div><div class="line">      	request.pause();</div><div class="line">      	pendingRequests.add(request);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">  * Starts any not yet completed or failed requests.</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resumeRequests</span><span class="params">()</span> </span>&#123;</div><div class="line">    isPaused = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">for</span> (Request request : Util.getSnapshot(requests)) &#123;</div><div class="line">      <span class="keyword">if</span> (!request.isComplete() &amp;&amp; !request.isCancelled() &amp;&amp; !request.isRunning()) &#123;</div><div class="line">      	request.begin();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    pendingRequests.clear();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">  * Cancels all requests and clears their resources.</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearRequests</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Request request : Util.getSnapshot(requests)) &#123;</div><div class="line">    	request.clear();</div><div class="line">    &#125;</div><div class="line">    pendingRequests.clear();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">  * Restarts failed requests and cancels and restarts in progress requests.</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restartRequests</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Request request : Util.getSnapshot(requests)) &#123;</div><div class="line">      <span class="keyword">if</span> (!request.isComplete() &amp;&amp; !request.isCancelled()) &#123;</div><div class="line">        <span class="comment">// Ensure the request will be restarted in onResume.</span></div><div class="line">        request.pause();</div><div class="line">        <span class="keyword">if</span> (!isPaused) &#123;</div><div class="line">          request.begin();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          pendingRequests.add(request);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（本篇是Glide框架及源码解析的第二篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">原文链接</a>）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。&lt;strong&gt;学习小组QQ群&lt;/strong&gt;: 193765960。&lt;/p&gt;
&lt;p&gt;本篇是Glide框架及
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Glide" scheme="http://yoursite.com/tags/Glide/"/>
    
  </entry>
  
</feed>
