<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello World!</title>
  <subtitle>Android 技术图谱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-03T04:06:04.491Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>行者</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 在H5加载完成前显示加载进度条2</title>
    <link href="http://yoursite.com/2017/04/03/Android-%E5%9C%A8H5%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%E5%89%8D%E6%98%BE%E7%A4%BA%E5%8A%A0%E8%BD%BD%E8%BF%9B%E5%BA%A6%E6%9D%A12/"/>
    <id>http://yoursite.com/2017/04/03/Android-在H5加载完成前显示加载进度条2/</id>
    <published>2017-04-03T05:16:56.000Z</published>
    <updated>2017-04-03T04:06:04.491Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>在之前的违章中，我曾经给出了一种控制进度条显示和消失时机的方式。经过实际的测试发现，很多情况下然并卵。于是乎又有了本篇，虽然还不够完美，但是写出来给大家提供个思路。<br><a href="https://xiaodanchen.github.io/2016/10/30/Android%E5%9C%A8H5%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%E5%89%8D%E6%98%BE%E7%A4%BA%E5%8A%A0%E8%BD%BD%E8%BF%9B%E5%BA%A6%E6%9D%A1/" target="_blank" rel="external">《Android在H5加载完成前显示加载进度条》</a></p>
<p>欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="实现方案："><a href="#实现方案：" class="headerlink" title="实现方案："></a>实现方案：</h3><p>其实在采用最终方案前，坐着还使用了另一种方案，本来不想写出来，但是现在想想，那也是一种可以优化的方向，所以还是说一说吧，暂且称为方案1。</p>
<h4 id="方案1：监测WebView的绘制高度"><a href="#方案1：监测WebView的绘制高度" class="headerlink" title="方案1：监测WebView的绘制高度"></a>方案1：监测WebView的绘制高度</h4><p>监听WebView的绘制高度，设定一个阈值，当达到阈值后取消加载进度条的显示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义WebView,重写OnDraw方法：示例代码</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebpView</span> <span class="keyword">extends</span> <span class="title">WebView</span> </span>&#123;</div><div class="line">  <span class="comment">//自定义接口，用来回调控制进度条的显示和取消</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProgressListener</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onShowLoading</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onCancelLoading</span><span class="params">()</span></span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> ProgressListener mLinstner;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> setProgressListener（ProgressListener listener）&#123;</div><div class="line">    mLinstner = listener;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        <span class="comment">//获取当前绘制的高度</span></div><div class="line">        curHelght = canvas.getHeight();</div><div class="line">        <span class="comment">//如果当前绘制的高度超过屏幕高度的70%,则取消进度条显示</span></div><div class="line">        <span class="keyword">if</span>(curHelght&gt;screenHeight*<span class="number">0.7</span>)&#123;</div><div class="line">          <span class="keyword">if</span>(<span class="keyword">null</span> != mLinstner)&#123;</div><div class="line">            mLinstner.onCancelLoading();</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方案1存在一个问题：<br>如果我们需要加载的H5完整的高度本来就小于我们设定的阈值，进度条取消的回调不会被触发的。<br>所以我进一步思考，灵光乍现，有了方案2。<br>方案1有个可以探索的方向：如果可以有办法获取H5 UI的高度，则可以根据H5的高度为基准来控制显示，但是可能H5的高度很难后者没有方法获取，所以这种思路不太具有普适价值。</p>
<h4 id="方案2：监测WebView的绘制是否停止"><a href="#方案2：监测WebView的绘制是否停止" class="headerlink" title="方案2：监测WebView的绘制是否停止"></a>方案2：监测WebView的绘制是否停止</h4><p>以一定的时间跨度去检测WebView是否仍在绘制，来判读是否需要取消进度条的显示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果发现500毫秒内，WebView没有绘制，则取消进度条显示</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebpView</span> <span class="keyword">extends</span> <span class="title">WebView</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WebpView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WebpView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(context, attrs);</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WebpView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(context);</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="keyword">private</span> OnLoadFinishListener mOnLoadFinishListener;</div><div class="line">	<span class="keyword">private</span> Handler mHandler;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">long</span> lasttime;</div><div class="line">	<span class="keyword">private</span> Runnable mdelay = <span class="keyword">new</span> Runnable()&#123;    </div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	    	<span class="keyword">if</span>(System.currentTimeMillis() - lasttime &gt;<span class="number">500</span>)&#123;</div><div class="line">	    		<span class="keyword">if</span>(mOnLoadFinishListener!= <span class="keyword">null</span>)&#123;</div><div class="line">	                mOnLoadFinishListener.onLoadFinish();</div><div class="line">	            &#125;</div><div class="line">	    	&#125;</div><div class="line">	    &#125;    </div><div class="line">	 &#125;;</div><div class="line"> </div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnLoadFinishListener</span></span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFinish</span><span class="params">()</span></span>;</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnLoadFinishListener</span><span class="params">(OnLoadFinishListener onLoadFinishListener)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mOnLoadFinishListener = onLoadFinishListener;</div><div class="line">    &#125;</div><div class="line">	 </div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        lasttime = System.currentTimeMillis();</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == mHandler)&#123;</div><div class="line">        	mHandler = <span class="keyword">new</span> Handler();</div><div class="line">        &#125;</div><div class="line">		mHandler.postDelayed(mdelay, <span class="number">550</span>);</div><div class="line">    &#125;</div><div class="line">	 </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onAttachedToWindow();</div><div class="line">		mHandler = getHandler();</div><div class="line">        <span class="keyword">if</span>(mHandler == <span class="keyword">null</span>)&#123;</div><div class="line">        	mHandler = <span class="keyword">new</span> Handler();</div><div class="line">        &#125;</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(mHandler != <span class="keyword">null</span>)&#123;</div><div class="line">        	mHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</div><div class="line">        	mHandler = <span class="keyword">null</span>;</div><div class="line">        	mdelay = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">		 </div><div class="line">		<span class="keyword">if</span>(mOnLoadFinishListener!= <span class="keyword">null</span>)&#123;</div><div class="line">            mOnLoadFinishListener.onLoadFinish();</div><div class="line">            mOnLoadFinishListener = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">		<span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方案2也并不完美，比如当网络不好的时候，延时超过500毫秒的时候，我们的加载进度条仍然会消失。但是相比其他方案，已经精准多了。<br>若果想要解决网络延时下的加载显示问题，可能还得进一步优化，这个如果我以后做了这方面的工作，会再写文章做进一步的补充。</p>
<p>看到这篇文章的小伙伴们，如果你们有更加好的方案，请在尽情鄙视作者的同时记得加QQ群分享一下方案啊，这样你喊我LOW B我也很开心。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;在之前的违章中，我曾经给出了一种控制进度条显示和消失时机的方式。经过实际的测试发现，很多情况下然并卵。于是乎又有了本篇，虽然还不够完美，但是写出来给大家提供个思路。&lt;br&gt;&lt;a href=&quot;https://xiaodanchen
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/categories/Android/HTML/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Android 设计模式：（七）策略模式</title>
    <link href="http://yoursite.com/2016/12/12/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%EF%BC%88%E4%B8%83%EF%BC%89%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/12/12/Android-设计模式：（七）策略模式/</id>
    <published>2016-12-12T03:20:26.000Z</published>
    <updated>2016-12-12T08:39:45.730Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>本文是对<strong>《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社</strong>所做的读书笔记。文章是对本书的一些列学习笔记，如若有侵犯到作者权益，还望作者能联系我，我会及时下架。<br>这本书不错，有兴趣的同学可以买原书看看。<br>感兴趣的朋友欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h2 id="1-策略模式的定义"><a href="#1-策略模式的定义" class="headerlink" title="1. 策略模式的定义"></a><strong>1. 策略模式的定义</strong></h2><p>假如在开发中遇到下列情况：</p>
<ul>
<li>针对同一问题有多重处理方式，他们仅仅是具体行为有差别。</li>
<li>需要安全的封装多种同一类型的操作。</li>
<li>同一个抽象类有多个子类，而子类的使用又是互斥的。</li>
</ul>
<p>遇到上述几种情况时，我们可以使用策略模式。策略模式定义了一系列的算法，并将每一个算法封装起来，而且使他们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。</p>
<h2 id="2-策略模式的实现"><a href="#2-策略模式的实现" class="headerlink" title="2. 策略模式的实现"></a><strong>2. 策略模式的实现</strong></h2><p>通常如果一个问题有多个解决方案时，最简单的方法就是利用if-else或者switch语句方式根据不同的情景选择不同的解决方案，但这种简单的方案问题太多，例如耦合性太高、代码臃肿、难于维护等。而且违反开闭原则，而应对这种情况策略模式是很好的选择。<br>举个栗子：假如我们要设计一个出行交通工具(公交车、地铁)计费模块。</p>
<h3 id="2-1-屌丝程序猿小明"><a href="#2-1-屌丝程序猿小明" class="headerlink" title="2.1 屌丝程序猿小明"></a><strong>2.1 屌丝程序猿小明</strong></h3><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 价格计算器类</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriceCalculator</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUS = <span class="number">1</span>;<span class="comment">//公交车类型</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUBWAY = <span class="number">2</span>;<span class="comment">//地铁类型</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    PriceCalculator calculator =  <span class="keyword">new</span> PriceCalculator();</div><div class="line">    System.out.println(<span class="string">"坐16公里的公交车票价为："</span>+calculator.calculatePrice(<span class="number">16</span>,BUS));</div><div class="line">    </div><div class="line">    System.out.println(<span class="string">"坐16公里的地铁票价为："</span>+calculator.calculatePrice(<span class="number">16</span>,SUBWAY));</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">  * 公交车，十公里之内1元，超过十公里后没加一元钱可以乘车公里。</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">busPrice</span><span class="params">(<span class="keyword">int</span> km)</span></span>&#123;</div><div class="line">    <span class="comment">//超过10公里的中国</span></div><div class="line">    <span class="keyword">int</span> extraTotal = km-<span class="number">10</span>;</div><div class="line">    <span class="comment">//超过的距离是5公里的倍数</span></div><div class="line">    <span class="keyword">int</span> extraFactor = extraTotal/<span class="number">5</span>；</div><div class="line">    <span class="comment">//超过的距离对5公里取余</span></div><div class="line">    <span class="keyword">int</span> fraction = extraTotal%<span class="number">5</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//计算价格</span></div><div class="line">    <span class="keyword">int</span> price = <span class="number">1</span>+extraFactor*<span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> fraction&gt;<span class="number">0</span>?++price:price;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">  * 地铁，6公里（含）之内3元，6~12公里（含）4元，</div><div class="line">  * 12~22公里（含）5元，22~32公里（含）6元，。</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">subwayPrice</span><span class="params">(<span class="keyword">int</span> km)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(km&lt;=<span class="number">6</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(km&gt;<span class="number">6</span> &amp;&amp; km&lt;=<span class="number">12</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(km&gt;<span class="number">12</span> &amp;&amp; km&lt;=<span class="number">22</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(km&gt;<span class="number">22</span> &amp;&amp; km&lt;=<span class="number">32</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">6</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">7</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">calculatePrice</span><span class="params">(<span class="keyword">int</span> km,<span class="keyword">int</span> type)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(type == BUS)&#123;</div><div class="line">      <span class="keyword">return</span> busPrice(km);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == SUBWAY)&#123;</div><div class="line">      <span class="keyword">return</span> subwayPrice(km);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>首先，PriceCalculator类很明显的问题就是违反了单一职责原则，他承担了计算公交车和地铁乘车价格的职责。<br>其次，PriceCalculator类违反了开闭原则，通过if-else语句的形式来判断使用哪种计算方式，当我们增加一种出行方式时比如出租车，我们就需要在PriceCalculator类中增加一个方法来计算出租车出行的价格，并且需要在calculatePrice方法中增加新的条件分支。</p>
<p>这样随着业务的复杂，这个代码会越来越臃肿，难以维护。</p>
<h3 id="2-2-装逼程序猿小民"><a href="#2-2-装逼程序猿小民" class="headerlink" title="2.2 装逼程序猿小民"></a><strong>2.2 装逼程序猿小民</strong></h3><p>小民采用策略模式来设计该功能</p>
<h4 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 计价策略接口</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CalculateStrategy</span></span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">  * 按距离计算价格</div><div class="line">  * <span class="doctag">@param</span> km 距离</div><div class="line">  * <span class="doctag">@return</span> 价格</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">calculatePrice</span><span class="params">(<span class="keyword">int</span> km)</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 公交车计价策略</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusStrategy</span> <span class="keyword">implements</span> <span class="title">CalculateStrategy</span></span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">  * 公交车，十公里之内1元，超过十公里后没加一元钱可以乘车公里。</div><div class="line">  */</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculatePrice</span><span class="params">(<span class="keyword">int</span> km)</span></span>&#123;</div><div class="line">    <span class="comment">//超过10公里的中国</span></div><div class="line">    <span class="keyword">int</span> extraTotal = km-<span class="number">10</span>;</div><div class="line">    <span class="comment">//超过的距离是5公里的倍数</span></div><div class="line">    <span class="keyword">int</span> extraFactor = extraTotal/<span class="number">5</span>；</div><div class="line">    <span class="comment">//超过的距离对5公里取余</span></div><div class="line">    <span class="keyword">int</span> fraction = extraTotal%<span class="number">5</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//计算价格</span></div><div class="line">    <span class="keyword">int</span> price = <span class="number">1</span>+extraFactor*<span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> fraction&gt;<span class="number">0</span>?++price:price;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 地铁计价策略</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusStrategy</span> <span class="keyword">implements</span> <span class="title">CalculateStrategy</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">  * 地铁，6公里（含）之内3元，6~12公里（含）4元，</div><div class="line">  * 12~22公里（含）5元，22~32公里（含）6元，。</div><div class="line">  */</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculatePrice</span><span class="params">(<span class="keyword">int</span> km)</span></span>&#123; </div><div class="line">    <span class="keyword">if</span>(km&lt;=<span class="number">6</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(km&gt;<span class="number">6</span> &amp;&amp; km&lt;=<span class="number">12</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(km&gt;<span class="number">12</span> &amp;&amp; km&lt;=<span class="number">22</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(km&gt;<span class="number">22</span> &amp;&amp; km&lt;=<span class="number">32</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">6</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">7</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 价格计算器类</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriceCalculator</span></span>&#123;</div><div class="line">  CalculateStrategy mStrategy;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    PriceCalculator calculator =  <span class="keyword">new</span> PriceCalculator();</div><div class="line">    <span class="comment">//设置计价策略</span></div><div class="line">    calculator.setStrategy(<span class="keyword">new</span> BusStrategy());</div><div class="line">    System.out.println(<span class="string">"坐16公里的公交车票价为："</span>+calculatePrice(<span class="number">16</span>));</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(CalculateStrategy strategy;)</span></span>&#123;</div><div class="line">    mStrategy = strategy</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculatePrice</span><span class="params">(<span class="keyword">int</span> km)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == mStrategy)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> mStrategy.calculatePrice(km);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h4><p>经过上面的重构之后，去掉了各种各样的if-else语句，结构变得更加清晰。<br>不同的策略封装符合单一职责原则。<br>PriceCalculator的实际调用符合开闭原则和依赖注入原则，便于扩展。</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a><strong>3. 总结</strong></h2><p>策略模式主要用来分离算法，在相同的行为抽象下有不同的具体实现策略。这个模式很好的演示了开闭原则，也就是定义抽象，注入不同的实现，从而达到很好的可扩展性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;本文是对&lt;strong&gt;《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社&lt;/strong&gt;所做的读书笔记。文章是对本书的一些列学习笔记，如若有侵犯到作者权益，还望作者能联系我，我会及时下架。&lt;br&gt;这
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Android/Java/"/>
    
      <category term="架构师" scheme="http://yoursite.com/categories/Android/Java/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android 设计模式：（六）抽象工厂模式</title>
    <link href="http://yoursite.com/2016/12/11/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%EF%BC%88%E5%85%AD%EF%BC%89%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/12/11/Android-设计模式：（六）抽象工厂模式/</id>
    <published>2016-12-11T08:46:28.000Z</published>
    <updated>2016-12-11T10:08:05.470Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>本文是对<strong>《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社</strong>所做的读书笔记。文章是对本书的一些列学习笔记，如若有侵犯到作者权益，还望作者能联系我，我会及时下架。<br>这本书不错，有兴趣的同学可以买原书看看。<br>感兴趣的朋友欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h2 id="1-抽象工厂模式的定义"><a href="#1-抽象工厂模式的定义" class="headerlink" title="1. 抽象工厂模式的定义"></a><strong>1. 抽象工厂模式的定义</strong></h2><p>为创建一组相关或者相互依赖的对象提供一个接口。（生产某款产品的零部件）</p>
<h2 id="2-抽象工厂模式的实现"><a href="#2-抽象工厂模式的实现" class="headerlink" title="2. 抽象工厂模式的实现"></a><strong>2. 抽象工厂模式的实现</strong></h2><p>上一篇讲到，小明开了个Audi车组装工厂。随着小明生意越做越大，安奈不住骚动的心的小明，开始向产品上游伸手，丫的要自己生产汽车零配件！<br>但是谈何容易, Audi的Q3，Q5，Q7使用的零件各不相同，这可愁坏了小明。没办法，只能再找找小民帮忙拿主意了。最终小民给出了终极解决方案：抽象工厂模式。<br>按照小民的设计，小明开办了3个零件工厂：Q3零部件工厂、Q5零部件工厂、Q7零部件工厂。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>假设小明的零件工厂要生产三类产品：轮胎、发动机、制动系统。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 抽象零件:轮胎</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITire</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tire</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 抽象零件:发动机</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IEngine</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">engine</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 抽象零件:刹车系统</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBrake</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brake</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 抽象零件工厂</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span></span>&#123;</div><div class="line">  <span class="comment">//生产轮胎</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ITire <span class="title">createTire</span><span class="params">()</span></span>;</div><div class="line">  <span class="comment">//生产发动机</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> IEngine <span class="title">createEngine</span><span class="params">()</span></span>;</div><div class="line">  <span class="comment">//生产制动系统</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> IBrake <span class="title">createBrake</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以Q3汽车零件生产厂为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Q3车胎生产</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Q3Tire</span> <span class="keyword">implements</span> <span class="title">ITire</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tire</span><span class="params">()</span></span>&#123;...&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Q3发动机生产</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Q3Engine</span> <span class="keyword">implements</span>  <span class="title">IEngine</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">engine</span><span class="params">()</span></span>&#123;...&#125;;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"> <span class="comment">//Q3刹车系统生产</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Q3Brake</span> <span class="keyword">implements</span>  <span class="title">IBrake</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brake</span><span class="params">()</span></span>&#123;...&#125;;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* Q3零件工厂</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Q3Factory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</div><div class="line">  <span class="comment">//生产轮胎</span></div><div class="line">  <span class="function"><span class="keyword">public</span> ITire <span class="title">createTire</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Q3Tire();</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//生产发动机</span></div><div class="line">  <span class="function"><span class="keyword">public</span> IEngine <span class="title">createEngine</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Q3Engine();</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//生产制动系统</span></div><div class="line">  <span class="function"><span class="keyword">public</span> IBrake <span class="title">createBrake</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Q3Brake();</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>零件工厂建好了，开足马力投产吧<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    <span class="comment">//构建Q3工厂</span></div><div class="line">    AbstractFactory factory = <span class="keyword">new</span> Q3Factory();</div><div class="line">    <span class="comment">//生产Q3的零件</span></div><div class="line">    factory.createTire().tire();</div><div class="line">    factory.createEngine().engine();</div><div class="line">    factory.createBrake().brake();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>每增加一个产品工厂，就要创建一堆的产品零件类，如果工厂类过多，那么就会导致类文件非常多。所以在实际开发中，抽象工厂模式的运用要权衡</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a><strong>3. 总结</strong></h2><p>优点：<br>接口与实现分离,客户端使用抽象工厂来生产产品，生产过程完全面向接口，不需要知道具体实现。<br>缺点：<br>工厂类增加很多，类文件会增加很多。不太容易扩展新的产品类。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;本文是对&lt;strong&gt;《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社&lt;/strong&gt;所做的读书笔记。文章是对本书的一些列学习笔记，如若有侵犯到作者权益，还望作者能联系我，我会及时下架。&lt;br&gt;这
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Android/Java/"/>
    
      <category term="架构师" scheme="http://yoursite.com/categories/Android/Java/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android 设计模式：（五）工厂方法模式</title>
    <link href="http://yoursite.com/2016/12/11/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%EF%BC%88%E4%BA%94%EF%BC%89%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/12/11/Android-设计模式：（五）工厂方法模式/</id>
    <published>2016-12-11T07:16:56.000Z</published>
    <updated>2016-12-11T09:19:19.984Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>本文是对<strong>《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社</strong>所做的读书笔记。文章是对本书的一些列学习笔记，如若有侵犯到作者权益，还望作者能联系我，我会及时下架。<br>这本书不错，有兴趣的同学可以买原书看看。<br>感兴趣的朋友欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h2 id="1-工厂方法模式的定义"><a href="#1-工厂方法模式的定义" class="headerlink" title="1. 工厂方法模式的定义"></a><strong>1. 工厂方法模式的定义</strong></h2><p>定义一个<strong>用于创建对象的接口</strong>，让子类决定实例化那个类。（将零部件组装成不同的产品）</p>
<h2 id="2-工厂方法模式的实现"><a href="#2-工厂方法模式的实现" class="headerlink" title="2. 工厂方法模式的实现"></a><strong>2. 工厂方法模式的实现</strong></h2><p>先说明两个接口：<strong>抽象产品类</strong>和<strong>抽象工厂类</strong>。<br>抽象产品类：定义了产品族，同一产品组的产品具有相似的功能，因此可以使用同一个产品线。<br>抽象工厂类：定义了产品线</p>
<h3 id="2-1-厂长小明的幸福人生"><a href="#2-1-厂长小明的幸福人生" class="headerlink" title="2.1 厂长小明的幸福人生"></a><strong>2.1 厂长小明的幸福人生</strong></h3><p>屌丝程序员小明，越来越觉得自己没有写代码的天赋，一狠心开办了一家汽车厂，主要负责Audi某种车型的组装，比如Q3、Q5、Q7，于是乎小明找到了技术界的装逼高手小民帮忙给他设计了汽车厂流水线。<br>由于Q3、Q5、Q7这类车型，因为内部结构差异并不大，所以一条生产线足以应付这3种车型，小民于是采用了工厂方法模式，开玩笑的说<strong>我们不生产零件，我们只是零件的组装工</strong>。</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 抽象产品类:定义该类产品的功能</div><div class="line">* 奥迪车</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiCar</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;<span class="comment">//汽车可以行使</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">selfNavigation</span><span class="params">()</span></span>;<span class="comment">//汽车可以自动巡航</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 抽象工厂类:定义生产某类产品产品线</div><div class="line">* 奥迪生产线</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiFactory</span></span>&#123;</div><div class="line">  <span class="comment">//生产Audi类车</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T extends AudiCar&gt; <span class="function">T <span class="title">createCar</span><span class="params">(Class&lt;T&gt; clz)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>产品的具体类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Q3</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiQ3</span> <span class="keyword">extends</span> <span class="title">AudiCar</span></span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* Q3</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiQ5</span> <span class="keyword">extends</span> <span class="title">AudiCar</span></span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* Q3</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiQ7</span> <span class="keyword">extends</span> <span class="title">AudiCar</span></span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>建成流水线<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiCarFactory</span> <span class="keyword">extends</span> <span class="title">AudiFactory</span></span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="keyword">public</span> &lt;T extends AudiCar&gt; <span class="function">T <span class="title">createCar</span><span class="params">(Class&lt;T&gt; clz)</span></span>&#123;</div><div class="line">    AudiCar car = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">      car = (AudiCar)Class.forName(clz.getName()).newInstance();</div><div class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (T)car;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>成产<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</div><div class="line">    <span class="comment">//引进流水线</span></div><div class="line">    AudiFactory factory = <span class="keyword">new</span> AudiCarFactory();</div><div class="line">    <span class="comment">//接收订单</span></div><div class="line">    Class&lt;? extends AudiCar&gt;[] orders = <span class="keyword">new</span> Class&lt;&gt;[]&#123;AudiQ3.class,AudiQ5.class,AudiQ5.class,AudiQ3.calss,AudiQ7.calss&#125;;</div><div class="line">    <span class="comment">//生产</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,size=orders.lenth; i&lt;size; i++)&#123;</div><div class="line">      AudiCar car = (AudiCar)factory.createCar(orders[i]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>工厂方法模式：根据具体产品的类型，构建对应的产品线，生产出对应的产品。<br>工厂方法模式生产的是一类产品组：例如Audi某型号车的不同车款（入门级，舒适级，豪华级，至尊级）。正如上文对工厂模式的解释，<strong>我们不生产零件，我们只是零件的组装工</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;本文是对&lt;strong&gt;《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社&lt;/strong&gt;所做的读书笔记。文章是对本书的一些列学习笔记，如若有侵犯到作者权益，还望作者能联系我，我会及时下架。&lt;br&gt;这
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Android/Java/"/>
    
      <category term="架构师" scheme="http://yoursite.com/categories/Android/Java/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android 设计模式：（四）原型模式</title>
    <link href="http://yoursite.com/2016/12/11/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%EF%BC%88%E5%9B%9B%EF%BC%89%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/12/11/Android-设计模式：（四）原型模式/</id>
    <published>2016-12-11T02:38:38.000Z</published>
    <updated>2016-12-11T07:10:23.305Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>本文是对<strong>《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社</strong>所做的读书笔记。文章是对本书的一些列学习笔记，如若有侵犯到作者权益，还望作者能联系我，我会及时下架。<br>这本书不错，有兴趣的同学可以买原书看看。<br>感兴趣的朋友欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h2 id="1-原型模式的定义"><a href="#1-原型模式的定义" class="headerlink" title="1. 原型模式的定义"></a><strong>1. 原型模式的定义</strong></h2><p>原型模式：对一个对象，通过<strong>克隆</strong>生成其副本，而不是通过new 的方式重新生成。<br>使用场景：</p>
<ul>
<li>类初始化需要消耗非常多的资源，包括数据、硬件资源等。通过克隆的方式，可以避免这些消耗。</li>
<li>通过new 产生一个对象需要非常繁琐的数据准备或者访问权限，这时可以使用原型模式。</li>
<li>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其数据时，可以用原型模式拷贝多个对象供调用者使用，即保护性拷贝。</li>
<li>一个对象，如果要求在某些对象中不允许对其修改，则可以使用原型模式，对其进行保护性拷贝，这样，无论对备份怎么修改都不会影响原型数据。</li>
</ul>
<h2 id="2-原型模式的实现"><a href="#2-原型模式的实现" class="headerlink" title="2. 原型模式的实现"></a><strong>2. 原型模式的实现</strong></h2><p>在开发中，我们有时会满足一些需求，就是有的对象中的数据只允许客户端读取，而不允许修改。例如，用户登录信息，只允许在用户登录模块修改，在其他模块比如登录校验、个人信息显示等模块，用户数信息不允许修改。让我们看看该如何实现：</p>
<h3 id="2-1-屌丝程序员小明"><a href="#2-1-屌丝程序员小明" class="headerlink" title="2.1 屌丝程序员小明"></a><strong>2.1 屌丝程序员小明</strong></h3><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 用户实体类</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> age;</div><div class="line">  <span class="keyword">public</span> String name;</div><div class="line">  <span class="keyword">public</span> String phone;</div><div class="line">  <span class="keyword">public</span> Address address;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 用户地址类</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> String city;<span class="comment">//城市</span></div><div class="line">  <span class="keyword">public</span> String district;<span class="comment">//区</span></div><div class="line">  <span class="keyword">public</span> String street;<span class="comment">//街道</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">(String city,String district,String street)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.city = city;</div><div class="line">    <span class="keyword">this</span>.district = district;</div><div class="line">    <span class="keyword">this</span>.street = street;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 登录接口</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Login</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 登录实现</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginImpl</span> <span class="keyword">implements</span> <span class="title">Login</span></span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</div><div class="line">    User user = <span class="keyword">new</span> User();</div><div class="line">    <span class="comment">//登录服务器获取用户信息，将信息赋值给user</span></div><div class="line">    user.age = <span class="number">22</span>;</div><div class="line">    user.name = <span class="string">"xiaoming"</span></div><div class="line">    user.address = <span class="keyword">new</span> Address(<span class="string">"北京市"</span>,<span class="string">"海淀区"</span>,<span class="string">"花园东路"</span>);</div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="comment">//用户信息获取到后，将用户信息设置到Session中（单例模式）</span></div><div class="line">    LoginSession.getLoginSession().setLoginedUser(user);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 登录Session:单例模式</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginSession</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> LoginSession instance = <span class="keyword">null</span>;</div><div class="line">  <span class="comment">//已登录用户</span></div><div class="line">  <span class="keyword">private</span> User sUser;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">LoginSession</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">  </div><div class="line">  <span class="comment">//懒汉模式</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoginSession <span class="title">getLoginSession</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</div><div class="line">      instance = <span class="keyword">new</span> LoginSession();</div><div class="line">    &#125;</div><div class="line">    renturn instance;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//设置已登录的用户信息:包级私有函数</span></div><div class="line">  <span class="comment">//public：所有类可见。 </span></div><div class="line">  <span class="comment">//pirvate：只有同一类内部的方法可见，在有就是内部类也可以访问到。 </span></div><div class="line">  <span class="comment">//默认（friendly）：包内可见。 </span></div><div class="line">  <span class="comment">//protected:继承可见。</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setLoginedUser</span><span class="params">(User user)</span></span>&#123;</div><div class="line">    sUser = user;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">getLoginedUser</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> sUser;</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</div><div class="line">    User user = <span class="keyword">new</span> User();</div><div class="line">    <span class="comment">//登录服务器获取用户信息，将信息赋值给user</span></div><div class="line">    user.age = <span class="number">22</span>;</div><div class="line">    user.name = <span class="string">"xiaoming"</span></div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="comment">//用户信息获取到后，将用户信息设置到Session中（单例模式）</span></div><div class="line">    LoginSession.getLoginSession().setLoginedUser(user);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>用户登录时从服务器获取用户信息，通过setLoginedUser方法设置给LoginSession。由于setLoginedUser的访问权限是包级别的，因此外部模块无法访问，在一定程度上满足了不允许其他模块修改的要求，小明很高兴。<br>可是，小明有一个比他还菜的同事大力协同开发，大力果然出奇迹啊：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在用户信息功能模块，</span></div><div class="line"><span class="comment">//获取登录用户信息</span></div><div class="line">User user = LoginSession.getLoginSession().getLoginedUser();</div><div class="line"><span class="comment">//测试：更新用户地址信息</span></div><div class="line">user.address = <span class="keyword">new</span> Address(<span class="string">"北京市"</span>,<span class="string">"朝阳区"</span>,<span class="string">"大望路"</span>);</div></pre></td></tr></table></figure></p>
<p>联调时发现，用户显示的信息和服务器获取的信息不一致，小民很郁闷，他本来打的好算盘是只允许LoginSession包下才能通过setLoginedUser设定修改用户信息，然而并没有其他人调用setLoginedUser方法，追查了好久终于发现大力这个猪队友干的好事。如何才能保证服务器获取到的数据在其他模块下不会被更改呢？但是屌丝到爆的小明对这个问题束手无策了。<br>无奈之下，小明找到了小民，小民嘴角一勾，“小CASE!使用clone获取副本”</p>
<h4 id="源码2"><a href="#源码2" class="headerlink" title="源码2"></a>源码2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 用户实体类</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">clone</span><span class="params">()</span></span>&#123;</div><div class="line">    User user = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">      user = (User)<span class="keyword">super</span>.clone();</div><div class="line">    &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> user;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//修改LoginSession的getLoginedUser方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getLoginedUser</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> sUser.clone()；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解析2"><a href="#解析2" class="headerlink" title="解析2"></a>解析2</h4><p>小明采用了原型模式，让User实现了克隆功能，在不允许修个user的地方，使用其副本，即保护性拷贝。<br>经测试发现，浅拷贝并没有彻底的解决问题。比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在用户信息功能模块，</span></div><div class="line"><span class="comment">//获取登录用户信息</span></div><div class="line">User user = LoginSession.getLoginSession().getLoginedUser();</div><div class="line"><span class="comment">//测试：更新用户地址信息</span></div><div class="line">user.address.city = (<span class="string">"北京市"</span>);</div><div class="line">user.address.district = (<span class="string">"朝阳区"</span>);</div><div class="line">user.address.street = (<span class="string">"大望路"</span>);</div></pre></td></tr></table></figure></p>
<p>小明这次彻底懵逼了，不得已又找到了小民，小民看过小明的代码，笑了笑：“方向没错，只不过你使用了浅拷贝，要想解决你的问题，你应该使用深拷贝，”“</p>
<h2 id="3-浅拷贝和深拷贝"><a href="#3-浅拷贝和深拷贝" class="headerlink" title="3. 浅拷贝和深拷贝"></a><strong>3. 浅拷贝和深拷贝</strong></h2><p>深拷贝(深复制)和浅拷贝(浅复制)是两个比较通用的概念，尤其在C++语言中，若不弄懂，则会在delete的时候出问题，但是我们在这幸好用的是Java。虽然java自动管理对象的回收，但对于深拷贝(深复制)和浅拷贝(浅复制)，我们还是要给予足够的重视，因为有时这两个概念往往会给我们带来不小的困惑。</p>
<p>浅拷贝是指拷贝对象时仅仅拷贝对象本身（包括对象中的基本变量），而不拷贝对象包含的引用指向的对象。深拷贝不仅拷贝对象本身，而且拷贝对象包含的引用指向的所有对象。举例来说更加清楚：对象A1中包含对B1的引用，B1中包含对C1的引用。浅拷贝A1得到A2，A2 中依然包含对B1的引用，B1中依然包含对C1的引用。深拷贝则是对浅拷贝的递归，深拷贝A1得到A2，A2中包含对B2（B1的copy）的引用，B2 中包含对C2（C1的copy）的引用。</p>
<h3 id="3-1-装逼程序员小民"><a href="#3-1-装逼程序员小民" class="headerlink" title="3.1 装逼程序员小民"></a><strong>3.1 装逼程序员小民</strong></h3><h4 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 用户实体类</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">clone</span><span class="params">()</span></span>&#123;</div><div class="line">    User user = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">      user = (User)<span class="keyword">super</span>.clone();</div><div class="line">    &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    user.address = (Address)address.clone();</div><div class="line">    <span class="keyword">return</span> user;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">* 用户实体类</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Address <span class="title">clone</span><span class="params">()</span></span>&#123;</div><div class="line">    Address address = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">      address = (Address)<span class="keyword">super</span>.clone();</div><div class="line">    &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> address;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//修改LoginSession的getLoginedUser方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getLoginedUser</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> sUser.clone()；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h4><p>深拷贝不仅拷贝对象本身，而且拷贝对象包含的引用指向的所有对象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;本文是对&lt;strong&gt;《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社&lt;/strong&gt;所做的读书笔记。文章是对本书的一些列学习笔记，如若有侵犯到作者权益，还望作者能联系我，我会及时下架。&lt;br&gt;这
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Android/Java/"/>
    
      <category term="架构师" scheme="http://yoursite.com/categories/Android/Java/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android 设计模式：（三）Builder模式</title>
    <link href="http://yoursite.com/2016/12/10/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89Builder%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/12/10/Android-设计模式：（三）Builder模式/</id>
    <published>2016-12-10T08:33:17.000Z</published>
    <updated>2016-12-10T10:27:43.526Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>本文是对<strong>《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社</strong>所做的读书笔记。文章是对本书的一些列学习笔记，如若有侵犯到作者权益，还望作者能联系我，我会及时下架。<br>这本书不错，有兴趣的同学可以买原书看看。<br>感兴趣的朋友欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h2 id="1-Bulider模式的定义"><a href="#1-Bulider模式的定义" class="headerlink" title="1. Bulider模式的定义"></a><strong>1. Bulider模式的定义</strong></h2><p>将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。对于一个复杂的对象，为了在构建过程中对外部隐藏实现细节或者想要对对象的内部组件根据需要实现灵活的配置，就可以使用Builder模式将部件和组装过程分离，使得构建过程和部件都可以自由扩展，两者之间的耦合也降到最低。<br>通常会将Builder设计为链式调用，他的关键点是每个setter方法都返回自身，也就是return this，这样就使得setter方法可以链式调用。通过这种形式，使得整个结构更加简单，也能对复杂类对象的组装过程实现更精细化的控制。</p>
<h2 id="2-Bulider模式的实现"><a href="#2-Bulider模式的实现" class="headerlink" title="2. Bulider模式的实现"></a><strong>2. Bulider模式的实现</strong></h2><p>下面我将以我们在之前的文章<a href="https://xiaodanchen.github.io/2016/12/08/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/" target="_blank" rel="external">《Android 设计模式：（一）面向对象的六大原则》</a>中作为示例的ImageLoader为例来举例。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><p>简单点，假设我们要求ImageLoader可以设置缓存策略，设置加载中占位图，设置加载失败背景图，这是加载资源URI，设置ImageView和加载成功失败的回调监听器这几个常见的设置。<br>那么，框架大体如下：<br>2.1 定义缓存策略接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 缓存策略接口类</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageCache</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bmp)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.2 定义一个属性设置辅助类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 属性设置辅助类:</div><div class="line">* 偷个懒，就不写成setter和getter形式的了</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoaderController</span></span>&#123;</div><div class="line">  <span class="comment">//加载中占位图</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> loadingPlaceHolder;</div><div class="line">  <span class="comment">//加载失败背景图</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> loadfailedPlaceHolder;</div><div class="line">  <span class="comment">//加载资源URI</span></div><div class="line">  <span class="keyword">public</span> String uri;</div><div class="line">  <span class="comment">//ImageView</span></div><div class="line">  <span class="keyword">public</span> View target;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.3 定义加载状态回调接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 缓存策略接口类</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoadListener</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onLoading</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onLoadSucceed</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.4 实现ImageLoader类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* ImageLoader类:</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span></span>&#123;</div><div class="line">  <span class="comment">//加载策略</span></div><div class="line">  <span class="keyword">private</span> ImageCache mImageCache;</div><div class="line">  <span class="comment">//加载失败背景图</span></div><div class="line">  <span class="keyword">private</span> ImageLoaderController mController;</div><div class="line">  <span class="comment">//加载状态监听器</span></div><div class="line">  <span class="keyword">public</span> LoadListener mLoadListener;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">ImageLoader</span><span class="params">()</span></span>&#123;</div><div class="line">    mController = <span class="keyword">new</span> ImageLoaderController();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//执行请求</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//发起加载请求，根据加载策略加载资源等</span></div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> ImageLoader mImageLoader;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span></span>&#123;</div><div class="line">      mImageLoader = <span class="keyword">new</span> ImageLoader();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setLoadingPlaceHolder</span><span class="params">(<span class="keyword">int</span> resId)</span></span>&#123;</div><div class="line">      mImageLoader.mController.loadingPlaceHolder = resId;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setLoadfailedPlaceHolder</span><span class="params">(<span class="keyword">int</span> resId)</span></span>&#123;</div><div class="line">      mImageLoader.mController.loadfailedPlaceHolder = resId;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">seUri</span><span class="params">(String uri)</span></span>&#123;</div><div class="line">      mImageLoader.mController.uri = uri;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setTarget</span><span class="params">(View target)</span></span>&#123;</div><div class="line">      mImageLoader.mController.target = target;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setCache</span><span class="params">(ImageCache cache)</span></span>&#123;</div><div class="line">      mImageLoader.mImageCache = cache;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setLoadListener</span><span class="params">(LoadListener listener)</span></span>&#123;</div><div class="line">      mImageLoader.mLoadListener = listener;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ImageLoader <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">      mImageLoader.load();</div><div class="line">      <span class="keyword">return</span> mImageLoader;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用户使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ImageLoader.Builder builder = ImageLoader.Builder();</div><div class="line">builder.setLoadingPlaceHolder(R.drawable.iv_loading)</div><div class="line">       .setLoadfailedPlaceHolder(R.drawable.iv_loadfailed)</div><div class="line">       .seUri(url)</div><div class="line">       .setTarget(imageview)</div><div class="line">       .setCache(mDoubleCache)</div><div class="line">       .setLoadListener(mLoadListener)</div><div class="line">       .build();</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>本文所写的实例代码可能不太实用，但是仅仅是为了说明一下Builder模式。<br>Bulider模式：</p>
<ul>
<li>配置灵活：开发者不需要设计一系列的构造函数来满足各种各样的需求</li>
<li>利于扩展：假如我们的类需要扩展属性（能力），只需要增加属性和配置函数。符合<strong>开闭原则</strong></li>
<li>基本不用修改老的代码：符合<strong>开闭原则</strong></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;本文是对&lt;strong&gt;《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社&lt;/strong&gt;所做的读书笔记。文章是对本书的一些列学习笔记，如若有侵犯到作者权益，还望作者能联系我，我会及时下架。&lt;br&gt;这
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Android/Java/"/>
    
      <category term="架构师" scheme="http://yoursite.com/categories/Android/Java/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android 设计模式：（二）单例模式</title>
    <link href="http://yoursite.com/2016/12/09/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/12/09/Android-设计模式：（二）单例模式/</id>
    <published>2016-12-09T08:18:05.000Z</published>
    <updated>2016-12-10T08:25:16.674Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>本文是对<strong>《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社</strong>所做的读书笔记。文章是对本书的一些列学习笔记，如若有侵犯到作者权益，还望作者能联系我，我会及时下架。<br>这本书不错，有兴趣的同学可以买原书看看。<br>感兴趣的朋友欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h2 id="1-单例模式的定义"><a href="#1-单例模式的定义" class="headerlink" title="1. 单例模式的定义"></a><strong>1. 单例模式的定义</strong></h2><p><strong>单例模式:</strong>确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>
<h2 id="2-单例模式的实现"><a href="#2-单例模式的实现" class="headerlink" title="2. 单例模式的实现"></a><strong>2. 单例模式的实现</strong></h2><p>在正式介绍单例模式之前，我们有必要了解一下 instance = new Singleton()这样一条语句。乍一看这是一天简单的语句，用来生成一个Singleton类的实例，但实际上他不是一条原子操作。这条代码最终会被编译成多条汇编指令，他大致做了3件事情：<br>（1）给Singleton实例分配内存。<br>（2）调用Singleton()构造方法，初始化成员字段。<br>（3）将instance对象指向分配的内存空间（此时instance就不是null了）。<br>另外，JVM执行上面三条汇编指令的顺序是不定的，有可能是1-2-3，也有可能是1-3-2。</p>
<h3 id="2-1饿汉模式"><a href="#2-1饿汉模式" class="headerlink" title="2.1饿汉模式"></a><strong>2.1饿汉模式</strong></h3><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p>
<ul>
<li>线程安全，无需关注多线程的问题。</li>
<li>加载没有延时：在类创建的同时，就已经创建好类的实例</li>
<li>写法简单</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>由于在类创建的时候，就创建了实例（不管你会不会用到），那么就有可能会缓存很多用户根本用不到的实例。</li>
<li>如果类中的实例会消耗较大量的内存，则要慎用饿汉模式创建单例。</li>
</ul>
<h3 id="2-2-懒汉模式"><a href="#2-2-懒汉模式" class="headerlink" title="2.2 懒汉模式"></a><strong>2.2 懒汉模式</strong></h3><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</div><div class="line">      intance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p>
<ul>
<li>在使用时才会创建实例，在一定程度上节省了资源。<br><strong>缺点：</strong></li>
<li>第一次加载时需要实例化，反应稍慢。</li>
<li>加了同步锁，造成不必要的同步开销。</li>
<li>如果忘记加同步锁，则是线程不安全的。</li>
</ul>
<h3 id="2-3-Double-Check-Lock"><a href="#2-3-Double-Check-Lock" class="headerlink" title="2.3 Double Check Lock"></a><strong>2.3 Double Check Lock</strong></h3><h4 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">  * volatile: </div><div class="line">  * 告诉JVM不要对volitile所修饰的变量进行拷贝。</div><div class="line">  * 这样就保证了instance不会在线程内存中保存拷贝，instance每次都从主内存中读取。</div><div class="line">  *</div><div class="line">  */</div><div class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</div><div class="line">      synchornized(Singleton.class)&#123;</div><div class="line">         <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</div><div class="line">           intance = <span class="keyword">new</span> Singleton();</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p>
<ul>
<li>资源利用率高，只有在第一次调用时才会分配资源。</li>
<li>相较于懒汉模式，加载速度更快。</li>
<li>在一定程度上避免了多余的同步，减轻了线程安全的问题。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>第一次加载时存在延时，反应较慢。</li>
<li>存在失效的情况（虽然概率较小）：正如上文所说，如果当前线程调用new Singleton()对应的汇编的执行顺序是1-3-2，当有新的线程调用getinstance()时，instance没有初始化却非空，就造成了instance失效。</li>
</ul>
<h3 id="2-4-静态内部类单例模式"><a href="#2-4-静态内部类单例模式" class="headerlink" title="2.4 静态内部类单例模式"></a><strong>2.4 静态内部类单例模式</strong></h3><h4 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> SingletonHolder.instance;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">  * 静态内部类</div><div class="line">  */</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SinletonHolder</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instace = <span class="keyword">new</span> Singleton();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h4><p>第一次加载Singleton类时并不会初始化instance，只有在第一次调用Singleton的getInstace()方法时才会导致instance初始化。因为，第一次调用getInstace()时，JVM才会加载SingletonHolder类。<br>这种方式不仅能够确保线程的安全，而且延迟了实例化，避免了饿汉模式的资源浪费，同时也能够保证单例对象的唯一性。</p>
<h3 id="2-5-枚举单例"><a href="#2-5-枚举单例" class="headerlink" title="2.5 枚举单例"></a><strong>2.5 枚举单例</strong></h3><h4 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonEnum&#123;</div><div class="line">  INSTANCE;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h4><ul>
<li>写法简单</li>
<li>线程安全</li>
<li>在任何情况下(即使反序列化)，他都是一个实例。2.1到2.4介绍的几种方法，在反序列化（将实例对象写入磁盘再读取出来）时无法保证实例的唯一性。因为反序列化时系统会通过特殊的途径创建一个类的新实例，相当于调用了该类的构造函数，哪怕构造函数是私有的。反序列化操作提供了一个特别的钩子函数readResolve()，这个方法可以让开发人员控制对象的发序列化。例如，上述几个实现单例模式的方法要想杜绝反序列化时重新生成对象，那么必须加入如下方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> throw ObjectStreamException</span>&#123;</div><div class="line">  <span class="keyword">return</span> instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-6-使用容器实现单例"><a href="#2-6-使用容器实现单例" class="headerlink" title="2.6 使用容器实现单例"></a><strong>2.6 使用容器实现单例</strong></h3><h4 id="代码示例-5"><a href="#代码示例-5" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonManager</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; objMap =  <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonManager</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String key, Object instance)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!objMap.containsKey(key))&#123;</div><div class="line">      objMap.put(key,instance);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getService</span><span class="params">(String key)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> objMap.get(key);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="优缺点-5"><a href="#优缺点-5" class="headerlink" title="优缺点"></a>优缺点</h4><p>在程序的初始，将多中单例类型注入到一个统一的管理类中，在使用时根据key获取对应类型的对象。这种方式使得我们可以管理多种类型的单例，并且在使用时可以通过统一的接口进行获取操作，降低了用户的使用成本，也对用户隐藏了具体实现，降低了耦合度。<br>例如系统服务，就是这种模式：getSystemService(System.xx_SERVICE)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;本文是对&lt;strong&gt;《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社&lt;/strong&gt;所做的读书笔记。文章是对本书的一些列学习笔记，如若有侵犯到作者权益，还望作者能联系我，我会及时下架。&lt;br&gt;这
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Android/Java/"/>
    
      <category term="架构师" scheme="http://yoursite.com/categories/Android/Java/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android 设计模式：（一）面向对象的六大原则</title>
    <link href="http://yoursite.com/2016/12/08/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2016/12/08/Android-设计模式：（一）面向对象的六大原则/</id>
    <published>2016-12-08T02:48:01.000Z</published>
    <updated>2016-12-09T08:22:03.199Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>最近同事买了本Android设计模式的书，借来看看，感觉还不错，做一下笔记呗。有兴趣的同学可以买原书看看：<strong>《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社</strong>。<br>文章是对本书的一些列学习笔记，如若有侵犯到作者权益，还望作者能联系我，我会及时下架。<br>感兴趣的朋友欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h2 id="1-优化代码的第一步——单一职责原则"><a href="#1-优化代码的第一步——单一职责原则" class="headerlink" title="1. 优化代码的第一步——单一职责原则"></a><strong>1. 优化代码的第一步——单一职责原则</strong></h2><p><strong>单一职责原则（SRP）:</strong>就一个类而言，应该仅有一个引起他变化的原因。简单来说，一个类应该是一组<strong>高度相关</strong>的函数，数据的封装。</p>
<p>很抽象的概念是不是？别管他，举个栗子：<br><strong>开发一个图片加载器（ImageLoader），要求能够实现图片的下载加载，并能将图片缓存起来。</strong></p>
<h3 id="1-1-屌丝程序猿小明"><a href="#1-1-屌丝程序猿小明" class="headerlink" title="1.1 屌丝程序猿小明"></a><strong>1.1 屌丝程序猿小明</strong></h3><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 图片加载类</div><div class="line">**/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span></span>&#123;</div><div class="line">  <span class="comment">//图片缓存</span></div><div class="line">  LruCache&lt;Strig, Bitmap&gt; mImageCache;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ImageLoader</span><span class="params">()</span></span>&#123;</div><div class="line">    initImageCatche();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//初始化缓存：mImageCache</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initImageCache</span><span class="params">()</span></span>&#123;...&#125;</div><div class="line">  </div><div class="line">  <span class="comment">//加载图片</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(String url, ImageView imageView)</span></span>&#123;...&#125;</div><div class="line">  </div><div class="line">  <span class="comment">//下载图片</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Bitmap <span class="title">downloadImage</span><span class="params">(String ImgUrl)</span></span>&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>小明的ImageLoader耦合太严重，简直没有设计可言，更不要说扩展性，灵活性。所有的功能都写在一个类里，随着功能的增多，ImageLoader会越来越重，越来越臃肿复杂。整个图片加载系统就越来越脆弱。</p>
<h3 id="1-2-装逼程序猿小民"><a href="#1-2-装逼程序猿小民" class="headerlink" title="1.2 装逼程序猿小民"></a><strong>1.2 装逼程序猿小民</strong></h3><h4 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 图片缓存类</div><div class="line">**/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCache</span></span>&#123;</div><div class="line">  <span class="comment">//图片缓存</span></div><div class="line">  LruCache&lt;Strig, Bitmap&gt; mImageCache;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ImageCache</span><span class="params">()</span></span>&#123;</div><div class="line">    initImageCatche();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//初始化缓存：mImageCache</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initImageCache</span><span class="params">()</span></span>&#123;...&#125;</div><div class="line">  </div><div class="line">  <span class="comment">//缓存图片</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bitmap)</span></span>&#123;...&#125;</div><div class="line">  </div><div class="line">  <span class="comment">//获取图片</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span></span>&#123;...&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 图片加载类</div><div class="line">**/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span></span>&#123;</div><div class="line">  <span class="comment">//图片缓存</span></div><div class="line">  LruCache&lt;Strig, Bitmap&gt; mImageCache = <span class="keyword">new</span> ImageCache();</div><div class="line">  </div><div class="line">  <span class="comment">//加载图片</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(String url, ImageView imageView)</span></span>&#123;...&#125;</div><div class="line">  </div><div class="line">  <span class="comment">//下载图片</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Bitmap <span class="title">downloadImage</span><span class="params">(String ImgUrl)</span></span>&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h4><p>小民将小明的版本一份为二：<strong>ImageLoader</strong>，<strong>ImageCache</strong>。ImageLoader只负责图片的加载和下载逻辑；ImageCache只负责图片的缓存逻辑。这样架构更加清晰，功能模块的耦合性更加低，相互间的影响更小。</p>
<h3 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a><strong>1.3 总结</strong></h3><p>从上面的例子中可以初步体会到，单一职责所表达的用意就是“单一”二字。我们设计类的时候，一定要仔细考虑如何划分类的职责和函数的功能。<br>正如前文所说，一个类应当是一组高度相关的函数和数据的组合，即一个类应当高内聚，低耦合。</p>
<h2 id="2-让程序更稳定、更灵活——开闭原则"><a href="#2-让程序更稳定、更灵活——开闭原则" class="headerlink" title="2. 让程序更稳定、更灵活——开闭原则"></a><strong>2. 让程序更稳定、更灵活——开闭原则</strong></h2><p><strong>开闭原则（OCP）：</strong>软件中的对象（类，模块，数据等）用该对于扩展是开放的，对于修改是封闭的。换句话就是，程序一旦开发完成，程序中一个类的实现只应该因错误而被修改，新的或者改变的特性应该通过新建不同的类来实现，新建的类可以通过继承的方式来重用原来的代码。</p>
<p>下面接着通过上面的例子来说明。上面的ImageLoader通过内存缓存解决了每次从网络加载图片的问题，但是Android的内存很有限，且具有易失性，即当应用重启后，原来加载的图片会丢失，需要重新加载，浪费时间和用户的流量。现在要求加入本地缓存。</p>
<h3 id="2-1-屌丝程序猿小明"><a href="#2-1-屌丝程序猿小明" class="headerlink" title="2.1 屌丝程序猿小明"></a><strong>2.1 屌丝程序猿小明</strong></h3><p>小明设计DiskCache类，将图片缓存到SD卡中。</p>
<h4 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiskCache</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> String cacheDir = <span class="string">"sdcard/cache/"</span>;</div><div class="line">  </div><div class="line">  <span class="comment">//从本地缓存中获取图片</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String localUri)</span></span>&#123;...&#125;</div><div class="line">  </div><div class="line">  <span class="comment">//将图片缓存到本地</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String localUri, Bitmap bmp)</span></span>&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为需要将图片缓存到SD卡中，所以小明需要修改ImageLoader.java代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span></span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="comment">//SD卡缓存</span></div><div class="line">  DiskCache mDiskCache = <span class="keyword">new</span> DiskCache();</div><div class="line">  <span class="comment">//是否适用SD卡缓存</span></div><div class="line">  <span class="keyword">boolean</span> isUseDiskCache = <span class="keyword">false</span>;</div><div class="line">  ...</div><div class="line">  <span class="comment">//修改加载图片中的缓存策略</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(String url, ImageView imageView)</span></span>&#123;</div><div class="line">    <span class="comment">//判读使用哪种缓存</span></div><div class="line">    Bitmap bmp = isUseDiskCache?mDiskCache.get(url):mImageCache.get(url);</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//Added:设置是否使用本地缓存加载</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDiskCache</span><span class="params">(<span class="keyword">boolean</span> useDiskCache)</span></span>&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过useDiskCache()方法可以方便的让用户设置缓存方式，小明很开心啊。后来发现这种设计明显有问题，那就是用户只能使用内存缓存和本地缓存的一种，所以小明新建一个双缓存类，实现先内存再本地的加载策略。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCache</span></span>&#123;</div><div class="line">  ImageCache mMenoryCache = <span class="keyword">new</span> ImageCache();</div><div class="line">  DiskCache mDiskCache = <span class="keyword">new</span> DiskCache();</div><div class="line">  </div><div class="line">  <span class="comment">//先从内存中获取图片，获取不到再从SD获取图片</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span></span>&#123;...&#125;</div><div class="line">  </div><div class="line">  <span class="comment">//将图片缓存到内存和SD中</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url,Bitmap bmp)</span></span>&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>小明需要对ImageLoader更新：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImagerLoader</span></span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="comment">//双缓存</span></div><div class="line">  DoubleCache mDoubleCache = <span class="keyword">new</span> DoubleCache();</div><div class="line">  <span class="comment">//使用双缓存</span></div><div class="line">  <span class="keyword">boolean</span> isUseDoubleCache = <span class="keyword">false</span>;</div><div class="line">  ...</div><div class="line">  </div><div class="line">  <span class="comment">//Modified:修改加载图片策略</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispalyImage</span><span class="params">()</span><span class="params">(String url, ImageView imageView)</span></span>&#123;</div><div class="line">    Bitmap bmp = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span>(isUseDoubleCache)&#123;</div><div class="line">      bmp = mDoubleCache.get(url);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isUseDiskCache)&#123;</div><div class="line">      bmp = mDiskCache.get(url);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">     bmp = mImageCache.get(url); </div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//Added:设置是否使用双缓存加载</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useDoubleCache</span><span class="params">(<span class="keyword">boolean</span> useDoubleCache)</span></span>&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h4><p>小明每次加入新的缓存策略都需要修改ImageLoader类，然后通过if-else语句进行逻辑控制。随着类似这些逻辑的加入，ImageLoader的代码变得越来越臃肿，脆弱。如果一不小心写错了某个if-else的条件，则需要花费大量的时间来排除错误。<br>最红要的是，ImageLoader的可扩展性差，用户无法自己注入自定义实现的缓存策略。可扩展性可是框架的最重要的特性。<br>小明的方案很让人郁闷：一扩展，就要修改ImageLoader，一修改就容易出bug（奶奶的，不活了）。</p>
<h3 id="2-2-装逼程序猿小民"><a href="#2-2-装逼程序猿小民" class="headerlink" title="2.2 装逼程序猿小民"></a><strong>2.2 装逼程序猿小民</strong></h3><p>软件的对象对于扩展应该是开放的，但是对于修改应该是封闭的。也就是说，软件的变化更新应该尽量通过扩展的方式实现，而不是通过修改自己原来的代码实现。<br>喜爱装逼的小民熟知关闭原则的真谛，他重构了小明的框架：<br><img src="/hello-world/img/design1_1.png" alt="关闭原则"></p>
<h4 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h4><p>首先定义了缓存策略接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 缓存策略接口类</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageCache</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> Bitmap <span class="title">get</span><span class="params">(String url)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String url, Bitmap bmp)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现缓存策略的子类（缓存策略扩展）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//内存缓存策略</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryCache</span> <span class="keyword">implements</span> <span class="title">ImageCache</span></span>&#123;...&#125;</div><div class="line"> </div><div class="line"><span class="comment">//SD缓存策略</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiskCache</span> <span class="keyword">implements</span> <span class="title">ImageCache</span></span>&#123;...&#125;</div><div class="line"> </div><div class="line"><span class="comment">//双缓存策略</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCache</span> <span class="keyword">implements</span> <span class="title">ImageCache</span></span>&#123;...&#125;</div></pre></td></tr></table></figure></p>
<p>ImageLoader: 图片加载器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span></span>&#123;</div><div class="line">  <span class="comment">//图片缓存策略</span></div><div class="line">  ImageCache mImageCache = <span class="keyword">new</span> MemoryCache();</div><div class="line">  </div><div class="line">  <span class="comment">//注入缓存实现</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">setImageCache</span><span class="params">(ImageCache imageCache)</span></span>&#123;</div><div class="line">    mImageCache = imageCache;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//加载图片</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(String url, ImageView imageView)</span></span>&#123;</div><div class="line">    Bitmap bmp = mImageCache.get(url);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != bmp)&#123;</div><div class="line">      imageView.setImageBitmap(bmp);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//图片没有缓存，提交到线程池中下载图片</span></div><div class="line">    submitLoadRequest(url,imageView);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">submitLoadRequest</span><span class="params">(String url, ImageView imageView)</span></span>&#123;</div><div class="line">    ...</div><div class="line">    Bitmap bmp = downloadImage(url);</div><div class="line">    ...</div><div class="line">    imageView.setImageBitmap(bmp);</div><div class="line">    ...</div><div class="line">    mImageCache.put(url,bmp);</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//下载图片</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Bitmap <span class="title">downloadImage</span><span class="params">(String ImgUrl)</span></span>&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="解析-3"><a href="#解析-3" class="headerlink" title="解析"></a>解析</h4><p>ImageCache接口规定了图片缓存所需要的方法，所有的缓存策略都需要实现该接口。<br>ImageLoader中增加了一个setImageCache()方法，通过这个方法，使用者可以方便的注入不同的加载策略。这样不仅使得ImageLoader更加的简单，健壮，扩展性也大大的加强。<br>当用户需要自定义缓存策略时，只需要实现ImageCache接口，然后通过setImageCache注入框架就好。<br>这不就是开闭原则么?小民这个逼装的，我给满分。</p>
<h3 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3 总结"></a><strong>2.3 总结</strong></h3><p>开闭原则（OCP）指导我们，当软件需求发生变化时，应该<strong>尽量通过</strong>扩展的方式来实现变化，而不是通过修改已有的代码来实现。在软件设计初期，最好能够好好的考量一下可扩展能力的设计。</p>
<h2 id="3-构建扩展性更好的系统——里氏替换原则"><a href="#3-构建扩展性更好的系统——里氏替换原则" class="headerlink" title="3. 构建扩展性更好的系统——里氏替换原则"></a><strong>3. 构建扩展性更好的系统——里氏替换原则</strong></h2><p><strong>里氏替换原则（LSP）:</strong>所有引用基类的地方，都必须能够透明的使用其子类的对象。说的直白一点就是<strong>多态和抽象</strong>。</p>
<p>里氏替换原则的核心原理是<strong>抽象</strong>，抽象又依赖于继承这个特性。那么什么是抽象？按照我的理解说的直白点，就是基类，说的再具象点就是虚基类或者接口。</p>
<p>所以，此小节的标题我们完全可以翻译为：<strong>利用接口编程思想，构建出具有良好扩展性的系统</strong>。这里的接口不单单是指interface，也包括abstract class 和base class。</p>
<h2 id="4-让项目拥有变化的能力——依赖倒置原则"><a href="#4-让项目拥有变化的能力——依赖倒置原则" class="headerlink" title="4. 让项目拥有变化的能力——依赖倒置原则"></a><strong>4. 让项目拥有变化的能力——依赖倒置原则</strong></h2><p><strong>依赖倒置原则（DIP）：</strong><br>（1）高层模块不应依赖底层模块，两者都应该依赖其抽象。<br>（2）抽象不应该依赖细节。<br>（3）细节应该依赖抽象。</p>
<p>在java语言中，抽象就是指接口或抽象类，两者都是不能直接被实例化的。细节就是实现类，实现接口或继承抽象类而产生的类就是细节，其特点就是，可以直接被实例化。高层模块就是调用端，低层模块就是具体实现类。</p>
<p>DIP在java语言中的表现就是：<strong>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或者抽象类产生的</strong>。简而言之就是<strong>面向接口编程</strong>或者<strong>面向抽象编程</strong>。<br>接着那上面的代码举例：</p>
<h3 id="4-1-屌丝程序猿小明"><a href="#4-1-屌丝程序猿小明" class="headerlink" title="4.1 屌丝程序猿小明"></a><strong>4.1 屌丝程序猿小明</strong></h3><h4 id="源码-4"><a href="#源码-4" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 图片加载类</div><div class="line">**/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span></span>&#123;</div><div class="line">  <span class="comment">//内存缓存（直接依赖细节）</span></div><div class="line">  MemoryCache mMemoryCache = <span class="keyword">new</span> MemoryCache();</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解析-4"><a href="#解析-4" class="headerlink" title="解析"></a>解析</h4><p>高层模块ImageLoader直接依赖低层模块MemoryCache，直接将二者耦合。一方面不容易扩展，另一方面，低层模块MemoryCache修改时很有可能还要修改高层模块ImageLoader，这就违反了开闭原则。</p>
<h3 id="4-2-装逼程序猿小民"><a href="#4-2-装逼程序猿小民" class="headerlink" title="4.2 装逼程序猿小民"></a><strong>4.2 装逼程序猿小民</strong></h3><h4 id="源码-5"><a href="#源码-5" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span></span>&#123;</div><div class="line">  <span class="comment">//图片缓存策略(依赖抽象--接口)</span></div><div class="line">  ImageCache mImageCache = <span class="keyword">new</span> MemoryCache();</div><div class="line">  </div><div class="line">  <span class="comment">//注入缓存实现（依赖注入）</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">setImageCache</span><span class="params">(ImageCache imageCache)</span></span>&#123;</div><div class="line">    mImageCache = imageCache;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解析-5"><a href="#解析-5" class="headerlink" title="解析"></a>解析</h4><p>高层模块ImageLoader不直接依赖低层模块MemoryCache，而是二者都依赖其抽象接口ImageCache。一方面容易扩展，另一方面，低层模块MemoryCache修改时不会导致修改高层模块ImageLoader。</p>
<h3 id="4-3-总结"><a href="#4-3-总结" class="headerlink" title="4.3 总结"></a><strong>4.3 总结</strong></h3><p>DIP的核心思想就是面向接口或面向抽象编程，为什么要这样做，还需要大家好好的体会。</p>
<h2 id="5-让系统具有更高的灵活性——接口隔离原则"><a href="#5-让系统具有更高的灵活性——接口隔离原则" class="headerlink" title="5. 让系统具有更高的灵活性——接口隔离原则"></a><strong>5. 让系统具有更高的灵活性——接口隔离原则</strong></h2><p><strong>接口隔离原则（ISP）：</strong>客户端不应该依赖他不需要的接口，类间的依赖关系应该建立在最小的接口上。<br>接口隔离原则将非常庞大臃肿的接口拆分成更小的和更具体的接口，这样客户将会只需要知道他们感兴趣的接口的方法。ISP的目的是系统解开耦合，从而容易重构、更改和重新部署。</p>
<p>Bob大叔（Robert C Martin）曾将单一职责原则（SRP）、开闭原则（OCP）、里氏替换原则（LSP）、接口隔离原则（ISP）和依赖倒置原则（DIP）这5个原则称为SOLID原则，作为面向对象开发的基本原则。</p>
<h2 id="6-更好的扩展性——迪米特原则"><a href="#6-更好的扩展性——迪米特原则" class="headerlink" title="6. 更好的扩展性——迪米特原则"></a><strong>6. 更好的扩展性——迪米特原则</strong></h2><p><strong>迪米特原则（LOD）：</strong>也成为最少知识原则。一个对象应对其他对象有最少的了解。通俗的讲，一个类应该对自己需要耦合或者调用的类知道的最少。<br>还有一个解释就是：只与直接朋友通信。什么是直接朋友呢？两个对象之间的耦合就是朋友关系，如组合、聚合、依赖。</p>
<p>what a fucking thing!反正我是理解不了这个概念，太抽象了。<br>举个例子嘛：通过中介找房子。我们设定的情况为：租客只要求房间的面积和租金，其他一概不管；中介将符合要求的房子都提供给我。</p>
<h3 id="6-1-屌丝程序猿小明"><a href="#6-1-屌丝程序猿小明" class="headerlink" title="6.1 屌丝程序猿小明"></a><strong>6.1 屌丝程序猿小明</strong></h3><h4 id="源码-6"><a href="#源码-6" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 房间</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Room</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">float</span> area;<span class="comment">//面积</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">float</span> price;<span class="comment">//租金</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Room</span><span class="params">(<span class="keyword">float</span> area,<span class="keyword">float</span> price)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.area = area;</div><div class="line">    <span class="keyword">this</span>.price = price;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 中介</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span></span>&#123;</div><div class="line">  <span class="comment">//中介和房间类耦合</span></div><div class="line">  List&lt;Room&gt; mRooms = <span class="keyword">new</span> ArrayList&lt;Room&gt;();</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Mediator</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//初始化mRooms</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;Room&gt; <span class="title">getAllRooms</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> mRooms;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 租客</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tenant</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">float</span> roomArea;<span class="comment">//租客需要的房子面积</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">float</span> roomPrice;<span class="comment">//租客承受的租金</span></div><div class="line">  </div><div class="line">  <span class="comment">//租客和中介耦合</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rentRoom</span><span class="params">(Mediator mediator)</span></span>&#123;</div><div class="line">    <span class="comment">//租客和房间耦合</span></div><div class="line">    List&lt;Room&gt; rooms = mediator.getAllRooms();</div><div class="line">    <span class="keyword">for</span>(Room room:rooms)&#123;</div><div class="line">      <span class="keyword">if</span>(isSuitable(room))&#123;</div><div class="line">        System.out.println(<span class="string">"租到房子啦"</span>+room);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSuitable</span><span class="params">(Room room)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> room.area &gt;= roomArea </div><div class="line">        &amp;&amp; room.price &lt;= roomPrice;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解析-6"><a href="#解析-6" class="headerlink" title="解析"></a>解析</h4><p>从上面的代码中可以看到，Tenant不仅依赖了Mediator类，还需要频繁的与Room类打交道。把处理的逻辑放在Tenant类中，一方面弱化了中介类的功能，另一方面导致了租户与房间类之间的高度耦合。这种三间关系纠扯不清，一旦Room变化，Tenant也需要跟着变化。</p>
<p>这个时候我们就需要分清谁是租客真正的朋友，让租客之和真正的朋友打交道。这里显然是中介类。<br>依照迪米特原则，Tenant应该之和真正的朋友Mediator打交道。必须要将Room相关的操作从Tenant中移除。看看小民是如何优雅的装逼的：</p>
<h3 id="6-2-装逼程序猿小民"><a href="#6-2-装逼程序猿小民" class="headerlink" title="6.2 装逼程序猿小民"></a><strong>6.2 装逼程序猿小民</strong></h3><h4 id="源码-7"><a href="#源码-7" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 房间</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Room</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">float</span> area;<span class="comment">//面积</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">float</span> price;<span class="comment">//租金</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Room</span><span class="params">(<span class="keyword">float</span> area,<span class="keyword">float</span> price)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.area = area;</div><div class="line">    <span class="keyword">this</span>.price = price;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 中介</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span></span>&#123;</div><div class="line">  <span class="comment">//中介和房间类耦合</span></div><div class="line">  List&lt;Room&gt; mRooms = <span class="keyword">new</span> ArrayList&lt;Room&gt;();</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Mediator</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//初始化mRooms</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> Room <span class="title">rentOut</span><span class="params">(<span class="keyword">float</span> area,<span class="keyword">float</span> price)</span></span>&#123;</div><div class="line">    Room vRoom = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">for</span>(Room room:mRooms)&#123;</div><div class="line">      <span class="keyword">if</span>(isSuitable(area,price,room))&#123;</div><div class="line">        vRoom = room;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> vRoom;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSuitable</span><span class="params">(<span class="keyword">float</span> area,<span class="keyword">float</span> price,Room room)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> room.area &gt;= area </div><div class="line">        &amp;&amp; room.price &lt;= price;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 租客</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tenant</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">float</span> roomArea;<span class="comment">//租客需要的房子面积</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">float</span> roomPrice;<span class="comment">//租客承受的租金</span></div><div class="line">  </div><div class="line">  <span class="comment">//租客和中介耦合</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rentRoom</span><span class="params">(Mediator mediator)</span></span>&#123;</div><div class="line">    <span class="comment">//租客和房间耦合</span></div><div class="line">    Room room = mediator.rentOut(roomArea,roomPrice);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != room)&#123;</div><div class="line">      System.out.println(<span class="string">"找到合适的房子啦"</span>+room);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      System.out.println(<span class="string">"没有找到合适的房子"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解析-7"><a href="#解析-7" class="headerlink" title="解析"></a>解析</h4><p>对比小明和小民的代码，可以清晰的看出代码的解耦。<strong>只与直接朋友通信</strong>，分清朋友是关键。</p>
<h3 id="6-3-总结"><a href="#6-3-总结" class="headerlink" title="6.3 总结"></a><strong>6.3 总结</strong></h3><p>迪米特原则（最少知识原则）的目的是通过尽量的弱化非直接相关类之间的耦合来实现整体功能的解耦和内聚。</p>
<p>至此，面向对象的六大原则已经讲完了。还希望大家好好的理解体会各个原则的真实内涵。仅仅知道六大原则叫啥，用小民的话说就是逼值到不了满分的（哈哈，玩笑话，装逼还是要的）。深入理解六大原则，对后期学习设计模式，理解设计模式的理念会有很好的帮助。</p>
<p>最后的最后，欢迎大家加入<strong>学习小组</strong>QQ群：<strong>193765960</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;最近同事买了本Android设计模式的书，借来看看，感觉还不错，做一下笔记呗。有兴趣的同学可以买原书看看：&lt;strong&gt;《Adroid 源码设计模式解析与实战》 何红辉、关爱民 著 人民邮电出版社&lt;/strong&gt;。&lt;br&gt;文
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Android/Java/"/>
    
      <category term="架构师" scheme="http://yoursite.com/categories/Android/Java/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>opencv api 笔记</title>
    <link href="http://yoursite.com/2016/11/22/opencv-api-%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/11/22/opencv-api-笔记/</id>
    <published>2016-11-22T07:23:18.000Z</published>
    <updated>2016-11-26T06:41:11.939Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>opencv在图像处理中使用广泛，许多常见的应用场景例如人脸识别，车牌识别等都是基于opencv开发的。本文是学习opencv api的一些笔记。<br>感兴趣的朋友欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<p><a href="http://www.opencv.org.cn/" target="_blank" rel="external">《openCV中文网站》</a></p>
<h2 id="Mat-基本图像容器"><a href="#Mat-基本图像容器" class="headerlink" title="Mat-基本图像容器"></a><strong>Mat-基本图像容器</strong></h2><p><a href="http://docs.opencv.org/2.4/modules/core/doc/basic_structures.html#mat" target="_blank" rel="external">Mat官方解释</a><br><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/core/mat%20-%20the%20basic%20image%20container/mat%20-%20the%20basic%20image%20container.html#matthebasicimagecontainer" target="_blank" rel="external">教程</a><br>基本上讲 Mat 是一个类，由两个数据部分组成：矩阵头（包含矩阵尺寸，存储方法，存储地址等信息）和一个指向存储所有像素值的矩阵（根据所选存储方法的不同矩阵可以是不同的维数）的指针。矩阵头的尺寸是常数值，但矩阵本身的尺寸会依图像的不同而不同，通常比矩阵头的尺寸大数个数量级。因此，当在程序中传递图像并创建拷贝时，大的开销是由矩阵造成的，而不是信息头。OpenCV是一个图像处理库，囊括了大量的图像处理函数，为了解决问题通常要使用库中的多个函数，因此在函数中传递图像是家常便饭。同时不要忘了我们正在讨论的是计算量很大的图像处理算法，因此，除非万不得已，我们不应该拷贝 大 的图像，因为这会降低程序速度。</p>
<p>为了搞定这个问题，OpenCV使用引用计数机制。其思路是让<strong>每个 Mat 对象有自己的信息头，但共享同一个矩阵。这通过让矩阵指针指向同一地址而实现。而拷贝构造函数则 只拷贝信息头和矩阵指针 ，而不拷贝矩阵。</strong></p>
<p>但某些时候你仍会想<strong>拷贝矩阵</strong>本身(不只是信息头和矩阵指针)，这时可以使用函数<strong> clone() </strong>或者 <strong>copyTo()</strong> 。</p>
<ul>
<li>OpenCV函数中输出图像的内存分配是自动完成的（如果不特别指定的话）。</li>
<li>使用OpenCV的C++接口时不需要考虑内存释放问题。</li>
<li>赋值运算符和拷贝构造函数（ ctor ）只拷贝信息头。</li>
<li>使用函数 clone() 或者 copyTo() 来拷贝一副图像的矩阵。</li>
</ul>
<h4 id="Mat-ptr"><a href="#Mat-ptr" class="headerlink" title="Mat::ptr"></a><strong>Mat::ptr</strong></h4><p><a href="http://docs.opencv.org/2.4/modules/core/doc/basic_structures.html#mat-ptr" target="_blank" rel="external">ptr API文档</a><br>Returns a pointer to the specified matrix row<br>返回指向指定矩阵行的指针</p>
<h4 id="Mat-channels"><a href="#Mat-channels" class="headerlink" title="Mat::channels"></a><strong>Mat::channels</strong></h4><p><a href="http://docs.opencv.org/2.4/modules/core/doc/basic_structures.html#mat-channels" target="_blank" rel="external">channels API文档</a><br>Returns the number of matrix channels.<br>对channels（通道）的理解可能会比较抽象一些，可以参考下列链接：<br><a href="http://blog.csdn.net/chenyusiyuan/article/details/4662783" target="_blank" rel="external">《图像的通道（channels）问题》</a></p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a><strong>API</strong></h2><h3 id="imread"><a href="#imread" class="headerlink" title="imread"></a><strong>imread</strong></h3><p><a href="http://docs.opencv.org/modules/highgui/doc/reading_and_writing_images_and_video.html#imread" target="_blank" rel="external">imread API文档</a><br>imread：读取图片文件，并按照一定的格式将其返回（Mat对象）<br><strong>C++: Mat imread(const string&amp; filename, int flags=1 )</strong><br>Python: cv2.imread(filename[, flags]) → retval<br>C: IplImage<em> cvLoadImage(const char</em> filename, int iscolor=CV_LOAD_IMAGE_COLOR )<br>C: CvMat<em> cvLoadImageM(const char</em> filename, int iscolor=CV_LOAD_IMAGE_COLOR )<br>Python: cv.LoadImage(filename, iscolor=CV_LOAD_IMAGE_COLOR) → None<br>Python: cv.LoadImageM(filename, iscolor=CV_LOAD_IMAGE_COLOR) → None</p>
<p>Parameters:    </p>
<ul>
<li>filename – Name of file to be loaded.</li>
<li>flags –Flags specifying the color type of a loaded image:<ul>
<li>CV_LOAD_IMAGE_ANYDEPTH - If set, return 16-bit/32-bit image when the input has the corresponding depth, otherwise convert it to 8-bit.</li>
<li>CV_LOAD_IMAGE_COLOR - If set, always convert image to the color one</li>
<li>CV_LOAD_IMAGE_GRAYSCALE - If set, always convert image to the grayscale one</li>
<li><blockquote>
<p>0 Return a 3-channel color image.<br>Note In the current implementation the alpha channel, if any, is stripped from the output image. Use negative value if you need the alpha channel.</p>
</blockquote>
</li>
</ul>
</li>
<li>=0 Return a grayscale image.</li>
<li>&lt;0 Return the loaded image as is (with alpha channel).</li>
</ul>
<h3 id="cvtColor"><a href="#cvtColor" class="headerlink" title="cvtColor"></a><strong>cvtColor</strong></h3><p><a href="http://docs.opencv.org/modules/imgproc/doc/miscellaneous_transformations.html#cvtcolor" target="_blank" rel="external">cvtColor API文档</a><br>对图片进行处理，从一种颜色空间转换到另一种颜色空间（Converts an image from one color space to another.）</p>
<ul>
<li><strong>RGB &lt;–&gt; GRAY</strong> ( CV_BGR2GRAY, CV_RGB2GRAY, CV_GRAY2BGR, CV_GRAY2RGB )</li>
<li><strong>RGB &lt;–&gt;  CIE XYZ.Rec 709 with D65 white point </strong>( CV_BGR2XYZ, CV_RGB2XYZ, CV_XYZ2BGR, CV_XYZ2RGB )</li>
<li><strong>RGB &lt;–&gt; YCrCb JPEG (or YCC)</strong> ( CV_BGR2YCrCb, CV_RGB2YCrCb, CV_YCrCb2BGR, CV_YCrCb2RGB )</li>
<li><strong>RGB &lt;–&gt; HSV</strong> ( CV_BGR2HSV, CV_RGB2HSV, CV_HSV2BGR, CV_HSV2RGB )</li>
<li><strong>RGB &lt;–&gt; HLS</strong> ( CV_BGR2HLS, CV_RGB2HLS, CV_HLS2BGR, CV_HLS2RGB )</li>
<li><strong>RGB &lt;–&gt; CIE L<em>a</em>b* </strong>( CV_BGR2Lab, CV_RGB2Lab, CV_Lab2BGR, CV_Lab2RGB )</li>
<li><strong>RGB &lt;–&gt; CIE L<em>u</em>v* </strong>( CV_BGR2Luv, CV_RGB2Luv, CV_Luv2BGR, CV_Luv2RGB )</li>
<li><strong>Bayer -&gt; RGB</strong> ( CV_BayerBG2BGR, CV_BayerGB2BGR, CV_BayerRG2BGR, CV_BayerGR2BGR, CV_BayerBG2RGB, CV_BayerGB2RGB, CV_BayerRG2RGB, CV_BayerGR2RGB )</li>
</ul>
<h3 id="split"><a href="#split" class="headerlink" title="split"></a><strong>split</strong></h3><p><a href="http://docs.opencv.org/2.4/modules/core/doc/operations_on_arrays.html#split" target="_blank" rel="external">split API文档</a><br>split函数的主要功能是把一个彩色图像分割成3个通道，方便进一步的图像处理，具体说明如下：<br>split Divides a multi-channel array into several single-channel arrays.<br>C++: void split(const Mat&amp; mtx, Mat* mv)<br>C++: void split(const Mat&amp; mtx, vector&amp; mv)</p>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a><strong>merge</strong></h3><p><a href="http://docs.opencv.org/2.4/modules/core/doc/operations_on_arrays.html#merge" target="_blank" rel="external">merge API文档</a><br>merge可以实现与split相反的操作，简单说明如下：<br>merge Composes a multi-channel array from several single-channel arrays.<br>C++: void merge(const Mat* mv, size_t count, OutputArray dst)<br>C++: void merge(const vector&amp; mv, OutputArray dst)</p>
<h3 id="mixChannels"><a href="#mixChannels" class="headerlink" title="mixChannels"></a><strong>mixChannels</strong></h3><p><a href="http://docs.opencv.org/2.4/modules/core/doc/operations_on_arrays.html#mixChannels" target="_blank" rel="external">mixChannels API文档</a></p>
<h3 id="equalizeHist"><a href="#equalizeHist" class="headerlink" title="equalizeHist"></a><strong>equalizeHist</strong></h3><p><a href="http://docs.opencv.org/2.4/modules/imgproc/doc/histograms.html#equalizehist" target="_blank" rel="external">equalizeHist API文档</a><br><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/histograms/histogram_equalization/histogram_equalization.html" target="_blank" rel="external">直方图均衡化</a><br>将灰度图进行直方图均衡化（直方图均衡化是通过拉伸像素强度分布范围来增强图像对比度的一种方法）</p>
<p>C++: void equalizeHist(InputArray src, OutputArray dst)<br>Python: cv2.equalizeHist(src[, dst]) → dst<br>C: void cvEqualizeHist(const CvArr<em> src, CvArr</em> dst)<br>Parameters:<br>src – Source 8-bit single channel image.<br>dst – Destination image of the same size and type as src .</p>
<p>原理：<br>1，Calculate the histogram H for src .<br>2，Normalize the histogram so that the sum of histogram bins is 255.<br>3，Compute the integral of the histogram:<br><img src="/hello-world/img/sum_H.png" alt="求和"><br>4，Transform the image using H’ as a look-up table: <strong>dst(x,y) = H’(src(x,y))</strong></p>
<p>The algorithm normalizes the brightness and increases the contrast of the image.</p>
<h3 id="threshold"><a href="#threshold" class="headerlink" title="threshold"></a><strong>threshold</strong></h3><p><a href="http://docs.opencv.org/2.4/modules/imgproc/doc/miscellaneous_transformations.html#thresh" target="_blank" rel="external">threshold API文档</a><br><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/threshold/threshold.html#basic-threshold" target="_blank" rel="external">阈值化</a></p>
<ul>
<li>最简单的图像分割的方法。</li>
<li>应用举例：从一副图像中利用阈值分割出我们需要的物体部分（当然这里的物体可以是一部分或者整体）。这样的图像分割方法是基于图像中物体与背景之间的灰度差异，而且此分割属于像素级的分割。</li>
<li>为了从一副图像中提取出我们需要的部分，应该用图像中的每一个像素点的灰度值与选取的阈值进行比较，并作出相应的判断。（注意：阈值的选取依赖于具体的问题。即：物体在不同的图像中有可能会有不同的灰度值。</li>
<li>一旦找到了需要分割的物体的像素点，我们可以对这些像素点设定一些特定的值来表示。（例如：可以将该物体的像素点的灰度值设定为：‘0’（黑色）,其他的像素点的灰度值为：‘255’（白色）；当然像素点的灰度值可以任意，但最好设定的两种颜色对比度较强，方便观察结果）</li>
</ul>
<p>C++: double threshold(InputArray src, OutputArray dst, double thresh, double maxval, int type)<br>Python: cv2.threshold(src, thresh, maxval, type[, dst]) → retval, dst<br><img src="/hello-world/img/opencv_threshold_type.png" alt="阈值函数的5种类型"></p>
<h3 id="erode"><a href="#erode" class="headerlink" title="erode"></a><strong>erode</strong></h3><p><a href="http://docs.opencv.org/2.4/modules/imgproc/doc/filtering.html#erode" target="_blank" rel="external">erode API文档</a><br><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html#" target="_blank" rel="external">腐蚀操作</a><br>C++: void erode(InputArray src, OutputArray dst, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar&amp; borderValue=morphologyDefaultBorderValue() )<br>Python: cv2.erode(src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) → dst</p>
<h3 id="dilate"><a href="#dilate" class="headerlink" title="dilate"></a><strong>dilate</strong></h3><p><a href="http://docs.opencv.org/2.4/modules/imgproc/doc/filtering.html#dilate" target="_blank" rel="external">dilate API文档</a><br><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html#" target="_blank" rel="external">膨胀操作</a><br>C++: void dilate(InputArray src, OutputArray dst, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar&amp; borderValue=morphologyDefaultBorderValue() )<br>Python: cv2.dilate(src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) → dst</p>
<h3 id="open"><a href="#open" class="headerlink" title="open"></a><strong>open</strong></h3><p>开运算：开运算是通过先对图像腐蚀再膨胀实现的,能够排除小团块物体(假设物体较背景明亮)。<br><strong>dst = open(src,element) = dilate( erode(src, element) )</strong><br><img src="/hello-world/img/open.png" alt="开操作"></p>
<h3 id="close"><a href="#close" class="headerlink" title="close"></a><strong>close</strong></h3><p>闭运算：闭运算是通过先对图像膨胀再腐蚀实现的,能够排除小型黑洞(黑色区域)。<br><strong>dst = close(src,element) = erode( dilate(src, element) )</strong><br><img src="/hello-world/img/close.png" alt="闭操作"></p>
<h3 id="形态梯度-Morphological-Gradient"><a href="#形态梯度-Morphological-Gradient" class="headerlink" title="形态梯度(Morphological Gradient)"></a><strong>形态梯度(Morphological Gradient)</strong></h3><p>膨胀图与腐蚀图之差,能够保留物体的边缘轮廓。<br><strong>dst = morph_grad(src,element) = dilate(src, element) - erode(src, element)</strong><br><img src="/hello-world/img/grad.png" alt="形态梯度"></p>
<h3 id="顶帽-Top-Hat"><a href="#顶帽-Top-Hat" class="headerlink" title="顶帽(Top Hat)"></a><strong>顶帽(Top Hat)</strong></h3><p>原图像与开运算结果图之差。<br><strong>dst = tophat(src,element)  = src - open(src, element) </strong><br><img src="/hello-world/img/tophat.png" alt="顶帽"></p>
<h3 id="黑帽-Black-Hat"><a href="#黑帽-Black-Hat" class="headerlink" title="黑帽(Black Hat)"></a><strong>黑帽(Black Hat)</strong></h3><p>闭运算结果图与原图像之差。<br><strong>dst = blackhat(src,element)  = close(src, element) - src</strong><br><img src="/hello-world/img/tophat.png" alt="顶帽"></p>
<h3 id="findcontours"><a href="#findcontours" class="headerlink" title="findcontours"></a>findcontours</h3><p><a href="http://docs.opencv.org/modules/imgproc/doc/structural_analysis_and_shape_descriptors.html#findcontours" target="_blank" rel="external">findcontours API</a><br><a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/tutorials/imgproc/shapedescriptors/find_contours/find_contours.html#find-contours" target="_blank" rel="external">在图像中寻找轮廓</a></p>
<h3 id="Sobel算子"><a href="#Sobel算子" class="headerlink" title="Sobel算子"></a>Sobel算子</h3><ul>
<li>Sobel 算子是一个离散微分算子 (discrete differentiation operator)。 它用来计算图像灰度函数的近似梯度。</li>
<li>Sobel 算子结合了高斯平滑和微分求导</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;opencv在图像处理中使用广泛，许多常见的应用场景例如人脸识别，车牌识别等都是基于opencv开发的。本文是学习opencv api的一些笔记。&lt;br&gt;感兴趣的朋友欢迎加入&lt;strong&gt;学习小组QQ群: 193765960&lt;
    
    </summary>
    
      <category term="opencv" scheme="http://yoursite.com/categories/opencv/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>App移动端项目管理</title>
    <link href="http://yoursite.com/2016/11/11/App%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2016/11/11/App移动端项目管理/</id>
    <published>2016-11-11T02:10:37.000Z</published>
    <updated>2016-11-16T10:02:31.174Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>刚刚做完一个项目，值得总结，在此记录一下。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> 。 欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
</blockquote>
<h3 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a><strong>项目流程</strong></h3><p>一款应用的开发大体流程如下：<br>1、项目立项：产品经理<br>2、需求确认：产品经理(业务逻辑说明文档)<br>3、业务确认：产品经理，技术经理，架构师<br>4、业务架构：技术经理，架构师（业务流程文档）<br>5、UI确认：产品经理，设计人员，开发人员全体<br>6、UI交互确认：产品经理，移动端，前段开发人员<br>7、接口确认：架构师，接口开发人员，移动端、前端开发人员<br>8.1、UI工时评估：产品经理，设计人员<br>8.2、接口工时评估：架构师，接口开发人员<br>8.3、移动端、前端工时评估：相关开发人员，技术经理<br>9、工时确认：产品经理，技术经理，设计人员<br>10、项目开发<br>11、测试用例及流程设计：产品经理、测试组<br>12、测试用例及流程确认：产品经理、开发人员，测试组<br>13、测试及debug：产品经理，测试组，开发<br>14、产品定版，release</p>
<h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a><strong>项目管理</strong></h3><h4 id="文档管理：SVN服务器管理"><a href="#文档管理：SVN服务器管理" class="headerlink" title="文档管理：SVN服务器管理"></a><strong>文档管理：</strong>SVN服务器管理</h4><p>1、需求文档：需求列表，业务说明文档<br>2、UI交互文档：交互稿（交互细节）<br>3、技术文档：业务逻辑的技术实现流程（技术流程文档：异常处理）<br>4、接口文档：数据格式（统一大小写，编码格式，浮点型精度，使用long类型表示浮点数据），通讯协议，数据结构<br>5、设计文档：效果图，切图，标注图<br>6、代码：代码更新和共同维护<br>7、上线资料<br>8、测试用例</p>
<h4 id="流程管理："><a href="#流程管理：" class="headerlink" title="流程管理："></a><strong>流程管理：</strong></h4><p>1、需求变更：原则上可以中前期增加需求；原则上不允许频繁变更需求；原则上不允许修改业务逻辑。需求变更必须经过产品经理、技术经理共同确认后才可变更。<br>2、业务逻辑变更：原则上不允许更改业务逻辑。<br>3、技术逻辑变更：架构师，接口开发人员，移动端开发人员共同确认<br>4、测试流程变更：产品经理确认</p>
<h4 id="开发管理："><a href="#开发管理：" class="headerlink" title="开发管理："></a><strong>开发管理：</strong></h4><p>1、开发人员：明确需求和业务、交互逻辑。开发以需求和业务逻辑为准。<br>2、发现业务缺陷：需与产品经理，技术经理汇报。如要变更业务逻辑：必须重新评估开发工时和工期。<br>3、如没有明确要求，UI在细节和使用习惯上，请尽量遵守各自系统的设计规范。<br>4、协同开发：需分工明确，工作量尽量均衡。分工应报与技术经理知晓。<br>5、变更需求，开发人员需向技术经理确认。<br>6、当前的bug,当日尽量解决。<br>7、优化性、新需求性bug：请分发产品经理。<br>8、优化性、新需求性修改：请知会其他平台开发人员。<br>9、周报：本周开发内容；本周技术点总结；自评开发中最好的地方；遇到的问题；下周计划。</p>
<h4 id="测试：mantis-bug-tracker管理bug"><a href="#测试：mantis-bug-tracker管理bug" class="headerlink" title="测试：mantis bug tracker管理bug"></a><strong>测试</strong>：mantis bug tracker管理bug</h4><p>1、新需求性bug：提交产品经理，产品经理作为新需求提出，不分发bug。<br>2、优化型bug：提交产品经理，产品经理作为新需求提出，不分发bug。<br>3、开发bug：提交开发人员。</p>
<p>注：<br>1、明确bug等级，非业务性bug、非严重缺陷bug、非崩溃性bug谨慎提交为严重缺陷等级。<br>2、重点把握测试流程，明确测试方向：前期重点为功能性测试，业务逻辑测试。中后期加入交互性测试。<br>3、谨慎使用边开发边测试的开发测试流程：这种模式下，请明确测试重点（开发完毕前侧重功能性、业务性测试）<br>4、开发没有结束前的测试：测试人员禁止频繁交涉开发人员，所有bug只需提交服务器。<br>5、测试人员发起的需求性、优化性bug，请提交产品经理，产品经理请严格遵守需求变更流程。</p>
<h4 id="上线："><a href="#上线：" class="headerlink" title="上线："></a><strong>上线：</strong></h4><p>1、测试发布测试完结，产品达到上线要求报告。<br>2、技术经理发布上线申请。<br>3、产品经理确认可以上线，发布上线请求。<br>4、上线人员release应用到各个渠道，上线后邮件知会相关人员产品上线情况。</p>
<h3 id="项目总结："><a href="#项目总结：" class="headerlink" title="项目总结："></a><strong>项目总结：</strong></h3><p>1、产品经理：新需求追加列表，优化性需求追加列表。<br>2、设计人员：改版明细<br>3、开发人员：改版明细，开发模块，代码量及技术点总结报告。<br>4、测试报告，测试数据统计。<br>5、项目总结报告</p>
<h3 id="情绪管理"><a href="#情绪管理" class="headerlink" title="情绪管理"></a><strong>情绪管理</strong></h3><p>情绪管理在项目开发中尤其是高压快节奏的开发中很重要但也很容易被忽略。一旦产生了情绪，对项目的推进和沟通必然存在影响。</p>
<p>其实，开发人员希望自己能够开发出具有良好用户体验和易扩展的应用；测试人员希望尽可能多的测出bug，尽可能的优化用户体验；产品经理希望自己的产品能够尽量的功能完善，体验最佳；管理人员希望我们的软件能够尽可能的稳定、健壮。</p>
<p><strong>单独来看，大家的意愿和目标都是好的，高度一致的，那为什么还会产生情绪，进而发生执行困难呢？</strong><br>经过思考，总结出大体以下几点：<br>1、初期业务没有思虑清晰、周全，导致中后期业务逻辑发生改变。<br>2、业务逻辑的改变，导致UI交互逻辑的改变。<br>3、业务和交互逻辑（流程）缺乏有效、明确的文档，导致开发人员、产品对业务的理解各自出现偏差，这种偏差发现的越晚，矛盾就会越大。<br>4、研发人员技术崇拜，又或者软件上的设计方案和各平台本身的设计规范冲突，导致开发人员的开发意愿和产品经理的设计意愿冲突。<br>5、高强度工作等导致的生理性反应。<br>6、不同平台的开发者之间，对一些细节或需求变更没有相互通知，造成相互挖坑的被坑情绪。<br>7、加入存在边开发边测试的情况，测试人员频繁的交涉技术人员，会导致开发流程中断，在开发阶段为开发人员产生非功能性、业务逻辑性的bug,导致开发人员可测试人员各自的情绪波动。<br>8、产品失败，努力白流，付出无法得到认可导致的情绪。</p>
<p>以上几点，基本可以涵盖主要的影响整个产品涉及人员的情绪波动的原因。<br><strong>那么，该如何尽量的减少负面的情绪波动呢？</strong><br>1、产品在立项和需求确认阶段，要充分的讨论和思考整个业务逻辑，尽量达到少更改或不更改需求。<br>2、业务逻辑和交互逻辑，要形成明确细致的流程性文档，避免出现需求不明确和业务理解偏差。<br>3、在开发阶段，产品与测试人员尽量减少交涉，有问题尽量通过技术经理沟通传达。<br>4、在产品开发阶段，如果要进行并行测试，尽量合理规划测试流程，明确测试重点。<br>5、整个产品周期中，遇到任何问题，需要主动沟通。<br>6、开发启动前，明确项目的管理流程，开发中尽量严格按照管理流程推进。<br>7、产生负面情绪，要学会调节和沟通释放负面情绪，归根结底，大家的目标都是一致的。</p>
<p><strong>后记</strong><br>流程是死的，人是活的，问题是在所难免的。在实际的项目管理中，各自都尽量的把自己的工作在项目早期完善，后面才会更加顺利的推进。<br><img src="/hello-world/img/workload.png" alt="工作状态"><br>如图所示，一项工作，假如我们在前50%的时间完成了80%工作，那么最终的结果我们可能会达到90%或100%期望；如果我们在前50%的时间只完成了30%的工作，那么我们就有很大的风险到最后只达到60%的期望。</p>
<p>这是我以前学到的一个道理，送给各位看官。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;刚刚做完一个项目，值得总结，在此记录一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版权归作者所有，如有转发，请注明文章出处：&lt;a href=&quot;https://xiaodanchen.github.io/archives
    
    </summary>
    
      <category term="项目管理" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>机器学习：概论</title>
    <link href="http://yoursite.com/2016/11/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%A6%82%E8%AE%BA/"/>
    <id>http://yoursite.com/2016/11/06/机器学习：概论/</id>
    <published>2016-11-06T05:44:50.000Z</published>
    <updated>2016-11-07T02:54:31.839Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>本文是对“从机器学习谈起.pdf”的笔记。<br>感兴趣的朋友欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h2 id="一个故事说明什么是机器学习"><a href="#一个故事说明什么是机器学习" class="headerlink" title="一个故事说明什么是机器学习"></a>一个故事说明什么是机器学习</h2><p>等人问题：</p>
<h2 id="机器学习的定义"><a href="#机器学习的定义" class="headerlink" title="机器学习的定义"></a>机器学习的定义</h2><p>机器学习就是计算机利用已有数据，得出某种模型，然后利用该模型预测未来的一种方法。<br>区别于我们常见的计算机程序基于因果（固定程序方法）的，机器学习是基于经验（数据）的算法。</p>
<h2 id="机器学习的范围"><a href="#机器学习的范围" class="headerlink" title="机器学习的范围"></a>机器学习的范围</h2><ul>
<li>模式识别：模式识别=机器学习。模式识别源于工业界，机器学习源于计算机科学，二者是统一问题在两个领域的不同体现。</li>
<li>数据挖掘：数据挖掘=机器学习+数据库。</li>
<li>统计学习：统计学习近似于机器学习。机器学习的大量方法来自于统计学，区别是，前者偏重于数学领域，后者偏重于实践。</li>
<li>计算机视觉：计算机视觉=图像处理+机器学习。图像处理技术将图片处理成时候机器学习算法适用的输入数据，学习算法则根据机器学习模型从输入图像中识别出相关的模式。例如：百度识图，手写输入，车牌识别等。</li>
<li>语音识别：语音处理+机器学习。</li>
<li>自然语言处理：文本处理+机器学习。</li>
</ul>
<h2 id="机器学习的方法"><a href="#机器学习的方法" class="headerlink" title="机器学习的方法"></a>机器学习的方法</h2><h3 id="回归算法"><a href="#回归算法" class="headerlink" title="回归算法"></a>回归算法</h3><ul>
<li><strong>线性回归</strong>：数值问题。最小二乘法；数值计算：梯度下降法，牛顿法<br>例子：预测房价问题。</li>
<li><strong>逻辑回归</strong>：分类问题。<br>例子：预测肿瘤问题。<h3 id="神经网络："><a href="#神经网络：" class="headerlink" title="神经网络："></a>神经网络：</h3>ANN（人工神经网络）算法，<strong>BP算法（加速神经网络训练过程的数值算法）</strong>。神经网络学习的机理简单来说就是<strong>“分解与组合”</strong>。</li>
</ul>
<p>下面让我们来看一个简单的神经网络模型：输入层 -&gt; 隐藏层 -&gt; 输出层。输入层负责接收信号数据。隐藏层负责数据的分析和处理，最后将结果整合输出到输出层。<br><img src="/hello-world/img/simple_ann.png" alt="简单神经网络模型"><br>如图：每层中的一个元代表了一个处理单元，模拟了一个神经元。若干个处理单元组成一个层，若干个层组成一个简单的“神经网络”。</p>
<p>在神经网络中，每个处理单元实际上就是一个“逻辑回归模型”。逻辑回归模型接收上一层的输入，把模型的预测结果作为输出传递给下一层。通过这样的过程，神经网络可以实现非常复杂的非线性分类。</p>
<p>进入90年代，神经网络算法进入一个瓶颈期，原因是虽然具有<strong>BP算法</strong>的加速，神经网络的训练过程仍然很困难。因此90年代后期支持向量机算法（SVM）取代了神经网络的地位。</p>
<h3 id="支持向量机（SVM）算法："><a href="#支持向量机（SVM）算法：" class="headerlink" title="支持向量机（SVM）算法："></a>支持向量机（SVM）算法：</h3><p>支持向量机算法是但是与统计学习界，同时在机器学习界大放光彩的经典算法。</p>
<p>SVM从某种意义上来说是逻辑回归算法的强化：通过给与逻辑回归算法更加严格的优化条件，SVM可以获得比逻辑回归算法更好的分类界限，从而达成很好的效果。</p>
<p>通过和<strong>高斯“核“</strong>的结合，SVM可以表达出非常复杂的分类界线。”核”实际上是一种特殊的函数，最典型的特征就是可以将低维的空间映射到高维的空间(但却不会带来计算复杂性的提升)。</p>
<p>SVG一直占据着机器学习最核心的地位，基本取代了神经网络算法，直至近期神经网络接着<strong>深度学习</strong>重新崛起，两者之间才又发生了微妙的平衡变化。</p>
<h3 id="聚类算法："><a href="#聚类算法：" class="headerlink" title="聚类算法："></a>聚类算法：</h3><p>前面的算法一个显著的特征就是训练数据中包含了标签，训练出的模型可以对其他数据预测标签，即<strong>监督式学习</strong>。<br>在下面的算法中，训练数据是不含标签的，而算法的目的是通过训练，推测这些数据的标签，即<strong>无监督算法</strong>。<br>无监督式学习最典型的算法就是聚类算法。比如K-Means算法。</p>
<h3 id="降维（特征量）算法："><a href="#降维（特征量）算法：" class="headerlink" title="降维（特征量）算法："></a>降维（特征量）算法：</h3><p>降维算法也是一种无监督式学习算法，其特征就是将数据从高位降低到低维层次。<br>降维算法的主要作用是压缩数据以及提升其他算法的效率。降维算法的另一个好处是可以实现数据的可视化（降维至3维以下）。<br>降维算法的代表是<strong>PCA算法（主成分分析算法）</strong>。</p>
<h3 id="推荐算法："><a href="#推荐算法：" class="headerlink" title="推荐算法："></a>推荐算法：</h3><p>推荐算法是目前非常火的一种算法，在电商领域得到了非常广泛的运用。推荐算法的主要特征就是可以自动向用户推荐他们感兴趣的东西，从而增加购买率，提升效率。<br>推荐算法有两个主要的类别：</p>
<ul>
<li><strong>基于物品内容的推荐：</strong>是将与用户购买的内容相似的物品推荐给用户。这样的前提是每个物品都得有若干个标签，好处是物品关联度较大，缺点是因为每个物品都要贴标签，工作量较大。</li>
<li><strong>基于用户相似度的推荐：</strong>是将与目标用户兴趣相同的其他用户购买的物品推荐给目标用户。<br>这两种类别的算法各有优缺点，一般混合使用。最著名的就是<strong>协同过滤算法</strong>。<h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3>除了以上算法外，机器学习领域还有其他算法，例如：高斯判别，朴素贝叶斯算法，决策树等等。但是上面六种是使用最多，影响最广，类型最全的典型算法。</li>
</ul>
<h2 id="机器学习的应用–大数据"><a href="#机器学习的应用–大数据" class="headerlink" title="机器学习的应用–大数据"></a>机器学习的应用–大数据</h2><p>众所周知，现在是大数据的时代。那么，到底什么是大数据呢？实际上，大数据是一门实实在在的有着基础理论和科学研究背景的一门技术，其中包含着分布式计算、内存计算、机器学习、计算机视觉、语音识别、自然语言处理等众多计算机界崭新的技术，而且是这些技术综合的产物。</p>
<p>事实上，大数据包含着4大特征，即4V理念：Volume(体量)、Varity(多样性)、Velocity(速度)、Value(价值)。如图：<br><img src="/hello-world/img/bigData.png" alt="大数据"></p>
<p>大数据的核心是利用<strong>数据的价值</strong>，机器学习是利用数据价值的关键技术。同时，复杂的机器学习算法的计算时间迫切需要<strong>分布式计算</strong>，<strong>内存计算</strong>这样的关键技术。机器学习与大数据二者是相辅相成，相互促进的关系。</p>
<p><strong>成功的机器学习应用不是拥有最好算法，而是拥有做多的数据。</strong><br>大数据分布式计算技术<strong>Map-Reduce</strong>使得计算越来越快。</p>
<h2 id="机器学习的子类–深度学习"><a href="#机器学习的子类–深度学习" class="headerlink" title="机器学习的子类–深度学习"></a>机器学习的子类–深度学习</h2><p>进来，机器学习的发展产生了一个新的方向：深度学习。听起来非常高大上，但其原理非常简单，即将传统的神经网络发展到了多隐藏层的地步。</p>
<p>2006年Geoffrey Hinton在《科学》杂志上发表了一片文章，论证了两个观点：<br><strong>1，多隐藏层的神经网络具有优异的特征学习能力，学习到的特征对数据有更本质的刻画，从而有利于可视化和分类。<br>2，深度神经网络在训练上的难度，可以通过“逐层初始化”来有效克服。</strong></p>
<h2 id="机器学习的父类–人工智能（AI）"><a href="#机器学习的父类–人工智能（AI）" class="headerlink" title="机器学习的父类–人工智能（AI）"></a>机器学习的父类–人工智能（AI）</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;本文是对“从机器学习谈起.pdf”的笔记。&lt;br&gt;感兴趣的朋友欢迎加入&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版权归作者所有，如有转发，请注明文章出处：&lt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Android WebView加载地图HTML设置</title>
    <link href="http://yoursite.com/2016/11/05/Android-WebView%E5%8A%A0%E8%BD%BD%E5%9C%B0%E5%9B%BEHTML%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/11/05/Android-WebView加载地图HTML设置/</id>
    <published>2016-11-05T14:23:04.000Z</published>
    <updated>2016-11-05T14:27:25.885Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>本篇将要介绍Android 通过webview加载地图相关的URL需要的相关设置。<br>欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="适配地图显示所需要的设置"><a href="#适配地图显示所需要的设置" class="headerlink" title="适配地图显示所需要的设置"></a>适配地图显示所需要的设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">webSettings.setDomStorageEnabled(<span class="keyword">true</span>); </div><div class="line">webSettings.setDatabaseEnabled(<span class="keyword">true</span>);</div><div class="line">String dir = getApplicationContext().getDir(<span class="string">"database"</span>, Context.MODE_PRIVATE).getPath();</div><div class="line">webSettings.setGeolocationEnabled(<span class="keyword">true</span>);</div><div class="line">webSettings.setGeolocationDatabasePath(dir);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本篇将要介绍Android 通过webview加载地图相关的URL需要的相关设置。&lt;br&gt;欢迎加入&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版权归作
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/categories/Android/HTML/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Android在断网时本地化显示H5错误页</title>
    <link href="http://yoursite.com/2016/11/05/Android%E5%9C%A8%E6%96%AD%E7%BD%91%E6%97%B6%E6%9C%AC%E5%9C%B0%E5%8C%96%E6%98%BE%E7%A4%BAH5%E9%94%99%E8%AF%AF%E9%A1%B5/"/>
    <id>http://yoursite.com/2016/11/05/Android在断网时本地化显示H5错误页/</id>
    <published>2016-11-05T09:14:10.000Z</published>
    <updated>2016-11-05T09:42:52.213Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>本篇将要介绍如何在没有网络的状态下，显示本地的H5界面,并跳回上级原生界面。<br>欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="实现本地化H5界面："><a href="#实现本地化H5界面：" class="headerlink" title="实现本地化H5界面："></a>实现本地化H5界面：</h3><p>本地化HTML文件，CSS文件，JS文件，图片资源等：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在Android工程assets目录下保存H5界面相关资源和文件，例如：</span></div><div class="line">|assets-----</div><div class="line">       |</div><div class="line">       |--error.html</div><div class="line">       |--css\error_style.css</div><div class="line">       |--js\error.js（由于功能简单，我的demo中就没有单独写成js文件，直接在HTML中实现）</div><div class="line">       |--img\error.png</div><div class="line">       |</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//error.html资源的引用</div><div class="line">﻿<span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"black"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>抱歉，信息加载失败<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    //加载css样式</div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"file:///android_asset/css/error_style.css"</span> /&gt;</span></div><div class="line">    </div><div class="line">    //js接口定义:也可以写成单独的js文件，目录如CSS资源加载目录</div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">        function back() &#123;</div><div class="line">            window.location.href = "activity:finish";//使用重定向，在webActivity中去捕获,"activity:finish"可自行定义</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"ww"</span>&gt;</span></div><div class="line"></div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"yyyy"</span>&gt;</span></div><div class="line">  //加载图片资源</div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"file:///android_asset/img/error.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aaaa"</span>&gt;</span>抱歉，信息加载失败<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bbbb"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:back();"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="点击返回，跳转到上级原生界面："><a href="#点击返回，跳转到上级原生界面：" class="headerlink" title="点击返回，跳转到上级原生界面："></a>点击返回，跳转到上级原生界面：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//WebActivity中捕获重定向url</span></div><div class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(url.length() != <span class="number">0</span> &amp;&amp; url.startsWith(<span class="string">"activity:finish"</span>))&#123;</div><div class="line">        	finish();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">        	view.loadUrl(url);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如何使用："><a href="#如何使用：" class="headerlink" title="如何使用："></a>如何使用：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在需要使用该本地资源的地方重新复制URL：</span></div><div class="line"><span class="comment">//XXXActivity：</span></div><div class="line">url = <span class="string">"file:///android_asset/error.html"</span>;</div><div class="line"> </div><div class="line"><span class="comment">//WebActivity:</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, <span class="keyword">int</span> errorCode, String description, String failingUrl)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onReceivedError(mWebView, errorCode, description, failingUrl);</div><div class="line">	<span class="comment">//判断网络状态的代码请自行实现</span></div><div class="line">	<span class="keyword">if</span>(NetWorkUtil.getNetWorkState(WebPageActivity.<span class="keyword">this</span>) == -<span class="number">1</span>)&#123;</div><div class="line">		view.loadUrl(<span class="string">"file:///android_asset/error.html"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本篇将要介绍如何在没有网络的状态下，显示本地的H5界面,并跳回上级原生界面。&lt;br&gt;欢迎加入&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版权归作者所有
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/categories/Android/HTML/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>架构师之路（一）：门外汉的杂想</title>
    <link href="http://yoursite.com/2016/10/31/%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%97%A8%E5%A4%96%E6%B1%89%E7%9A%84%E6%9D%82%E6%83%B3/"/>
    <id>http://yoursite.com/2016/10/31/架构师之路（一）：门外汉的杂想/</id>
    <published>2016-10-31T03:34:48.000Z</published>
    <updated>2016-11-30T02:46:48.137Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>作为Android移动端的一枚小菜鸟，时不时的也会想想自己未来的路该如何走。架构师是个不错的方向，作为一个门外汉，仅以此篇记录下自己那些七零八碎靠谱或者不靠谱的想法。<br>欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="通讯协议和数据格式"><a href="#通讯协议和数据格式" class="headerlink" title="通讯协议和数据格式"></a>通讯协议和数据格式</h3><p>request、response<br>head、body<br>error code、error message<br>客户端、服务端统一参数定义格式，统一大小写，统一编码格式</p>
<h3 id="接口版本技术："><a href="#接口版本技术：" class="headerlink" title="接口版本技术："></a>接口版本技术：</h3><p>为了兼容不同的软件版本或者业务版本，在后台接口设计的时候加入版本信息字段。后台根据版本信息做逻辑处理。</p>
<h3 id="数据库主键设计"><a href="#数据库主键设计" class="headerlink" title="数据库主键设计"></a>数据库主键设计</h3><p><a href="http://www.jcodecraeer.com/a/shujuku/2012/1014/434.html" target="_blank" rel="external">《数据库主键设计之思考》</a></p>
<h3 id="数据同步技术："><a href="#数据同步技术：" class="headerlink" title="数据同步技术："></a>数据同步技术：</h3><h4 id="唯一标识方案-主键设计参看上面文章-："><a href="#唯一标识方案-主键设计参看上面文章-：" class="headerlink" title="唯一标识方案(主键设计参看上面文章)："></a>唯一标识方案(主键设计参看上面文章)：</h4><p>1、服务器端产生GUID作为数据的唯一标识同步到本地（优点：唯一性；缺点：需要存储多终端oldGUID，数据处理逻辑稍复杂。）</p>
<p>2、使用几个特殊字段拼出一个字符串做加密（MD5?），使用密文作为唯一标识（优点：同步逻辑简单。缺点：字段如果有变化，数据不会作为修改数据而是作为新增数据）</p>
<p>3、业务ID与物理ID：<br>使用GUID作为物理ID；使用某些业务数据拼出的MD5加密字符串作为业务ID。<br>新增、修改、删除数据在向服务器同步时，服务器需要校验业务ID。<br>如果服务器已存在业务ID，根据物理ID来进行数据是新增还是合并。如果数据存在合并，服务器需要向客户端返回合并后的物理ID和客户端原来的物理ID，客户端接收到合并信息后，对本地的数据的物理ID进行修改。</p>
<h4 id="数据同步方案："><a href="#数据同步方案：" class="headerlink" title="数据同步方案："></a>数据同步方案：</h4><p>方案一：<br>1，同步方法：<br>对所有需要同步的数据按新增、修改、删除进行分类。<br>按照修改 -&gt; 删除 -&gt; 新增 -&gt; 查询的流程逐条同步。在每一条同步结束后，回调同步方法。</p>
<p>2，缺点：<br>如果在某条数据同步失败，容易使整个同步流程陷入死循环或者卡壳。<br>死循环：造成应用卡顿，同步失败。<br>卡壳：数据同步失败。</p>
<p>3，解决办法：<br>客户端和服务端要协定好各种业务异常的通知机制。</p>
<p>方案二：<br>1，同步方法：<br>设定初始同步起始物理ID（最小比如“0000”）<br>根据同步起始物理ID，检出本地所有需要同步的数据，数据按物理ID从小到大排序。<br>取出第一条数据，判断数据是新增、修改还是删除。<br>将该条数据的物理ID设置为同步起始物理ID。<br>对该条数据调用相应的同步接口。<br>该条数据返回后，不论是否出现异常，继续回调同步方法（本条数据的物理ID为同步起始ID）。</p>
<p>当所有同步数据同步完成后，清零化同步起始物理ID，查询服务器数据到本地。</p>
<p>2，优点：<br>不会死循环和卡壳</p>
<p>3，缺点：<br>失败的数据不会同步到服务器，除非服务器做特定的兼容和适配。</p>
<p>注意：<br>以上两种方案，在获取到批量数据更新到本地数据库时，需要判断本地数据的状态，本地未同步的数据不允许被服务器的数据覆盖。<br>增量更新。</p>
<h3 id="数据备份技术："><a href="#数据备份技术：" class="headerlink" title="数据备份技术："></a>数据备份技术：</h3><p>双机热备份技术</p>
<blockquote>
<p>未完，待续</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作为Android移动端的一枚小菜鸟，时不时的也会想想自己未来的路该如何走。架构师是个不错的方向，作为一个门外汉，仅以此篇记录下自己那些七零八碎靠谱或者不靠谱的想法。&lt;br&gt;欢迎加入&lt;strong&gt;学习小组QQ群: 19
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Android/Java/"/>
    
      <category term="架构师" scheme="http://yoursite.com/categories/Android/Java/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="架构师" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>Android在H5加载完成前显示加载进度条</title>
    <link href="http://yoursite.com/2016/10/30/Android%E5%9C%A8H5%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%E5%89%8D%E6%98%BE%E7%A4%BA%E5%8A%A0%E8%BD%BD%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>http://yoursite.com/2016/10/30/Android在H5加载完成前显示加载进度条/</id>
    <published>2016-10-30T05:16:56.000Z</published>
    <updated>2016-11-05T09:08:46.193Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>H5加载慢，想要在移动端显示加载进度？答案就是这么简单！<br>欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="实现方案："><a href="#实现方案：" class="headerlink" title="实现方案："></a>实现方案：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_webpage);</div><div class="line">    initData();</div><div class="line">    initView();</div><div class="line">	<span class="comment">//注意：不要在mWebView loadUrl的时候显示进度条，因为这时候有可能你的webActivity的view还没有初始化，造成activity 的content view覆盖了进度条。</span></div><div class="line">    showLoading();</div><div class="line">&#125;</div><div class="line"></div><div class="line">mWebView.setWebChromeClient(<span class="keyword">new</span> WebPageChromeClient()&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</div><div class="line"> 	<span class="comment">//第二次更新：随着mwebview的设置不停增加。不知道什么时候发现进度条又不可见了。</span></div><div class="line">    <span class="comment">//这时候需要加入以下代码：</span></div><div class="line">    <span class="comment">//if(mProgressBar.getVisibility()==ProgressBar.GONE)&#123;</span></div><div class="line">	<span class="comment">//	mProgressBar.setVisibility(ProgressBar.VISIBLE);</span></div><div class="line">	<span class="comment">//&#125;</span></div><div class="line">    <span class="comment">//以上三行代码可以暂时解决问题，mProgressBar是我在BaseActivity中自己定义的对象。</span></div><div class="line">    <span class="keyword">if</span>(mProgressBar.getVisibility()==ProgressBar.GONE)&#123;</div><div class="line">		mProgressBar.setVisibility(ProgressBar.VISIBLE);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="comment">///////////////////////////////////////////////////</span></div><div class="line">    <span class="keyword">if</span>(newProgress == <span class="number">100</span>)&#123;</div><div class="line">    	cancelLoading();<span class="comment">//取消进度条显示</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.onProgressChanged(view, newProgress);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="错误方案："><a href="#错误方案：" class="headerlink" title="错误方案："></a>错误方案：</h3><p>假如你使用了<strong>onPageFinished()方案</strong>，那么恭喜你，你很有可能掉坑里了。因为url如果存在重定向等情况，onPageFinished会多次调用，而且很有可能，H5的界面还没有真正加载显示，你的loading界面就取消掉了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;H5加载慢，想要在移动端显示加载进度？答案就是这么简单！&lt;br&gt;欢迎加入&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;版权归作者所有，如有转发，请注明文
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/categories/Android/HTML/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML与Android、IOS的JS调用</title>
    <link href="http://yoursite.com/2016/10/30/HTML%E4%B8%8EAndroid%E3%80%81IOS%E7%9A%84JS%E8%B0%83%E7%94%A8/"/>
    <id>http://yoursite.com/2016/10/30/HTML与Android、IOS的JS调用/</id>
    <published>2016-10-30T04:49:18.000Z</published>
    <updated>2016-10-30T05:14:46.288Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>近期研究了H5界面与移动端（Android，IOS）的交互方案，记录一下以飨众友。<strong>学习小组QQ群: 193765960</strong>。</p>
<p>本篇重点介绍H5调用移动端接口的通用方案，其他方案或者移动端调用H5接口的方法请自行研究。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><ul>
<li>移动端使用H5自带的标题栏，通过点击H5标题栏返回按钮回退或者跳转到移动端的某个原生界面。</li>
<li>点击H5的电话号码，本地拨打电话<h3 id="解决方案（Android-amp-IOS）"><a href="#解决方案（Android-amp-IOS）" class="headerlink" title="解决方案（Android &amp; IOS）"></a>解决方案（Android &amp; IOS）</h3><strong>1，定义接口</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidJsInterface</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AndroidJsInterface</span><span class="params">(Context activity)</span> </span>&#123;</div><div class="line">		mContext = activity;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@JavascriptInterface</span><span class="comment">//系统sdk 版本在v4.2以上时，必须加这个注解（安全性）</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//点击H5的某个区域，实现APP的跳转（退出WebpageActivity）</span></div><div class="line">		Intent intent = <span class="keyword">new</span> Intent(mContext, MainActivity.class);</div><div class="line">		mContext.startActivity(intent);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>2，activity处理</strong></p>
<ul>
<li><strong>方式一：向webview注册js接口–存在安全隐患（适用于Android，IOS是否适用待确认）</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Android端主要代码</span></div><div class="line">WebSettings webSettings = mWebView.getSettings();</div><div class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">mWebView.addJavascriptInterface(<span class="keyword">new</span> AndroidJsInterface(context), <span class="string">"android"</span>);<span class="comment">//注意：这里一定要让别名的首字母为小写，因为JS端实际调用中会将别名处理成小写。</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//JS端主要代码</span></div><div class="line">jsFun = <span class="keyword">new</span> function()&#123;</div><div class="line">  <span class="keyword">if</span>(app.isIOS())&#123;</div><div class="line">    ......</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(app.isAndroid())&#123;</div><div class="line">    android.fun1();<span class="comment">//别名首字母默认会被处理成小写，所以为了避免调用出错，最好统一采用小写字母</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Html端主要代码</span></div><div class="line">......(通过href或者onclick调用js的jsFun)</div></pre></td></tr></table></figure>
<ul>
<li><strong>方式二：h5重定向URL，移动端捕获（Android，IOS均可）</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Android端主要代码</span></div><div class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (url.length() != <span class="number">0</span> &amp;&amp; url.startsWith(<span class="string">"app:"</span>)) &#123;<span class="comment">//和后台约定好移动端js交互接口重定向URL的前缀：例如“app:”</span></div><div class="line">            <span class="comment">// 获得方法名</span></div><div class="line">            String methodName = url.substring(<span class="string">"app:"</span>.length());</div><div class="line">            <span class="comment">// 通过方法名反射获得方法</span></div><div class="line">            Method method;</div><div class="line">            Class&lt;?&gt; c;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                c = Class.forName(<span class="string">"com.base.web.AndroidJsInterface"</span>);</div><div class="line">                Constructor&lt;?&gt;[] constructors = c.getDeclaredConstructors();</div><div class="line">                Constructor&lt;?&gt; constructor = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; constructors.length; i++) &#123;</div><div class="line">                    constructor = constructors[i];</div><div class="line">                    <span class="keyword">if</span> (constructor.getGenericParameterTypes().length == <span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                constructor.setAccessible(<span class="keyword">true</span>);</div><div class="line">                Object clazz = constructor.newInstance(context);</div><div class="line"></div><div class="line">                method = clazz.getClass().getDeclaredMethod(methodName);</div><div class="line">                <span class="comment">// 执行该方法</span></div><div class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> != method)&#123;</div><div class="line">                    method.setAccessible(<span class="keyword">true</span>);</div><div class="line">                    method.invoke(clazz);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(url.length() != <span class="number">0</span> &amp;&amp; url.startsWith(<span class="string">"tel:"</span>))&#123;</div><div class="line">        	<span class="comment">//打电话：H5直接重定向href=“tel:13120003456”</span></div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_DIAL,</div><div class="line">            Uri.parse(url));</div><div class="line">            startActivity(intent);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">        	view.loadUrl(url);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//JS端主要代码</span></div><div class="line">jsFun1 = <span class="keyword">new</span> function()&#123;</div><div class="line">  window.location.href=<span class="string">"app:fun1"</span>;<span class="comment">//"app:"是和服务器约定好的前缀，fun1是移动端定义的名为fun1的js回调接口</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">jsFun2 = <span class="keyword">new</span> function()&#123;</div><div class="line">  window.location.href=<span class="string">"app:fun2"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Html端主要代码</span></div><div class="line">......(通过href或者onclick调用js的jsFun*)</div></pre></td></tr></table></figure>
<p><strong>需要注意的几点：</strong><br>1，采用方式一，一定要注意别名的首字母小写（是不是需要全部小写没有验证）<br>2，小米系列的手机可能对webview和Android的交互存在一些问题，如果发现交互怎么都不起作用，试试把APP卸载后重新安装（有缓存）。<br>3，使用方式二，一定要注意使用反射时，要调用反射类的构造函数实例化，否则会报告一堆的异常。</p>
<h3 id="H5中使用第三方API-比如百度的导航"><a href="#H5中使用第三方API-比如百度的导航" class="headerlink" title="H5中使用第三方API,比如百度的导航"></a>H5中使用第三方API,比如百度的导航</h3><p>Android中需要做一些特别的设置才可以<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//h5 调用第三方的API：百度导航</span></div><div class="line">webSettings.setDomStorageEnabled(<span class="keyword">true</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;近期研究了H5界面与移动端（Android，IOS）的交互方案，记录一下以飨众友。&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本篇重点介绍H5调用移动端接口的通用方案，其他方案
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/categories/Android/HTML/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title>基于PtrFrameLayout实现自定义仿京东下拉刷新控件</title>
    <link href="http://yoursite.com/2016/10/13/%E5%9F%BA%E4%BA%8EPtrFrameLayout%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%BF%E4%BA%AC%E4%B8%9C%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E6%8E%A7%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/10/13/基于PtrFrameLayout实现自定义仿京东下拉刷新控件/</id>
    <published>2016-10-13T10:36:33.000Z</published>
    <updated>2016-10-14T03:24:34.747Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>最近基于项目需要，使用PtrFrameLayout框架实现了自定义的下拉刷新控件，大体效果类似于京东APP的下拉刷新动态效果。在这里和大家分享一下具体的思路和需要注意的地方，以便帮助有类似开发和学习需求的同学省点时间。如果这篇文章对大家实际开发有所帮助，还望大家多多转发。</p>
<p>由于项目原因，本文不会涉及详细的具体实现，主要是提供思路和关键点。感兴趣的欢迎大家加入<strong>学习小组QQ群</strong>: 193765960，该群是技术分享和讨论群，还请遵守小组纪律。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/" target="_blank" rel="external">https://xiaodanchen.github.io/</a> </p>
</blockquote>
<p><a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">PtrFrameLayout开源项目下载地址</a></p>
<h3 id="实现的目标和效果"><a href="#实现的目标和效果" class="headerlink" title="实现的目标和效果"></a>实现的目标和效果</h3><p>1，尽可能的能够包裹各类布局和控件，不要仅仅适用于listview。<br>2，通过animation-list的xml作为动画的来源，方便替换<br>3，head部分通过layout xml定义，包括至少三部分：动画部分，刷新状态提示，上次刷新时间提示<br>（注：控件不支持上拉加载，其实按照逻辑，加载部分应该由子view自己实现比较好）</p>
<h3 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h3><ul>
<li><strong>MyPtrFrameLayout.java</strong>：最终控件，在我们的layout xml中用来包裹我们需要下拉刷新的布局。该类主要参照官方的<strong>PtrClassicFrameLayout.java</strong>实现。</li>
<li><strong>MyPtrHeaderView.java</strong>：MyPtrFrameLayout的头部，布局由<strong>layout_header_view.xml</strong>定义。该类主要参照官方的<strong>PtrClassicDefaultHeader.java</strong>实现。</li>
<li><strong>MyPtrAnimationDrawable.java</strong>：MyPtrHeaderView的动画部分，动画来源于自定义的<strong>res/drawable/xxx_animation.xml</strong></li>
</ul>
<h3 id="代码精要"><a href="#代码精要" class="headerlink" title="代码精要"></a>代码精要</h3><h4 id="MyPtrAnimationDrawable-java"><a href="#MyPtrAnimationDrawable-java" class="headerlink" title="MyPtrAnimationDrawable.java"></a>MyPtrAnimationDrawable.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPtrAnimationDrawable</span> <span class="keyword">extends</span> <span class="title">Drawable</span> <span class="keyword">implements</span> <span class="title">Animatable</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyPtrAnimationDrawable</span><span class="params">(Context context, View parent)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">        mParent = parent;</div><div class="line">        initAnimations();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    ......</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">		mAnimation.start();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</div><div class="line">        mAnimation.stop();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initAnimations</span><span class="params">()</span> </span>&#123;</div><div class="line">    	mParent.setBackgroundResource(R.drawable.xxx_animation);</div><div class="line">    	mAnimation = (AnimationDrawable) mParent.getBackground();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="MyPtrHeaderView-java"><a href="#MyPtrHeaderView-java" class="headerlink" title="MyPtrHeaderView.java"></a>MyPtrHeaderView.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPtrHeaderView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> <span class="keyword">implements</span> <span class="title">PtrUIHandler</span> </span>&#123;</div><div class="line">  ......</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        View header = LayoutInflater.from(getContext()).inflate(R.layout.layout_header_view, <span class="keyword">this</span>);</div><div class="line">        </div><div class="line">        mAnimaView = header.findViewById(R.id.xxx);</div><div class="line">        mDrawable = <span class="keyword">new</span> MyPtrAnimationDrawable(mContext, mAnimaView);</div><div class="line">        mDrawable.start();</div><div class="line">        mRefreshTextView = (TextView) header.findViewById(R.id.yyy);</div><div class="line">        mLastUpdateTextView = (TextView) header.findViewById(R.id.zzz);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ......</div><div class="line">    <span class="comment">//主要逻辑参照官方的**PtrClassicDefaultHeader.java**实现，代码官方类都有。这里不方便多写，但是不难，基本逻辑都一样。说白了就是替换，窗户纸一层。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="MyPtrFrameLayout-java"><a href="#MyPtrFrameLayout-java" class="headerlink" title="MyPtrFrameLayout.java"></a>MyPtrFrameLayout.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//该类主要参照官方的**PtrClassicFrameLayout.java**实现。代码总共没有多少行，纯替换。非重点就不啰嗦的贴代码了。</span></div></pre></td></tr></table></figure>
<h3 id="重要的知识点（-）"><a href="#重要的知识点（-）" class="headerlink" title="重要的知识点（*）"></a>重要的知识点（<strong><strong>*</strong></strong>）</h3><ul>
<li><p>当我们的下拉刷新控件包裹了可滑动的视图布局时，当视图上滑出屏幕一部分时再下拉视图，会发现我们的视图滑出去的部分没有滑回来，而是出现了被下来控件headerview遮盖的情况。</p>
</li>
<li><p>通过设置setPullToRefresh（boolean pull_2_fresh）方法可以设置释放刷新还是下拉过程中到达刷新边界自动刷新</p>
</li>
</ul>
<p>经查资料，发现官方早已给我们封装好了默认的处理类。不废话，直接上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加入在MainActivity中使用了MyPtrFrameLayout下拉刷新控件布局</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> initView（）&#123;</div><div class="line">  frame = (MyPtrFrameLayout) view.findViewById(R.id.my_ptr_framelayout);</div><div class="line">  frame.setPullToRefresh(<span class="keyword">true</span>);<span class="comment">//true:下拉过程中刷新；false：释放刷新</span></div><div class="line">  frame.setLastUpdateTimeKey(HomePage.class.getName());</div><div class="line">  <span class="comment">//以下代码是解决滑出视图被遮盖的关键：</span></div><div class="line">  <span class="comment">//1. 使用官方提供的PtrDefaultHandler类</span></div><div class="line">  frame.setPtrHandler(<span class="keyword">new</span> PtrDefaultHandler() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkCanDoRefresh</span><span class="params">(PtrFrameLayout frame, View content, View header)</span> </span>&#123;</div><div class="line">        	<span class="comment">//2. 使用这个代码可以解决滑动冲突（*****）,切记</span></div><div class="line">        	<span class="keyword">return</span> PtrDefaultHandler.checkContentCanBePulledDown(frame, content, header)&amp;&amp;!frame.isRefreshing();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefreshBegin</span><span class="params">(PtrFrameLayout frame)</span> </span>&#123;</div><div class="line">        	<span class="comment">//加载数据，回调刷新界面的代码</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考：<br><a href="http://blog.csdn.net/wateryi/article/details/51315079" target="_blank" rel="external">下拉刷新PtrFrameLayout组件的使用</a></p>
<blockquote>
<p>这篇文章中所用到的代码项目原因可能具有版权问题，大家是在实际开发中还是以参考借鉴为主吧。最后，如果这篇文章对大家有帮助，大家就偷偷看吧，项目原因就不要太扩散了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;最近基于项目需要，使用PtrFrameLayout框架实现了自定义的下拉刷新控件，大体效果类似于京东APP的下拉刷新动态效果。在这里和大家分享一下具体的思路和需要注意的地方，以便帮助有类似开发和学习需求的同学省点时间。如果这篇文
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="pull-to-refresh" scheme="http://yoursite.com/categories/Android/pull-to-refresh/"/>
    
      <category term="下拉刷新" scheme="http://yoursite.com/categories/Android/pull-to-refresh/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="pull-to-refresh" scheme="http://yoursite.com/tags/pull-to-refresh/"/>
    
      <category term="PtrFrameLayout" scheme="http://yoursite.com/tags/PtrFrameLayout/"/>
    
      <category term="下拉刷新" scheme="http://yoursite.com/tags/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习：数学基础（概率论与数理统计）</title>
    <link href="http://yoursite.com/2016/09/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%EF%BC%88%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%EF%BC%89/"/>
    <id>http://yoursite.com/2016/09/26/机器学习：数学基础（概率论与数理统计）/</id>
    <published>2016-09-26T04:49:01.000Z</published>
    <updated>2016-09-27T05:53:53.072Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>近期在自学机器学习，把笔记做个整理，以方便查阅和整理知识框架。喜欢探讨机器学习或者Android开发技术的同学可以加<strong>学习小组QQ群: 193765960</strong>。</p>
<p>本文是机器学习的第二篇，仅是根据自己的理解做一个学习笔记，如果有大牛发现我这个小菜鸟的学习路线跑偏了，还希望能够提醒一下哈，在此表示感谢。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="数学基础教材名目（我自己根据理解指定的，不一定准确）"><a href="#数学基础教材名目（我自己根据理解指定的，不一定准确）" class="headerlink" title="数学基础教材名目（我自己根据理解指定的，不一定准确）"></a>数学基础教材名目（我自己根据理解指定的，不一定准确）</h3><ul>
<li>线性代数（同济大学 第四版）</li>
<li>概率论与数理统计（浙江大学 第三版）</li>
<li>复变函数（西安交通大学 第四版）</li>
<li>随机过程极其应用（陆大絟 清华大学）</li>
</ul>
<h2 id="概率论与数理统计"><a href="#概率论与数理统计" class="headerlink" title="概率论与数理统计"></a>概率论与数理统计</h2><h3 id="第一章-概率论的基本概念"><a href="#第一章-概率论的基本概念" class="headerlink" title="第一章 概率论的基本概念"></a>第一章 概率论的基本概念</h3><ul>
<li>确定性现象：在一定条件下必然发生的现象。</li>
<li>统计规律性：在大量的重复试验或观察中所呈现出的固有规律性。</li>
<li>随机现象：在个别试验中其结果呈现不确定性，在大量重复试验中其结果又具有统计规律性的现象。<h4 id="随机试验"><a href="#随机试验" class="headerlink" title="随机试验"></a>随机试验</h4>我们将具有以下三个特点的试验称为<strong>随机试验</strong>：</li>
<li>可在相同的条件下重复试验。</li>
<li>能事先明确试验的所有可能出现的结果。</li>
<li>进行一次试验，不能确定会出现哪一个试验结果。</li>
</ul>
<h4 id="样本空间，随机事件"><a href="#样本空间，随机事件" class="headerlink" title="样本空间，随机事件"></a>样本空间，随机事件</h4><p><strong>样本空间</strong>：随机试验E所有可能出现的结果所组成的已知的集合S，样本空间的元素称为样本点。<br><strong>随机事件</strong>：试验E的样本空间S的子集，严格说是S中满足某些条件的子集，简称<strong>事件</strong>。由一个样本点组成的单点集，称为<strong>基本事件</strong>。<br><strong>必然事件</strong>：样本空间S。<br><strong>不可能事件</strong>：空集<span>$\varnothing$</span><!-- Has MathJax --></p>
<h4 id="事件间的关系及事件运算"><a href="#事件间的关系及事件运算" class="headerlink" title="事件间的关系及事件运算"></a>事件间的关系及事件运算</h4><ul>
<li>若<span>$A\subset B$</span><!-- Has MathJax -->,称事件B包含事件A</li>
<li>若<span>$A\subset B$</span><!-- Has MathJax --> 且<span>$B\subset A$</span><!-- Has MathJax -->即A=B,责称事件B等于事件A</li>
<li><span>$A\cup B = \left \{ x\mid x\in A或  x\in B\right \}$</span><!-- Has MathJax --> 称为事件A与事件B的<strong>和事件</strong>。类似的<span>$\bigcup_{k=1}^{n}A_k$</span><!-- Has MathJax -->称为n个事件<span>$A_1，A_2，...,A_n$</span><!-- Has MathJax -->的和事件。<span>$\bigcup_{k=1}^{\infty }A_k$</span><!-- Has MathJax -->称为可列事件<span>$A_1，A_2，...$</span><!-- Has MathJax -->的和事件。</li>
<li><span>$A\cap B = \left \{ x\mid x\in A且  x\in B\right \}$</span><!-- Has MathJax --> 称为事件A与事件B的<strong>积事件</strong>。<span>$A\cap B$</span><!-- Has MathJax -->也记作AB。类似的<span>$\bigcap_{k=1}^{n}A_k$</span><!-- Has MathJax -->称为n个事件<span>$A_1，A_2，...,A_n$</span><!-- Has MathJax -->的积事件。<span>$\bigcap_{k=1}^{\infty }A_k$</span><!-- Has MathJax -->称为可列事件<span>$A_1，A_2，...$</span><!-- Has MathJax -->的积事件。</li>
<li><span>$A-B = \left \{ x\mid x\in A或  x\notin B\right \}$</span><!-- Has MathJax --> 称为事件A与B的<strong>差事件</strong>。</li>
<li>若<span>$A\cap B = \varnothing$</span><!-- Has MathJax -->则称事件A与B<strong>互不相容</strong>或者<strong>互斥</strong>。</li>
<li>若<span>$A\cup B = S且A\cap B = \varnothing$</span><!-- Has MathJax -->则称事件A与B<strong>互为逆事件</strong>或者互为<strong>对立事件</strong>。</li>
</ul>
<p><strong>时间运算</strong></p>
<ul>
<li><strong>交换律</strong>：<span>$A\cup B = b\cup A; A\cap B = B\cap A$</span><!-- Has MathJax --></li>
<li><strong>结合律</strong>：<span>$A\cup (B\cup C) = (A\cup B)\cup C;A\cap (B\cap C) = (A\cap B)\cap C;$</span><!-- Has MathJax --></li>
<li><strong>分配律</strong>：<span>$A\cup (B\cap C) = (A\cup B)\cap (A\cup C);A\cap (B\cup C) = (A\cap B)\cup (A\cap C);$</span><!-- Has MathJax --></li>
<li><strong>德.摩根律</strong>：<span>$\overline{A\cup B} = \overline{A} \cap \overline{B};\overline{A\cap B} = \overline{A} \cup \overline{B};$</span><!-- Has MathJax --></li>
</ul>
<h4 id="频率与概率"><a href="#频率与概率" class="headerlink" title="频率与概率"></a>频率与概率</h4><p><strong>定义</strong>：<br>在n次试验中，事件A发生的次数称为<strong>频数</strong>，记为<span>$n_A$</span><!-- Has MathJax -->。比值<span>$\frac{n_A}{n}$</span><!-- Has MathJax -->称为事件A发生的<strong>频率</strong></p>
   <span>$$</span><!-- Has MathJax -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;近期在自学机器学习，把笔记做个整理，以方便查阅和整理知识框架。喜欢探讨机器学习或者Android开发技术的同学可以加&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文是机器学习的第二篇，
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="概率论" scheme="http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
      <category term="数理统计" scheme="http://yoursite.com/tags/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>机器学习：数学基础（线性代数篇）</title>
    <link href="http://yoursite.com/2016/09/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%EF%BC%88%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AF%87%EF%BC%89/"/>
    <id>http://yoursite.com/2016/09/25/机器学习：数学基础（线性代数篇）/</id>
    <published>2016-09-25T05:08:14.000Z</published>
    <updated>2016-09-26T04:50:39.936Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>近期在自学机器学习，把笔记做个整理，以方便查阅和整理知识框架。喜欢探讨机器学习或者Android开发技术的同学可以加<strong>学习小组QQ群: 193765960</strong>。</p>
<p>本文是机器学习的第一篇，因为我本人对机器学习的整个理解有限，就不再给大家一本正经的胡说八道了，以免误人子弟，仅是根据自己的理解做一个学习笔记，如果有大牛发现我这个小菜鸟的学习路线跑偏了，还希望能够提醒一下哈，在此表示感谢。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="数学基础教材名目（我自己根据理解指定的，不一定准确）"><a href="#数学基础教材名目（我自己根据理解指定的，不一定准确）" class="headerlink" title="数学基础教材名目（我自己根据理解指定的，不一定准确）"></a>数学基础教材名目（我自己根据理解指定的，不一定准确）</h3><ul>
<li>线性代数（同济大学 第四版）</li>
<li>概率论与数理统计（浙江大学 第三版）</li>
<li>复变函数（西安交通大学 第四版）</li>
<li>随机过程极其应用（陆大絟 清华大学）</li>
</ul>
<h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><h3 id="第一章-行列式"><a href="#第一章-行列式" class="headerlink" title="第一章 行列式"></a>第一章 行列式</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><ol>
<li>行列式是一个<strong>算术表达式</strong>的矩阵式的表达方式，比如表达式<span>$a_{11}a_{22} - a_{12}a_{21}$</span><!-- Has MathJax -->的二阶行列式表示为：<span>$$\begin{vmatrix}
a_{11}\ \ a_{12} \\ 
a_{21}\ \ a_{22} 
\end{vmatrix}$$</span><!-- Has MathJax -->
$a_{ij}$称为行列式的元素或元</li>
<li>全排列及其逆序数</li>
</ol>
<ul>
<li>把n个元素排成一列就叫这n个元素的一个全排列，简称排列。</li>
<li>对n个元素规定好一个标准的次序，对于这n个元素的任何一个排列，如果任意两个元素相互的先后次序与标准排列中的次序不一致，就说有一个逆序。</li>
<li>一个排列中的逆序总数称为这个排列的逆序数</li>
<li>逆序数为奇数的排列称为奇排列，为偶数的排列称为偶排列。</li>
</ul>
<ol>
<li><p>n阶行列式(t是$p_1，p_2，…，p_n$相对于自然数列1，2，…n的逆序数)</p>
<span>$$\sum(-1)^ta_1p_1a_2p_2...a_np_n = \begin{vmatrix}
a_{11}\ \ a_{12}\ ... a_{1n}\\ 
a_{21}\ \ a_{22}\ ... a_{2n}\\ 
.....\\
a_{n1}\ \ a_{n2}\ ... a_{nn}
\end{vmatrix}= D$$</span><!-- Has MathJax -->
</li>
<li><p>转置行列式$D^T$</p>
<span>$$D = \begin{vmatrix}
a_{11}\ \ a_{12}\ ... a_{1n}\\ 
a_{21}\ \ a_{22}\ ... a_{2n}\\ 
.....\\
a_{n1}\ \ a_{n2}\ ... a_{nn}
\end{vmatrix},D^T = \begin{vmatrix}
a_{11}\ \ a_{21}\ ... a_{n1}\\ 
a_{12}\ \ a_{22}\ ... a_{n2}\\ 
.....\\
a_{1n}\ \ a_{2n}\ ... a_{nn}
\end{vmatrix}$$</span><!-- Has MathJax -->
</li>
</ol>
<h4 id="定理及推论"><a href="#定理及推论" class="headerlink" title="定理及推论"></a>定理及推论</h4><ol>
<li>主对角线以下（上）的元素全为零的行列式叫做上（下）三角行列式，其算术表达式为对角线元素乘积。</li>
<li>一个排列中，任意两个元素对换，排列改变奇偶性。</li>
<li>奇数排列变成标准排列的对换次数为奇数，偶数排列对换成标准排列的次数为偶数。</li>
<li>行列式与他的转置行列式相等</li>
<li>互换行列式的两行（列）,行列式变号。</li>
<li>行列式中如果有两行或两列成比例，则次行列式等于零。</li>
<li>把行列式的某一行（列）的元素各自拆分成2个数字的和，则行列式的值等于拆分的两个子行列式的和</li>
<li><strong>把行列式的某一行（列）的各个元素乘以同一个数加到另一行（列）对应的元素上去，行列式不变。</strong></li>
</ol>
<blockquote>
<p><strong>余子式</strong>：在行列式中，把第<span>$a_{ij}$</span><!-- Has MathJax -->元素所在的行和列删除后，剩余的行列式称为<span>$a_{ij}$</span><!-- Has MathJax -->的余子式，计做<span>$M_{ij}$</span><!-- Has MathJax -->。<span>$A_{ij} = (-1)^{i+j}M_{ij}$</span><!-- Has MathJax -->称为<span>$a_{ij}$</span><!-- Has MathJax -->的代数余子式。</p>
</blockquote>
<ol>
<li>一个行列式，如果其中第i行所有元素除<span>$a_{ij}$</span><!-- Has MathJax -->之外全为零，那么这个行列式等于<span>$a_{ij}$</span><!-- Has MathJax -->与他的代数余子式<span>$A_{ij}$</span><!-- Has MathJax -->的乘积。</li>
<li>行列式等于他的任意一行（列）的各个元素与其对应的代数余子式的乘积之和。（行列式的按行、按列展开）</li>
</ol>
<h4 id="克拉默法则"><a href="#克拉默法则" class="headerlink" title="克拉默法则"></a>克拉默法则</h4><p>含有n个未知数的n个线性方程的方程组<br><span>$$\left\{\begin{matrix}
a_{11}x_1 +  a_{12}x_2 + ...+ a_{1n}x_n = b_1\\ 
a_{21}x_1 +  a_{22}x_2 + ...+ a_{2n}x_n = b_2\\ 
......\\
a_{n1}x_1 +  a_{n2}x_2 + ...+ a_{nn}x_n = b_n
\end{matrix}\right.$$</span><!-- Has MathJax --><br>如果线性方程组的系数不等于零，即<br><span>$$D = \begin{vmatrix}
a_{11}\ \ a_{12}\ ... a_{1n}\\ 
a_{21}\ \ a_{22}\ ... a_{2n}\\ 
.....\\
a_{n1}\ \ a_{n2}\ ... a_{nn}
\end{vmatrix}\neq 0,$$</span><!-- Has MathJax --><br>那么，方程组有唯一解<br><span>$x_1 = \frac{D_1}{D}, x_2 = \frac{D_2}{D},..., x_n = \frac{D_n}{D},$</span><!-- Has MathJax --><br>其中，<span>$D_j(j = 1,2,...,n)$</span><!-- Has MathJax -->是把系数行列式D中的第j列用方程式组右端的常数项替换后所得的n阶行列式。</p>
<p>根据克拉默法则，可以得出如下定理，</p>
<ol>
<li>如果n阶线性方程组的系数行列式不等于0，则方程组一定有唯一解。</li>
<li>如果n元线性方程组无解或者有两个不同的解，则它的系数行列式必为0</li>
<li>如果n元齐次方程组（方程组右端为0）的系数行列式不等于0，则齐次方程组没有非零解。</li>
<li>如果齐次方程组有非零解，则它的系数行列式必为0.</li>
</ol>
<h3 id="第二章：矩阵及其运算"><a href="#第二章：矩阵及其运算" class="headerlink" title="第二章：矩阵及其运算"></a>第二章：矩阵及其运算</h3><h4 id="矩阵定义"><a href="#矩阵定义" class="headerlink" title="矩阵定义"></a>矩阵定义</h4><ol>
<li>由<span>$m \times n$</span><!-- Has MathJax -->个数排成的m行n列的数表称为m行n列矩阵，简称<span>$m \times n$</span><!-- Has MathJax -->矩阵,记作<span>$$A = \begin{bmatrix}
a_{11}\ \ a_{12}\ ... a_{1n}\\ 
a_{21}\ \ a_{22}\ ... a_{2n}\\ 
.....\\
a_{m1}\ \ a_{m2}\ ... a_{mn}
\end{bmatrix}\neq 0,$$</span><!-- Has MathJax -->
简记作<span>$A_{m \times n}$</span><!-- Has MathJax --></li>
<li>元素是实数的矩阵称为实矩阵，元素为复数的矩阵称为复矩阵</li>
<li>行数和列数都为n的矩阵称为n阶方阵，记为<span>$A_n$</span><!-- Has MathJax --></li>
<li>只有一行的矩阵称为<strong>行矩阵</strong>，又叫做<strong>行向量</strong></li>
<li>只有一列的矩阵称为<strong>列矩阵</strong>，又叫做<strong>列向量</strong></li>
<li>两个行数和列数均分别相等的矩阵，称为<strong>同型矩阵</strong></li>
</ol>
<span>$$</span><!-- Has MathJax -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;近期在自学机器学习，把笔记做个整理，以方便查阅和整理知识框架。喜欢探讨机器学习或者Android开发技术的同学可以加&lt;strong&gt;学习小组QQ群: 193765960&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文是机器学习的第一篇，
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="线性代数" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android APP更换字体策略精要</title>
    <link href="http://yoursite.com/2016/09/12/Android-APP%E6%9B%B4%E6%8D%A2%E5%AD%97%E4%BD%93%E7%AD%96%E7%95%A5%E7%B2%BE%E8%A6%81/"/>
    <id>http://yoursite.com/2016/09/12/Android-APP更换字体策略精要/</id>
    <published>2016-09-12T02:38:43.000Z</published>
    <updated>2016-09-12T04:56:13.312Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>近期项目需要在我们的APP中使用指定的字体库。经过搜集资料，研读源码，和别人探讨请教，最终产出了一些比较好的方案。不敢专享，写成文章分享出来，希望对大家的实际开发工作有所帮助。喜欢探讨Android开发技术的同学可以加<strong>学习小组QQ群: 193765960</strong>。</p>
<p>本文只总结了较优方案，其他诸如自定义textView类，遍历layout_root_view这样的方案，作者认为限制较大，使用麻烦，就不在这里介绍了，感兴趣的朋友请自行百度。</p>
<blockquote>
<p>版权归作者所有，如有转发，请注明文章出处：<a href="https://xiaodanchen.github.io/archives/" target="_blank" rel="external">https://xiaodanchen.github.io/archives/</a> </p>
</blockquote>
<h3 id="Android字体机制介绍"><a href="#Android字体机制介绍" class="headerlink" title="Android字体机制介绍"></a>Android字体机制介绍</h3><h4 id="关键类："><a href="#关键类：" class="headerlink" title="关键类："></a>关键类：</h4><ul>
<li><strong>Typeface:</strong><br>字体类，定义了字体类型到字体库的映射关系，Android有<strong>DEFAULT</strong>, <strong>MONOSPACE</strong>, <strong>SERIF</strong>, <strong>SANS_SERIF</strong>几种字体，根据各自的NORMAL(常规),BOLD(加粗),ITALIC(倾斜),BOLD_ITALIC(加粗倾斜)等几种样式，总共可以映射到至少16种字体库。</li>
<li><strong>TextAppearance:</strong><br>字体外观类，定义了字体的外观比如，typeface，textsize,textcolor等外观属性。</li>
</ul>
<h4 id="TextView的字体显示机制"><a href="#TextView的字体显示机制" class="headerlink" title="TextView的字体显示机制"></a>TextView的字体显示机制</h4><p>先看一下TextView的构造方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TextView</span><span class="params">(Context context)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TextView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TextView</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TextView</span><span class="params">(</span></span></div><div class="line">            Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes);</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>AttributeSet：</strong>xml中设置的属性</li>
<li><strong>defStyleAttr：</strong>系统默认的属性</li>
<li><strong>defStyleRes：</strong>系统默认的样式，<strong>这个是我们需要注意的参数哈</strong></li>
</ul>
<p><strong>Textview的字体设置逻辑：</strong><br>1）查看xml中是否设置了TextAppearance属性，如果设置了就判断外观中是否设置了字体。否则就执行第二步。<br>2）查看xml中是否设置了Typeface属性，指明了字体。否则执行第三步<br>3）使用系统的默认样式：defStyleRes</p>
<blockquote>
<p>所以，假如我们的xml中对字体没有做设置，要是想要修改字体又不想修改xml，那么我们就要想其他办法了。<br>我最终的方案（方案一）是在APP的theme中去设置修改系统的默认样式（最终走到这个思路上是经过了比较酸爽的经过的，就不在这里细说了）。</p>
</blockquote>
<h3 id="方案一（底层方案）：通过反射机制，修改Typeface类的字体库引用"><a href="#方案一（底层方案）：通过反射机制，修改Typeface类的字体库引用" class="headerlink" title="方案一（底层方案）：通过反射机制，修改Typeface类的字体库引用"></a>方案一（底层方案）：通过反射机制，修改Typeface类的字体库引用</h3><p><strong>第一步：</strong>通过反射机制修改Typeface字体指向的字体库到我们的字体库。</p>
<ul>
<li><p>定义修改字体库的方法类（示例）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Typeface;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FontsUtils</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDefaultFont</span><span class="params">(Context context,</span></span></div><div class="line">      String staticTypefaceFieldName, String fontAssetName) &#123;</div><div class="line">      <span class="keyword">final</span> Typeface regular = Typeface.createFromAsset(context.getAssets(),</div><div class="line">  fontAssetName);</div><div class="line">      replaceFont(staticTypefaceFieldName, regular);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">replaceFont</span><span class="params">(String staticTypefaceFieldName,</span></span></div><div class="line">    <span class="keyword">final</span> Typeface newTypeface) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">final</span> Field staticField = Typeface.class</div><div class="line">        .getDeclaredField(staticTypefaceFieldName);</div><div class="line">        staticField.setAccessible(<span class="keyword">true</span>);</div><div class="line">        staticField.set(<span class="keyword">null</span>, newTypeface);</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在工程assets目录下新建fonts文件夹，把我们需要的字库放在里面，比如：FZLTHJW.TTF</p>
</li>
<li><p>在MyApplication.oncreate()中调用修改字体库：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FontsUtils.setDefaultFont(<span class="keyword">this</span>, <span class="string">"DEFAULT"</span>, <span class="string">"fonts/FZLTHJW.TTF"</span>);</div><div class="line">FontsUtils.setDefaultFont(<span class="keyword">this</span>, <span class="string">"MONOSPACE"</span>, <span class="string">"fonts/FZLTHJW.TTF"</span>);</div><div class="line">FontsUtils.setDefaultFont(<span class="keyword">this</span>, <span class="string">"SERIF"</span>, <span class="string">"fonts/FZLTHJW.TTF"</span>);</div><div class="line">FontsUtils.setDefaultFont(<span class="keyword">this</span>, <span class="string">"SANS_SERIF"</span>, <span class="string">"fonts/FZLTHJW.TTF"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>第二步：</strong>修改APP theme的默认属性。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;style name="AppTheme" parent="AppBaseTheme"&gt;</div><div class="line">	&lt;item name="android:textViewStyle"&gt;@style/FontTextviewstyle&lt;/item&gt;</div><div class="line">	&lt;item name="android:buttonStyle"&gt;@style/FontButtonstyle&lt;/item&gt;</div><div class="line">	&lt;item name="editTextStyle"&gt;@style/FontEditTextstyle&lt;/item&gt;</div><div class="line">	&lt;item name="android:radioButtonStyle"&gt;@style/FontradioButtonstyle&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line"> </div><div class="line">&lt;style name="FontTextviewstyle" parent="android:style/Widget.TextView"&gt;</div><div class="line">	&lt;item name="android:textAppearance"&gt;@style/FontTextAppearance&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;style name="FontButtonstyle" parent="android:style/Widget.Button"&gt;</div><div class="line">	&lt;item name="android:textAppearance"&gt;@style/FontTextAppearance&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;style name="FontradioButtonstyle" parent="android:style/Widget.CompoundButton.RadioButton"&gt;</div><div class="line">	&lt;item name="android:textAppearance"&gt;@style/FontTextAppearance&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;style name="FontEditTextstyle" parent="Widget.AppCompat.EditText"&gt;</div><div class="line">	&lt;item name="android:textAppearance"&gt;@style/FontTextAppearance&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;style name="FontTextAppearance" parent="@android:style/TextAppearance"&gt;</div><div class="line">        &lt;item name="android:typeface"&gt;monospace&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p><strong>总结：</strong></p>
<ul>
<li><strong>优点：</strong><ul>
<li>不用修改xml，没有为每个activity创建字体的实例。</li>
<li>除了常见的控件外，对Material Design的新控件也有作业</li>
</ul>
</li>
<li><strong>缺陷：</strong><ul>
<li>对于alertDialog还没有实现style的默认适配</li>
<li>因为是修改的底层逻辑，相较于方案二，稍复杂。</li>
</ul>
</li>
</ul>
<h3 id="方案二（顶层方案）：自定义布局加载器，在加载layout-xml时对view-tree的-view做字体的逻辑处理"><a href="#方案二（顶层方案）：自定义布局加载器，在加载layout-xml时对view-tree的-view做字体的逻辑处理" class="headerlink" title="方案二（顶层方案）：自定义布局加载器，在加载layout_xml时对view tree的 view做字体的逻辑处理"></a>方案二（顶层方案）：自定义布局加载器，在加载layout_xml时对view tree的 view做字体的逻辑处理</h3><ul>
<li><strong>使用：</strong>如下方代码所示，在oncreatview的回调中，对view做类型判断，设置view的字体。</li>
<li><strong>优点：</strong>该方案代码逻辑清晰，使用简单，几行代码就可以搞定问题，不用修改xml等。</li>
<li><strong>缺陷：</strong><ul>
<li>在一些第三方的控件或者自定义控件上可能使用会有限制，如果控件没有提供修改控件字体的接口的话（待验证）</li>
<li>需要注意的是，对于Material Design的<strong>android.support.design.widget.TextInputLayout</strong>，<strong>android.support.design.widget.TabLayout</strong>这样的控件不起作用，需要对这种类型设置*textAppearance这样的属性。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceFont</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> Typeface typeface = Typeface.createFromAsset(getAssets(), <span class="string">"fonts/fangzheng.ttf"</span>);</div><div class="line">		LayoutInflaterCompat.setFactory(LayoutInflater.from(<span class="keyword">this</span>), <span class="keyword">new</span> LayoutInflaterFactory() &#123;</div><div class="line">			   </div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(View parent, String name, Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				AppCompatDelegate delegate = getDelegate();</div><div class="line">				View view = delegate.createView(parent, name, context, attrs);</div><div class="line">				<span class="keyword">if</span>(view != <span class="keyword">null</span> )&#123;</div><div class="line">					<span class="keyword">if</span>(view <span class="keyword">instanceof</span> TextView)&#123;</div><div class="line">						((TextView)view).setTypeface(typeface);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(view <span class="keyword">instanceof</span> Button)&#123;</div><div class="line">						((Button)view).setTypeface(typeface);</div><div class="line">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(view <span class="keyword">instanceof</span> RadioButton)&#123;</div><div class="line">						((RadioButton)view).setTypeface(typeface);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> view;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">    </div><div class="line"><span class="comment">/**</span></div><div class="line">*  BaseActivity.java</div><div class="line">*/</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">	replaceFont();<span class="comment">//注意需要在super方法之前调用，否则会报异常</span></div><div class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><strong>总结：</strong></p>
<ul>
<li>通过这个方案，其实我们应该学习到一种<strong>统一对xml viewTree中某种控件设置某种属性的方法。</strong></li>
<li>举一反三，针对刚才上述的缺陷，我们其实也可以尝试设置textAppearance属性（相较于设置typeface麻烦些），感兴趣的同学可以去试验下。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;近期项目需要在我们的APP中使用指定的字体库。经过搜集资料，研读源码，和别人探讨请教，最终产出了一些比较好的方案。不敢专享，写成文章分享出来，希望对大家的实际开发工作有所帮助。喜欢探讨Android开发技术的同学可以加&lt;stro
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Typeface" scheme="http://yoursite.com/tags/Typeface/"/>
    
  </entry>
  
</feed>
