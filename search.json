[{"title":"图解Android：Touch事件传递机制","url":"http://yoursite.com/2016/08/25/图解Android：事件传递机制/","content":"<p><strong>前言</strong></p>\n<p>Android事件管理机制是一名专业Android研发工程师必须要了解的核心知识之一，深入了解一下该机制无论对我们日常开发还是找工作，乃至于对我们的架构思想都有很大的帮助。Android中我们用到的最多的事件是InputEvent，主要是两类：MotionEvent和KeyEvent。由于事件传递模型基本一致，我将以更常用到的MotionEvent为目标来讲解。</p>\n<p>根据实际开发的需要，本文仅讲解touch事件在viewTree中的传递机制，为广大开发者搞清原理、扫清障碍。文章参考了Kelin童鞋的<a href=\"http://www.jianshu.com/p/e99b5e8bd67b\" target=\"_blank\" rel=\"external\">图解Android事件传递机制</a>，写的很好大家也可以去看看。</p>\n<p>本篇是<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">图解Android</a>系列第一篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Android有帮助，还望大家多多转载。有疑问的同学，也可以加博主QQ: 1404562848。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<p><strong>目录</strong><br>[TOC]</p>\n<h3 id=\"Touch事件的分发、传递、消费所涉及的类与函数\"><a href=\"#Touch事件的分发、传递、消费所涉及的类与函数\" class=\"headerlink\" title=\"Touch事件的分发、传递、消费所涉及的类与函数\"></a>Touch事件的分发、传递、消费所涉及的类与函数</h3><p>老规矩，让我们先来看一张类图：<br><img src=\"/hello-world/img/viewgroup.png\" alt=\"Touch事件相关回调接口图谱\"></p>\n<ul>\n<li>View类定义了两个Touch事件传递分发的函数：<ul>\n<li>public boolean dispatchTouchEvent(MotionEvent event)</li>\n<li>public boolean onTouchEvent(MotionEvent event)</li>\n</ul>\n</li>\n<li>ViewGroup继承自View类，其重写了定义了两个 Touch事件传递分发的函数<ul>\n<li>@Override public boolean dispatchTouchEvent(MotionEvent ev)</li>\n<li>public boolean onInterceptTouchEvent(MotionEvent ev) </li>\n</ul>\n</li>\n<li>Activity类定义了两个Touch事件传递分发的函数：<ul>\n<li>public boolean dispatchTouchEvent(MotionEvent event)</li>\n<li>public boolean onTouchEvent(MotionEvent event)</li>\n</ul>\n</li>\n<li>Activity类的viewRoot实际上是PhoneWindow的DecorView（ViewGroup）<ul>\n<li>DecorView维护了一个LinearLayout对象，这个对象包括两部分：TitleView和ContentViews（FrameLayout）</li>\n<li>我们定义的layout.xml其实是被加载到TitleView和ContentViews中的</li>\n</ul>\n</li>\n</ul>\n<p>(操，电脑卡死，重启后写的内容全都没有了，fuck！！！！！)</p>\n"},{"title":"跟着源码学设计：Glide框架及源码解析（四）","url":"http://yoursite.com/2016/08/23/跟着源码学设计：Glide框架及源码解析（四）/","content":"<p><strong>前言</strong></p>\n<p>近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。有疑问的同学，可以加博主QQ: 1404562848。</p>\n<p>本篇是Glide框架及源码解析的第四篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Glide有帮助，还望大家多多转载。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<p><strong>往期文章：</strong></p>\n<p><a href=\"https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（一）</a><br><a href=\"https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（二）</a><br><a href=\"https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（三）</a></p>\n<p><strong>目录</strong><br>[TOC]</p>\n<p>在之前的文章中，我们已经知道了Glide请求是如何被加载到请求队列中并执行的，也了解了资源是如何管理的。本篇文章我们将探究一下资源是如何获取并分发的。</p>\n<h3 id=\"资源请求和回调机制类图\"><a href=\"#资源请求和回调机制类图\" class=\"headerlink\" title=\"资源请求和回调机制类图\"></a>资源请求和回调机制类图</h3><p><img src=\"/hello-world/img/Engin.png\" alt=\"资源请求和回调机制类图\"></p>\n<h3 id=\"request开启请求\"><a href=\"#request开启请求\" class=\"headerlink\" title=\"request开启请求\"></a>request开启请求</h3><p>request被加载到requestTracker中统一管理启动获取资源，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</div><div class=\"line\">  requests.add(request);</div><div class=\"line\">  <span class=\"keyword\">if</span> (!isPaused) &#123;</div><div class=\"line\">  \trequest.begin();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  \tpendingRequests.add(request);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>request的执行从其begin()方法开始：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void runRequest(Request request) &#123;</div><div class=\"line\">  requests.add(request);</div><div class=\"line\">  <span class=\"keyword\">if</span> (!isPaused) &#123;</div><div class=\"line\">  \trequest.begin();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  \tpendingRequests.add(request);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"获取Engin对象并封装任务\"><a href=\"#获取Engin对象并封装任务\" class=\"headerlink\" title=\"获取Engin对象并封装任务\"></a>获取Engin对象并封装任务</h3><ul>\n<li>获取engine对象，在load()方法中创建EnginJob任务</li>\n<li>为Enginjob创建异步线程EnginRunnable</li>\n<li>为EnginRunnable初始化资源获取解析任务DecodJob<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> &lt;T, Z, R&gt; <span class=\"function\">LoadStatus <span class=\"title\">load</span><span class=\"params\">(Key signature, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, DataFetcher&lt;T&gt; fetcher,</span></span></div><div class=\"line\">DataLoadProvider&lt;T, Z&gt; loadProvider, Transformation&lt;Z&gt; transformation, ResourceTranscoder&lt;Z, R&gt; transcoder,</div><div class=\"line\">Priority priority, <span class=\"keyword\">boolean</span> isMemoryCacheable, DiskCacheStrategy diskCacheStrategy, ResourceCallback cb) &#123;</div><div class=\"line\"> </div><div class=\"line\">  Util.assertMainThread();</div><div class=\"line\">  <span class=\"keyword\">long</span> startTime = LogTime.getLogTime();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">final</span> String id = fetcher.getId();</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//获取key</span></div><div class=\"line\">  EngineKey key = keyFactory.buildKey(id, signature, width, height, loadProvider.getCacheDecoder(),</div><div class=\"line\">  loadProvider.getSourceDecoder(), transformation, loadProvider.getEncoder(),</div><div class=\"line\">  transcoder, loadProvider.getSourceEncoder());</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">//查找LruResourceCache</span></div><div class=\"line\">  EngineResource&lt;?&gt; cached = loadFromCache(key, isMemoryCacheable);</div><div class=\"line\">  <span class=\"keyword\">if</span> (cached != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    cb.onResourceReady(cached);</div><div class=\"line\">    <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class=\"line\">    \tlogWithTimeAndKey(<span class=\"string\">\"Loaded resource from cache\"</span>, startTime, key);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">//查找ActiveResourceCache</span></div><div class=\"line\">  EngineResource&lt;?&gt; active = loadFromActiveResources(key, isMemoryCacheable);</div><div class=\"line\">  <span class=\"keyword\">if</span> (active != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    cb.onResourceReady(active);</div><div class=\"line\">    <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class=\"line\">      logWithTimeAndKey(<span class=\"string\">\"Loaded resource from active resources\"</span>, startTime, key);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">//任务排重</span></div><div class=\"line\">  EngineJob current = jobs.get(key);</div><div class=\"line\">  <span class=\"keyword\">if</span> (current != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    current.addCallback(cb);</div><div class=\"line\">    <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class=\"line\">    \tlogWithTimeAndKey(<span class=\"string\">\"Added to existing load\"</span>, startTime, key);</div><div class=\"line\">    &#125;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LoadStatus(cb, current);</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//创建EngineJob</span></div><div class=\"line\">  EngineJob engineJob = engineJobFactory.build(key, isMemoryCacheable);</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//创建DecodeJob:注意fetcher（数据加载器）</span></div><div class=\"line\">  DecodeJob&lt;T, Z, R&gt; decodeJob = <span class=\"keyword\">new</span> DecodeJob&lt;T, Z, R&gt;(key, width, height, fetcher, loadProvider, transformation,</div><div class=\"line\">  transcoder, diskCacheProvider, diskCacheStrategy, priority);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//创建任务线程</span></div><div class=\"line\">  EngineRunnable runnable = <span class=\"keyword\">new</span> EngineRunnable(engineJob, decodeJob, priority);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//将任务加入管理队列</span></div><div class=\"line\">  jobs.put(key, engineJob);</div><div class=\"line\">  engineJob.addCallback(cb);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//启动任务</span></div><div class=\"line\">  engineJob.start(runnable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class=\"line\">  \tlogWithTimeAndKey(<span class=\"string\">\"Started new load\"</span>, startTime, key);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LoadStatus(cb, engineJob);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"执行任务获取数据并解析\"><a href=\"#执行任务获取数据并解析\" class=\"headerlink\" title=\"执行任务获取数据并解析\"></a>执行任务获取数据并解析</h3><ul>\n<li><p>DecodJob通过数据获取器DataFetcher获取数据文件（流）<br>request被加载到requestTracker中统一管理启动获取资源，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//EngineRunnable的run()方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isCancelled) &#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Exception exception = <span class=\"keyword\">null</span>;</div><div class=\"line\">  Resource&lt;?&gt; resource = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    resource = decode();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class=\"line\">    Log.v(TAG, <span class=\"string\">\"Exception decoding\"</span>, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    exception = e;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (isCancelled) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (resource != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      resource.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">  \t<span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (resource == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  \tonLoadFailed(exception);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  \tonLoadComplete(resource);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"keyword\">private</span> Resource&lt;?&gt; decode() <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (isDecodingFromCache()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> decodeFromCache();</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> decodeFromSource();</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\">    </div><div class=\"line\"> <span class=\"keyword\">private</span> Resource&lt;?&gt; decodeFromSource() <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\"> \t<span class=\"keyword\">return</span> decodeJob.decodeFromSource();</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据解析器对data数据解析生成resource资源对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Resource&lt;T&gt; <span class=\"title\">decodeSource</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    Resource&lt;T&gt; decoded = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> startTime = LogTime.getLogTime();</div><div class=\"line\">        <span class=\"comment\">//数据加载器获取数据</span></div><div class=\"line\">        <span class=\"keyword\">final</span> A data = fetcher.loadData(priority);</div><div class=\"line\">        <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class=\"line\">            logWithTimeAndKey(<span class=\"string\">\"Fetched data\"</span>, startTime);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isCancelled) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//data数据解析生成resource资源对象</span></div><div class=\"line\">        decoded = decodeFromSourceData(data);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    \tfetcher.cleanup();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> decoded;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//HttpUrlFetcher：网络资源加载器</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">loadData</span><span class=\"params\">(Priority priority)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> loadDataWithRedirects(glideUrl.toURL(), <span class=\"number\">0</span> <span class=\"comment\">/*redirects*/</span>, <span class=\"keyword\">null</span> <span class=\"comment\">/*lastUrl*/</span>, glideUrl.getHeaders());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>resource资源进一步封装成为EnginResource对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Runnable的方法，在run()方法中调用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadComplete</span><span class=\"params\">(Resource resource)</span> </span>&#123;</div><div class=\"line\">\tmanager.onResourceReady(resource);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//manager.onResourceReady(resource)实际回调了Enginjob的接口实现</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResourceReady</span><span class=\"params\">(<span class=\"keyword\">final</span> Resource&lt;?&gt; resource)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.resource = resource;</div><div class=\"line\">  MAIN_THREAD_HANDLER.obtainMessage(MSG_COMPLETE, <span class=\"keyword\">this</span>).sendToTarget();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过监听接口回传EnginResource对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResultOnMainThread</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isCancelled) &#123;</div><div class=\"line\">    resource.recycle();</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cbs.isEmpty()) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Received a resource without any callbacks to notify\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  engineResource = engineResourceFactory.build(resource, isCacheable);</div><div class=\"line\">  hasResource = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Hold on to resource for duration of request so we don't recycle it in the middle of notifying if it</span></div><div class=\"line\">  <span class=\"comment\">// synchronously released by one of the callbacks.</span></div><div class=\"line\">  engineResource.acquire();</div><div class=\"line\">  listener.onEngineJobComplete(key, engineResource);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (ResourceCallback cb : cbs) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isInIgnoredCallbacks(cb)) &#123;</div><div class=\"line\">      engineResource.acquire();</div><div class=\"line\">      <span class=\"comment\">//回传engineResource到request中，request获取到资源后开始刷新UI</span></div><div class=\"line\">      cb.onResourceReady(engineResource);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// Our request is complete, so we can release the resource.</span></div><div class=\"line\">  engineResource.release();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>（本篇是Glide框架及源码解析的第四篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/2016/08/23/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E5%9B%9B%EF%BC%89/\" target=\"_blank\" rel=\"external\">原文链接</a>）</p>\n"},{"title":"跟着源码学设计：Glide框架及源码解析（三）","url":"http://yoursite.com/2016/08/22/跟着源码学设计：Glide框架及源码解析（三）/","content":"<p><strong>前言</strong></p>\n<p>近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。有疑问的同学，可以加博主QQ: 1404562848。</p>\n<p>本篇是Glide框架及源码解析的第三篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Glide有帮助，还望大家多多转载。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<p><strong>往期文章：</strong></p>\n<p><a href=\"https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（一）</a><br><a href=\"https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（二）</a></p>\n<p><strong>目录</strong><br>[TOC]</p>\n<h3 id=\"Glide内存缓存机制\"><a href=\"#Glide内存缓存机制\" class=\"headerlink\" title=\"Glide内存缓存机制\"></a>Glide内存缓存机制</h3><p>在之前的两篇中我们剖析了Glide的生命周期绑定机制和Glide的请求管理机制。接下来按说应该讲到request实际请求资源并回调刷新界面这一块了，但是为了更好的理解Glide在这一块的设计，我先大致的讲一讲Glide的内存缓存和管理机制。<br>不同于其他常见网络加载框架只有LruCatch一种缓存机制，Glide内存为三块（非常牛逼巧妙的设计）：</p>\n<ul>\n<li>ActiveResourceCache：缓存当前正在使用的资源（注意是弱引用）</li>\n<li>LruResourceCache： 缓存最近使用过但是当前未使用的资源，LRU算法</li>\n<li>BitmapPool：缓存所有被释放的图片，内存复用，LRU算法</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>LruResourceCache和ActiveResourceCache设计是为了尽可能的资源复用</li>\n<li>BitmapPool的设计目的是为了尽可能的内存复用</li>\n</ul>\n<p>说的比较抽象，是不是懵逼了？别急，上图：<br><img src=\"/hello-world/img/MemoryCacheManager.png\" alt=\"Glide内存缓存及管理机制\"></p>\n<ul>\n<li>当我们需要显示某个资源时，Glide会先去查找LruResourceCache，找到了则将资源从LruResourceCache移除加入到ActiveResourceCache；</li>\n<li>LruResourceCache找不到资源则查找ActiveResourceCache。</li>\n<li>如果在ActiveResourceCache也找不到合适的资源，则会根据加载策略从硬盘或者网络加载资源。</li>\n<li>获取数据后Glide会从BitmapPool中找寻合适的可供内存复用的废弃recycled bitmap（找不到则会重新创建bitmap对象），然后刷新bitmap的数据。</li>\n<li>bitmap被转换封装为Resource缓存入ActiveResourceCache和Request对象中。</li>\n<li><p>Request的target会获取resource中引用的bitmap并展示。</p>\n</li>\n<li><p>当target的资源需要release时，resource会根据缓存策略被缓存到LruResourceCache，同时ActiveResourceCache中的弱引用会被删除。如果，该资源不能缓存到LruResourceCache，则资源将被recycle到BitmapPool。</p>\n</li>\n<li><p>当需要回收内存时（比如系统内存不足或者生命周期结束），LruResourceCache将根据LRU算法recycle一些resource到BitmapPool。</p>\n</li>\n<li>BitmapPool会根据缓存池的尺寸和recycled resource的缓存策略来缓存resource的bitmap。</li>\n<li>BitmapPool会根据LRU算法和缓存池的尺寸来释放一些老旧资源。</li>\n<li>当系统GC时，则会回收可回收的资源释放内存</li>\n</ul>\n<p>这样就完成了一个资源的完整的循环。</p>\n<h3 id=\"BitmapPool的内存复用机制\"><a href=\"#BitmapPool的内存复用机制\" class=\"headerlink\" title=\"BitmapPool的内存复用机制\"></a>BitmapPool的内存复用机制</h3><p>知识储备：</p>\n<ul>\n<li>BitmapFactory.Options.inBitmap是AndroiD3.0新增的一个属性，如果设置了这个属性则会重用这个Bitmap的内存从而提升性能。</li>\n<li>在SDK 11 -&gt; 18之间，重用的bitmap大小必须是一致的，例如给inBitmap赋值的图片大小为100-100，那么新申请的bitmap必须也为100-100才能够被重用。从SDK 19开始，新申请的bitmap大小必须小于或者等于已经赋值过的bitmap大小。</li>\n<li>新申请的bitmap与旧的bitmap必须有相同的解码格式，例如大家都是8888的，如果前面的bitmap是8888，那么就不能支持4444与565格式的bitmap了</li>\n</ul>\n<h4 id=\"使用inbitmap前，内存占用情况\"><a href=\"#使用inbitmap前，内存占用情况\" class=\"headerlink\" title=\"使用inbitmap前，内存占用情况\"></a>使用inbitmap前，内存占用情况</h4><p><img src=\"/hello-world/img/inbitmap_null.png\" alt=\"使用inbitmap前，内存占用情况\"></p>\n<h4 id=\"使用inbitmap后，内存占用情况\"><a href=\"#使用inbitmap后，内存占用情况\" class=\"headerlink\" title=\"使用inbitmap后，内存占用情况\"></a>使用inbitmap后，内存占用情况</h4><p><img src=\"/hello-world/img/inbitmap.png\" alt=\"使用inbitmap后，内存占用情况\"></p>\n<p>下面看一下核心代码：Downsampler的downsampleWithSize()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Bitmap <span class=\"title\">downsampleWithSize</span><span class=\"params\">(MarkEnforcingInputStream is, RecyclableBufferedInputStream  bufferedStream,</span></span></div><div class=\"line\">BitmapFactory.Options options, BitmapPool pool, <span class=\"keyword\">int</span> inWidth, <span class=\"keyword\">int</span> inHeight, <span class=\"keyword\">int</span> sampleSize,</div><div class=\"line\">DecodeFormat decodeFormat) &#123;</div><div class=\"line\">  <span class=\"comment\">// Prior to KitKat, the inBitmap size must exactly match the size of the bitmap we're decoding.</span></div><div class=\"line\">  Bitmap.Config config = getConfig(is, decodeFormat);</div><div class=\"line\">  options.inSampleSize = sampleSize;</div><div class=\"line\">  options.inPreferredConfig = config;</div><div class=\"line\">  <span class=\"keyword\">if</span> ((options.inSampleSize == <span class=\"number\">1</span> || Build.VERSION_CODES.KITKAT &lt;= Build.VERSION.SDK_INT) &amp;&amp; shouldUsePool(is)) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> targetWidth = (<span class=\"keyword\">int</span>) Math.ceil(inWidth / (<span class=\"keyword\">double</span>) sampleSize);</div><div class=\"line\">    <span class=\"keyword\">int</span> targetHeight = (<span class=\"keyword\">int</span>) Math.ceil(inHeight / (<span class=\"keyword\">double</span>) sampleSize);</div><div class=\"line\">    <span class=\"comment\">// BitmapFactory will clear out the Bitmap before writing to it, so getDirty is safe.</span></div><div class=\"line\">    setInBitmap(options, pool.getDirty(targetWidth, targetHeight, config));</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> decodeStream(is, bufferedStream, options);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setInBitmap</span><span class=\"params\">(BitmapFactory.Options options, Bitmap recycled)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (Build.VERSION_CODES.HONEYCOMB &lt;= Build.VERSION.SDK_INT) &#123;</div><div class=\"line\">  \toptions.inBitmap = recycled;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"让我们先看一下我们最常见到的LruMemoryCache机制\"><a href=\"#让我们先看一下我们最常见到的LruMemoryCache机制\" class=\"headerlink\" title=\"让我们先看一下我们最常见到的LruMemoryCache机制\"></a>让我们先看一下我们最常见到的LruMemoryCache机制</h3><p><img src=\"/hello-world/img/NormalLruMemory.png\" alt=\"ActiveResourceCache的设计\"></p>\n<ul>\n<li>如图，当系统内存不足时，LruMemoryCache会根据LRU算法移除一些资源（bitmap）</li>\n<li>针对移除的资源，系统在GC时会回收资源(bitmap)以释放内存</li>\n<li>当应用再次需要次资源时，需要重新分配内存，重新对资源文件进行解析生成bitmap<br>1）这样会造成内存抖动；<br>2）比较耗费时间，影响流畅度（GC也比较频繁）</li>\n</ul>\n<h3 id=\"让我们再来看一下Glide的机制\"><a href=\"#让我们再来看一下Glide的机制\" class=\"headerlink\" title=\"让我们再来看一下Glide的机制\"></a>让我们再来看一下Glide的机制</h3><p><img src=\"/hello-world/img/GlideMemoryResourceCache.png\" alt=\"ActiveResourceCache的设计\"></p>\n<ul>\n<li>如图，当系统内存不足时，LruResourceCache会根据LRU算法移除一些资源（resource）到BitmapPool</li>\n<li>到BitmapPool会根据LRU算法移除一些资源（bitmap）</li>\n<li>当应用再次需要资源时，会优先复用到BitmapPool中的bitmap对象（复用其内存），只需刷新bitmap的像素数据<br>1）这样能有效地降低内存抖动；<br>2）由于很多情况下可以复用废弃bitmap的内存，因此避免了内存分配等造成的性能损耗，系统比较流畅<br>3）降低了系统GC的频率<br>4）LruResourceCache和BitmapPool中都是当前不在使用的资源，做整体的资源回收那叫一个酸爽。</li>\n</ul>\n<p>（本篇是Glide框架及源码解析的第三篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/\" target=\"_blank\" rel=\"external\">原文链接</a>）</p>\n"},{"title":"跟着源码学设计：Glide框架及源码解析（二）","url":"http://yoursite.com/2016/08/22/跟着源码学设计：Glide框架及源码解析（二）/","content":"<p><strong>前言</strong><br>近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。有疑问的同学，可以加博主QQ: 1404562848。</p>\n<p>本篇是Glide框架及源码解析的第二篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Glide有帮助，还望大家多多转载。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<p><strong>往期文章：</strong><br><a href=\"https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/\" target=\"_blank\" rel=\"external\"> 跟着源码学设计：Glide框架及源码解析（一）</a></p>\n<p><strong>目录</strong><br>[TOC]</p>\n<h3 id=\"Request管理机制\"><a href=\"#Request管理机制\" class=\"headerlink\" title=\"Request管理机制\"></a>Request管理机制</h3><p>在上一篇中我们剖析了Glide的生命周期绑定机制，这一篇我们紧接着Glide的处理流程来学习一下Glide的请求管理机制。<br>我们先来看一下Glide的最简单的使用代码示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ImageView ivImage = (ImageView) findViewById(R.id.ivImage);</div><div class=\"line\">Glide.with(ivImage.getContext()) <span class=\"comment\">//获取RequestManager对象</span></div><div class=\"line\">     .load(url); <span class=\"comment\">//设置Request对象需要的资源链接</span></div><div class=\"line\">     .into(ivImage); <span class=\"comment\">//获取Request对象并绑定viewTarget -&gt; 发起网络请求</span></div></pre></td></tr></table></figure></p>\n<p>该段代码十分简洁，但是内部实现的功能却十分的强大，比如：</p>\n<ul>\n<li>request的生命周期管理（如：退出或者隐藏了界面，需求就取消或暂停了）</li>\n<li>viewTarget的生命周期管理</li>\n<li>资源的复用和释放</li>\n<li>灵活的配置（request的builder模式）</li>\n</ul>\n<p>针对这些问题，后面将会一一展开剖析。</p>\n<h3 id=\"request及其生命周期管理\"><a href=\"#request及其生命周期管理\" class=\"headerlink\" title=\"request及其生命周期管理\"></a>request及其生命周期管理</h3><ul>\n<li>通过上一篇的学习，我们知道了Glide内部生命周期接口为LifecycleListener</li>\n<li>RequestManager具有生命周期（实现了LifecycleListener接口）</li>\n<li>request由RequestManager的into()方法族获得</li>\n<li>request的生命周期由RequestManager统一管理</li>\n</ul>\n<h3 id=\"RequestManager是如何生成request并管理request队列的？\"><a href=\"#RequestManager是如何生成request并管理request队列的？\" class=\"headerlink\" title=\"RequestManager是如何生成request并管理request队列的？\"></a>RequestManager是如何生成request并管理request队列的？</h3><p>老规矩，先上图：<br><img src=\"/hello-world/img/GlideRequestManager.png\" alt=\"Glide请求管理机制类图\"></p>\n<ul>\n<li>如图， RequestManager持有一个RequestTracker对象requestTracker。</li>\n<li>requestTracker对象维护request的队列集合</li>\n<li>RequestManager的load()函数用于获取GenericRequestBuilder对象（其实是子类对象）<ul>\n<li>load()内部调用loadGeneric()方法，将requestTracker对象引用传递给GenericRequestBuilder类</li>\n<li>load()实际调用GenericRequestBuilder.load()方法完成request的URL设置</li>\n</ul>\n</li>\n<li>GenericRequestBuilder的into()方法是实际产生request和消费request的地方。<ul>\n<li>GenericRequestBuilder的into(target)方法调用obtainReauest()获取到GenericRequest对象request，request与target相互绑定并被requestTracker维护。</li>\n</ul>\n</li>\n</ul>\n<p>下面看一下核心代码：GenericRequestBuilder的into(target)方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class=\"function\">Y <span class=\"title\">into</span><span class=\"params\">(Y target)</span> </span>&#123;</div><div class=\"line\">  Util.assertMainThread();</div><div class=\"line\">  <span class=\"keyword\">if</span> (target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  \t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"You must pass in a non null Target\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!isModelSet) &#123;</div><div class=\"line\">  \t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"You must first set a model (try #load())\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//因为target和request是相互绑定的，所以考虑到复用的情景时，可以先获取一下request</span></div><div class=\"line\">  Request previous = target.getRequest();</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//previous != null说明target有复用，需要释放之前绑定的资源</span></div><div class=\"line\">  <span class=\"comment\">//注意：request内部是绑定了资源的，这里还没有讲到，先知道这回事，后面会讲</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (previous != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">//释放资源，防内存泄漏</span></div><div class=\"line\">    <span class=\"comment\">//这段代码是精华，需要好好体会：</span></div><div class=\"line\">    <span class=\"comment\">//Glidek肯定支持view的复用（对吧？），那么复用的view资源是如何绑定和释放的？</span></div><div class=\"line\">    <span class=\"comment\">//这里就是资源释放的地方（入口），资源在何时绑定会在后续的课程讲到。</span></div><div class=\"line\">    previous.clear();</div><div class=\"line\">    requestTracker.removeRequest(previous);</div><div class=\"line\">    previous.recycle();</div><div class=\"line\">  &#125;</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//获取需求对象（对象绑定了target）</span></div><div class=\"line\">  Request request = buildRequest(target);</div><div class=\"line\">  <span class=\"comment\">//target绑定需求</span></div><div class=\"line\">  target.setRequest(request);</div><div class=\"line\">  <span class=\"comment\">//因为target具有生命周期，即实现了LifecycleListener方法，所以将其注册给ActivityFragmentLifecycle统一管理（不知道是啥的去看上一篇文章）</span></div><div class=\"line\">  lifecycle.addListener(target);</div><div class=\"line\">  <span class=\"comment\">//将需求加入队列并执行需求</span></div><div class=\"line\">  <span class=\"comment\">//注意是单线程</span></div><div class=\"line\">  requestTracker.runRequest(request);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">return</span> target;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"request的生命周期管理：\"><a href=\"#request的生命周期管理：\" class=\"headerlink\" title=\"request的生命周期管理：\"></a>request的生命周期管理：</h3><ul>\n<li>根据上文得知，request都被加入到requestTracker中来管理</li>\n<li>requestTracker由RequestManager创建和管理</li>\n<li>RequestManager具有生命周期</li>\n</ul>\n<p>下面让我们看看RequestManager在各个生命周期回调里都做了什么</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tresumeRequests();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tpauseRequests();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\trequestTracker.clearRequests();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pauseRequests</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tUtil.assertMainThread();</div><div class=\"line\">\trequestTracker.pauseRequests();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resumeRequests</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tUtil.assertMainThread();</div><div class=\"line\">\trequestTracker.resumeRequests();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//下面的两个回调其实和request的关系没有那么直接，先放在这里留个印象    </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTrimMemory</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>&#123;</div><div class=\"line\">\tglide.trimMemory(level);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLowMemory</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tglide.clearMemory();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 代码很清楚了吧。细心的同学可能注意到了onTrimMemory(int level)和onLowMemory()，这俩货是系统在资源不足时调用的，说白了就是释放内存，具体怎么搞得，后续文章会专门讲到Glide的内存管理机制（也是精华）</p>\n<p>最后让我们看看requestTracker都干啥了吧</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestTracker</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;Request&gt; requests = Collections.newSetFromMap(<span class=\"keyword\">new</span> WeakHashMap&lt;Request, Boolean&gt;());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"MismatchedQueryAndUpdateOfCollection\"</span>)</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Request&gt; pendingRequests = <span class=\"keyword\">new</span> ArrayList&lt;Request&gt;();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isPaused;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Starts tracking the given request.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</div><div class=\"line\">    requests.add(request);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isPaused) &#123;</div><div class=\"line\">    \trequest.begin();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">   \t\tpendingRequests.add(request);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// Visible for testing.</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</div><div class=\"line\">  \trequests.add(request);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Stops tracking the given request.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</div><div class=\"line\">  \trequests.remove(request);</div><div class=\"line\">  \tpendingRequests.remove(request);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Returns &#123;<span class=\"doctag\">@code</span> true&#125; if requests are currently paused, and &#123;<span class=\"doctag\">@code</span> false&#125; otherwise.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPaused</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> isPaused;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Stops any in progress requests.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pauseRequests</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    isPaused = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Request request : Util.getSnapshot(requests)) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (request.isRunning()) &#123;</div><div class=\"line\">      \trequest.pause();</div><div class=\"line\">      \tpendingRequests.add(request);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Starts any not yet completed or failed requests.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resumeRequests</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    isPaused = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Request request : Util.getSnapshot(requests)) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!request.isComplete() &amp;&amp; !request.isCancelled() &amp;&amp; !request.isRunning()) &#123;</div><div class=\"line\">      \trequest.begin();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    pendingRequests.clear();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Cancels all requests and clears their resources.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearRequests</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Request request : Util.getSnapshot(requests)) &#123;</div><div class=\"line\">    \trequest.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">    pendingRequests.clear();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Restarts failed requests and cancels and restarts in progress requests.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restartRequests</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Request request : Util.getSnapshot(requests)) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!request.isComplete() &amp;&amp; !request.isCancelled()) &#123;</div><div class=\"line\">        <span class=\"comment\">// Ensure the request will be restarted in onResume.</span></div><div class=\"line\">        request.pause();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isPaused) &#123;</div><div class=\"line\">          request.begin();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          pendingRequests.add(request);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>（本篇是Glide框架及源码解析的第二篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/\" target=\"_blank\" rel=\"external\">原文链接</a>）</p>\n"},{"title":"跟着源码学设计：Glide 框架及源码解析（一）","url":"http://yoursite.com/2016/08/19/跟着源码学设计：Glide框架及源码解析（一）/","content":"<p><strong>前言</strong><br>近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。有疑问的同学，可以加博主QQ: 1404562848。如果这篇文章对大家学习Glide有帮助，还望大家多多转载。</p>\n<blockquote>\n<p>本篇是Glide框架及源码解析的第一篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/</a> </p>\n</blockquote>\n<p><strong>目录</strong><br>[TOC]</p>\n<h3 id=\"Glide-简介\"><a href=\"#Glide-简介\" class=\"headerlink\" title=\"Glide 简介\"></a>Glide 简介</h3><p>Glide是一个性能优良的第三方网络图片加载框架，Google官方对其较为推荐。Glide的优良性能在节省内存和快速流畅加载方面具有较好体现。究其内部机制，发现其优良性能得益于以下几点：</p>\n<ul>\n<li>与使用环境生命周期相绑定：RequestManagerFragment &amp; SupportRequestManagerFragment</li>\n<li>内存的三级缓存池：LruMemoryResources, ActiveResources, BitmapPool</li>\n<li>内存复用机制：BitmapPool</li>\n</ul>\n<p>更多的关于Glide的介绍网上资料很多，在这里不再赘述，下文中将针对Glide的内部机制展开说明。</p>\n<h3 id=\"为什么要绑定生命周期（有什么优点）？\"><a href=\"#为什么要绑定生命周期（有什么优点）？\" class=\"headerlink\" title=\"为什么要绑定生命周期（有什么优点）？\"></a>为什么要绑定生命周期（有什么优点）？</h3><ul>\n<li>可以实现网络请求根据生命周期而暂停、执行、恢复、释放等</li>\n<li>可以实现资源比如图片的自动释放</li>\n<li>降低了内存的压力</li>\n<li>降低了内存泄漏的风险</li>\n</ul>\n<h3 id=\"绑定原理\"><a href=\"#绑定原理\" class=\"headerlink\" title=\"绑定原理\"></a>绑定原理</h3><ul>\n<li>原理的知识基础：Android中FragmentManager（简称fm）中的所有fragment（通过fm.add()添加进来）都与fm所处的context环境具有生命周期的绑定。例如：我们的activity中的fragment的生命周期自动通过activity的fm和activity的生命周期绑定。</li>\n</ul>\n<ul>\n<li>Glide内部定义封装了RequestManagerFragment 和 SupportRequestManagerFragment两种fragment用来实现绑定。该两类Fragment不具有任何的界面和其他功能，通过入口传入的context获取到的fm绑定生命周期到context上。</li>\n<li>Glide内部的生命周期绑定机制进一步通过基于xxxxRequestManagerFragment 的生命周期接口的回调实现。</li>\n</ul>\n<h3 id=\"话不多说，先来张类图\"><a href=\"#话不多说，先来张类图\" class=\"headerlink\" title=\"话不多说，先来张类图\"></a>话不多说，先来张类图</h3><p><img src=\"/hello-world/img/GlideLifeCycle.png\" alt=\"Glide生命周期绑定机制类图\"></p>\n<h3 id=\"关键类：RequestManagerRetriever-单例模式-：\"><a href=\"#关键类：RequestManagerRetriever-单例模式-：\" class=\"headerlink\" title=\"关键类：RequestManagerRetriever(单例模式)：\"></a>关键类：RequestManagerRetriever(单例模式)：</h3><ul>\n<li>根据context获取fm;</li>\n<li>获取xxxxRequestManagerFragment实例</li>\n<li>获取RequestManager实例</li>\n<li>相互绑定xxxxRequestManagerFragment和RequestManager</li>\n<li>xxxxRequestManagerFragment绑定到context生命周期</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Note: 根据context类型，获取fm</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (Util.isOnBackgroundThread() || Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> get(activity.getApplicationContext());</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">     assertNotDestroyed(activity);</div><div class=\"line\">     android.app.FragmentManager fm = activity.getFragmentManager();</div><div class=\"line\">     <span class=\"keyword\">return</span> fragmentGet(activity, fm);</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Note: new RequestManager(context,lifecycle,RequestManagerTreeNode)中，绑定了lifecycle;</div><div class=\"line\"> * current.setRequestManager(requestManager):requestManager绑定到fragment</div><div class=\"line\"> */</div><div class=\"line\"> <span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</div><div class=\"line\"> <span class=\"function\">RequestManager <span class=\"title\">fragmentGet</span><span class=\"params\">(Context context, android.app.FragmentManager fm)</span> </span>&#123;</div><div class=\"line\">   RequestManagerFragment current = getRequestManagerFragment(fm);</div><div class=\"line\">   RequestManager requestManager = current.getRequestManager();</div><div class=\"line\">   <span class=\"keyword\">if</span> (requestManager == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">     requestManager = <span class=\"keyword\">new</span> RequestManager(context, current.getLifecycle(),current.getRequestManagerTreeNode());</div><div class=\"line\">     current.setRequestManager(requestManager);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> requestManager;</div><div class=\"line\"> &#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Note: fm.beginTransaction().add(current, FRAGMENT_TAG): fragment绑定context生命周期</div><div class=\"line\"> */</div><div class=\"line\"> <span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.JELLY_BEAN_MR1)</div><div class=\"line\"> <span class=\"function\">RequestManagerFragment <span class=\"title\">getRequestManagerFragment</span><span class=\"params\">(<span class=\"keyword\">final</span> android.app.FragmentManager fm)</span> </span>&#123;</div><div class=\"line\">   RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);</div><div class=\"line\">   <span class=\"keyword\">if</span> (current == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">     current = pendingRequestManagerFragments.get(fm);</div><div class=\"line\">     <span class=\"keyword\">if</span> (current == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">       current = <span class=\"keyword\">new</span> RequestManagerFragment();</div><div class=\"line\">       pendingRequestManagerFragments.put(fm, current);</div><div class=\"line\">       fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();</div><div class=\"line\">       handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget();</div><div class=\"line\">     &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> current;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关键类：xxxxRequestManagerFragment-绑定context的生命周期\"><a href=\"#关键类：xxxxRequestManagerFragment-绑定context的生命周期\" class=\"headerlink\" title=\"关键类：xxxxRequestManagerFragment(绑定context的生命周期)\"></a>关键类：xxxxRequestManagerFragment(绑定context的生命周期)</h3><ul>\n<li>内部绑定一个RequestManager对象;</li>\n<li>内部绑定一个ActivityFragmentLifecycle对象</li>\n<li>在生命周期的回调中调用ActivityFragmentLifecycle的相应生命周期方法</li>\n<li>RequestManager通过注册到ActivityFragmentLifecycle的lifecycleListeners集合实现生命周期绑定</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ActivityFragmentLifecycle lifecycle;</div><div class=\"line\"><span class=\"keyword\">private</span> RequestManager requestManager;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RequestManagerFragment</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>(<span class=\"keyword\">new</span> ActivityFragmentLifecycle());</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">RequestManagerFragment(ActivityFragmentLifecycle lifecycle) &#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.lifecycle = lifecycle;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* Sets the current &#123;<span class=\"doctag\">@link</span> com.bumptech.glide.RequestManager&#125;.</div><div class=\"line\">* <span class=\"doctag\">@param</span> requestManager The request manager to use.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRequestManager</span><span class=\"params\">(RequestManager requestManager)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.requestManager = requestManager;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 生命周期：Glide通过xxxxRequestManagerFragment的生命周期回调实现内部生命周期回调</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\">  lifecycle.onStart();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onStop();</div><div class=\"line\">  lifecycle.onStop();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">  lifecycle.onDestroy();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关键类：ActivityFragmentLifecycle\"><a href=\"#关键类：ActivityFragmentLifecycle\" class=\"headerlink\" title=\"关键类：ActivityFragmentLifecycle\"></a>关键类：ActivityFragmentLifecycle</h3><ul>\n<li>管理同一个xxxxRequestManagerFragment分支下的所有LifecycleListener（具有生命周期）</li>\n<li>被xxxxRequestManagerFragment生命周期接口回调</li>\n<li>遍历回调所有LifecycleListener生命周期接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * A &#123;<span class=\"doctag\">@link</span> com.bumptech.glide.manager.Lifecycle&#125; implementation for tracking and notifying listeners of</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> android.app.Fragment&#125; and &#123;<span class=\"doctag\">@link</span> android.app.Activity&#125; lifecycle events.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityFragmentLifecycle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Lifecycle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;LifecycleListener&gt; lifecycleListeners =</div><div class=\"line\">            Collections.newSetFromMap(<span class=\"keyword\">new</span> WeakHashMap&lt;LifecycleListener, Boolean&gt;());</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isStarted;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isDestroyed;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addListener</span><span class=\"params\">(LifecycleListener listener)</span> </span>&#123;</div><div class=\"line\">        lifecycleListeners.add(listener);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isDestroyed) &#123;</div><div class=\"line\">            listener.onDestroy();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isStarted) &#123;</div><div class=\"line\">            listener.onStart();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            listener.onStop();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        isStarted = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</div><div class=\"line\">            lifecycleListener.onStart();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        isStarted = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</div><div class=\"line\">            lifecycleListener.onStop();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        isDestroyed = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</div><div class=\"line\">            lifecycleListener.onDestroy();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关键类：RequestManager\"><a href=\"#关键类：RequestManager\" class=\"headerlink\" title=\"关键类：RequestManager\"></a>关键类：RequestManager</h3><ul>\n<li>RequestManager被绑定于xxxxRequestManagerFragment</li>\n<li>RequestManager实现了LifecycleListener接口</li>\n<li>RequestManager注册给xxxxRequestManagerFragment的ActivityFragmentLifecycle</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RequestManager</span><span class=\"params\">(Context context, Lifecycle lifecycle, RequestManagerTreeNode treeNode)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, lifecycle, treeNode, <span class=\"keyword\">new</span> RequestTracker(), <span class=\"keyword\">new</span> ConnectivityMonitorFactory());</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> RequestManager(Context context, <span class=\"keyword\">final</span> Lifecycle lifecycle, RequestManagerTreeNode treeNode,</div><div class=\"line\"> RequestTracker requestTracker, ConnectivityMonitorFactory factory) &#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.context = context.getApplicationContext();</div><div class=\"line\">   <span class=\"keyword\">this</span>.lifecycle = lifecycle;</div><div class=\"line\">   <span class=\"keyword\">this</span>.treeNode = treeNode;</div><div class=\"line\">   <span class=\"keyword\">this</span>.requestTracker = requestTracker;</div><div class=\"line\">   <span class=\"keyword\">this</span>.glide = Glide.get(context);</div><div class=\"line\">   <span class=\"keyword\">this</span>.optionsApplier = <span class=\"keyword\">new</span> OptionsApplier();</div><div class=\"line\"> </div><div class=\"line\">  ConnectivityMonitor connectivityMonitor = factory.build(context,</div><div class=\"line\">  <span class=\"keyword\">new</span> RequestManagerConnectivityListener(requestTracker));</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">if</span> (Util.isOnBackgroundThread()) &#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> Handler(Looper.getMainLooper()).post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">          lifecycle.addListener(RequestManager.<span class=\"keyword\">this</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  \tlifecycle.addListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  lifecycle.addListener(connectivityMonitor);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"生命周期时序图\"><a href=\"#生命周期时序图\" class=\"headerlink\" title=\"生命周期时序图\"></a>生命周期时序图</h3><p><img src=\"/hello-world/img/GlideLifeCycleCallBack.png\" alt=\"Glide生命周期绑定机制时序图\"></p>\n<p>（本篇是Glide框架及源码解析的第一篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/\" target=\"_blank\" rel=\"external\">原文链接</a>）</p>\n"},{"title":"about","url":"http://yoursite.com/about/index.html","content":""},{"title":"category","url":"http://yoursite.com/category/index.html","content":""},{"title":"hello world","url":"http://yoursite.com/hello-world/index.html","content":""},{"title":"search","url":"http://yoursite.com/search/index.html","content":""},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":""},{"title":"link","url":"http://yoursite.com/link/index.html","content":""}]