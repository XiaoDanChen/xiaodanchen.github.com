[{"title":"机器学习：数学基础（概率论与数理统计）","url":"http://yoursite.com/2016/09/26/机器学习：数学基础（概率论与数理统计）/","content":"<p><strong>前言</strong><br>近期在自学机器学习，把笔记做个整理，以方便查阅和整理知识框架。喜欢探讨机器学习或者Android开发技术的同学可以加<strong>学习小组QQ群: 193765960</strong>。</p>\n<p>本文是机器学习的第二篇，仅是根据自己的理解做一个学习笔记，如果有大牛发现我这个小菜鸟的学习路线跑偏了，还希望能够提醒一下哈，在此表示感谢。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<h3 id=\"数学基础教材名目（我自己根据理解指定的，不一定准确）\"><a href=\"#数学基础教材名目（我自己根据理解指定的，不一定准确）\" class=\"headerlink\" title=\"数学基础教材名目（我自己根据理解指定的，不一定准确）\"></a>数学基础教材名目（我自己根据理解指定的，不一定准确）</h3><ul>\n<li>线性代数（同济大学 第四版）</li>\n<li>概率论与数理统计（浙江大学 第三版）</li>\n<li>复变函数（西安交通大学 第四版）</li>\n<li>随机过程极其应用（陆大絟 清华大学）</li>\n</ul>\n<h2 id=\"概率论与数理统计\"><a href=\"#概率论与数理统计\" class=\"headerlink\" title=\"概率论与数理统计\"></a>概率论与数理统计</h2><h3 id=\"第一章-概率论的基本概念\"><a href=\"#第一章-概率论的基本概念\" class=\"headerlink\" title=\"第一章 概率论的基本概念\"></a>第一章 概率论的基本概念</h3><ul>\n<li>确定性现象：在一定条件下必然发生的现象。</li>\n<li>统计规律性：在大量的重复试验或观察中所呈现出的固有规律性。</li>\n<li>随机现象：在个别试验中其结果呈现不确定性，在大量重复试验中其结果又具有统计规律性的现象。<h4 id=\"随机试验\"><a href=\"#随机试验\" class=\"headerlink\" title=\"随机试验\"></a>随机试验</h4>我们将具有以下三个特点的试验称为<strong>随机试验</strong>：</li>\n<li>可在相同的条件下重复试验。</li>\n<li>能事先明确试验的所有可能出现的结果。</li>\n<li>进行一次试验，不能确定会出现哪一个试验结果。</li>\n</ul>\n<h4 id=\"样本空间，随机事件\"><a href=\"#样本空间，随机事件\" class=\"headerlink\" title=\"样本空间，随机事件\"></a>样本空间，随机事件</h4><p><strong>样本空间</strong>：随机试验E所有可能出现的结果所组成的已知的集合S，样本空间的元素称为样本点。<br><strong>随机事件</strong>：试验E的样本空间S的子集，严格说是S中满足某些条件的子集，简称<strong>事件</strong>。由一个样本点组成的单点集，称为<strong>基本事件</strong>。<br><strong>必然事件</strong>：样本空间S。<br><strong>不可能事件</strong>：空集<span>$\\varnothing$</span><!-- Has MathJax --></p>\n<h4 id=\"事件间的关系及事件运算\"><a href=\"#事件间的关系及事件运算\" class=\"headerlink\" title=\"事件间的关系及事件运算\"></a>事件间的关系及事件运算</h4><ul>\n<li>若<span>$A\\subset B$</span><!-- Has MathJax -->,责称事件B包含事件A</li>\n<li>若<span>$A\\subset B$</span><!-- Has MathJax --> 且<span>$B\\subset A$</span><!-- Has MathJax -->即A=B,责称事件B等于事件A</li>\n<li><span>$A\\cup B = \\left \\{ x\\mid x\\in A且  x\\in B\\right \\}$</span><!-- Has MathJax --> \n <span>$$</span><!-- Has MathJax --></li>\n</ul>\n"},{"title":"机器学习：数学基础（线性代数篇）","url":"http://yoursite.com/2016/09/25/机器学习：数学基础（线性代数篇）/","content":"<p><strong>前言</strong><br>近期在自学机器学习，把笔记做个整理，以方便查阅和整理知识框架。喜欢探讨机器学习或者Android开发技术的同学可以加<strong>学习小组QQ群: 193765960</strong>。</p>\n<p>本文是机器学习的第一篇，因为我本人对机器学习的整个理解有限，就不再给大家一本正经的胡说八道了，以免误人子弟，仅是根据自己的理解做一个学习笔记，如果有大牛发现我这个小菜鸟的学习路线跑偏了，还希望能够提醒一下哈，在此表示感谢。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<h3 id=\"数学基础教材名目（我自己根据理解指定的，不一定准确）\"><a href=\"#数学基础教材名目（我自己根据理解指定的，不一定准确）\" class=\"headerlink\" title=\"数学基础教材名目（我自己根据理解指定的，不一定准确）\"></a>数学基础教材名目（我自己根据理解指定的，不一定准确）</h3><ul>\n<li>线性代数（同济大学 第四版）</li>\n<li>概率论与数理统计（浙江大学 第三版）</li>\n<li>复变函数（西安交通大学 第四版）</li>\n<li>随机过程极其应用（陆大絟 清华大学）</li>\n</ul>\n<h2 id=\"线性代数\"><a href=\"#线性代数\" class=\"headerlink\" title=\"线性代数\"></a>线性代数</h2><h3 id=\"第一章-行列式\"><a href=\"#第一章-行列式\" class=\"headerlink\" title=\"第一章 行列式\"></a>第一章 行列式</h3><h4 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h4><ol>\n<li>行列式是一个<strong>算术表达式</strong>的矩阵式的表达方式，比如表达式<span>$a_{11}a_{22} - a_{12}a_{21}$</span><!-- Has MathJax -->的二阶行列式表示为：<span>$$\\begin{vmatrix}\na_{11}\\ \\ a_{12} \\\\ \na_{21}\\ \\ a_{22} \n\\end{vmatrix}$$</span><!-- Has MathJax -->\n$a_{ij}$称为行列式的元素或元</li>\n<li>全排列及其逆序数</li>\n</ol>\n<ul>\n<li>把n个元素排成一列就叫这n个元素的一个全排列，简称排列。</li>\n<li>对n个元素规定好一个标准的次序，对于这n个元素的任何一个排列，如果任意两个元素相互的先后次序与标准排列中的次序不一致，就说有一个逆序。</li>\n<li>一个排列中的逆序总数称为这个排列的逆序数</li>\n<li>逆序数为奇数的排列称为奇排列，为偶数的排列称为偶排列。</li>\n</ul>\n<ol>\n<li><p>n阶行列式(t是$p_1，p_2，…，p_n$相对于自然数列1，2，…n的逆序数)</p>\n<span>$$\\sum(-1)^ta_1p_1a_2p_2...a_np_n = \\begin{vmatrix}\na_{11}\\ \\ a_{12}\\ ... a_{1n}\\\\ \na_{21}\\ \\ a_{22}\\ ... a_{2n}\\\\ \n.....\\\\\na_{n1}\\ \\ a_{n2}\\ ... a_{nn}\n\\end{vmatrix}= D$$</span><!-- Has MathJax -->\n</li>\n<li><p>转置行列式$D^T$</p>\n<span>$$D = \\begin{vmatrix}\na_{11}\\ \\ a_{12}\\ ... a_{1n}\\\\ \na_{21}\\ \\ a_{22}\\ ... a_{2n}\\\\ \n.....\\\\\na_{n1}\\ \\ a_{n2}\\ ... a_{nn}\n\\end{vmatrix},D^T = \\begin{vmatrix}\na_{11}\\ \\ a_{21}\\ ... a_{n1}\\\\ \na_{12}\\ \\ a_{22}\\ ... a_{n2}\\\\ \n.....\\\\\na_{1n}\\ \\ a_{2n}\\ ... a_{nn}\n\\end{vmatrix}$$</span><!-- Has MathJax -->\n</li>\n</ol>\n<h4 id=\"定理及推论\"><a href=\"#定理及推论\" class=\"headerlink\" title=\"定理及推论\"></a>定理及推论</h4><ol>\n<li>主对角线以下（上）的元素全为零的行列式叫做上（下）三角行列式，其算术表达式为对角线元素乘积。</li>\n<li>一个排列中，任意两个元素对换，排列改变奇偶性。</li>\n<li>奇数排列变成标准排列的对换次数为奇数，偶数排列对换成标准排列的次数为偶数。</li>\n<li>行列式与他的转置行列式相等</li>\n<li>互换行列式的两行（列）,行列式变号。</li>\n<li>行列式中如果有两行或两列成比例，则次行列式等于零。</li>\n<li>把行列式的某一行（列）的元素各自拆分成2个数字的和，则行列式的值等于拆分的两个子行列式的和</li>\n<li><strong>把行列式的某一行（列）的各个元素乘以同一个数加到另一行（列）对应的元素上去，行列式不变。</strong></li>\n</ol>\n<blockquote>\n<p><strong>余子式</strong>：在行列式中，把第<span>$a_{ij}$</span><!-- Has MathJax -->元素所在的行和列删除后，剩余的行列式称为<span>$a_{ij}$</span><!-- Has MathJax -->的余子式，计做<span>$M_{ij}$</span><!-- Has MathJax -->。<span>$A_{ij} = (-1)^{i+j}M_{ij}$</span><!-- Has MathJax -->称为<span>$a_{ij}$</span><!-- Has MathJax -->的代数余子式。</p>\n</blockquote>\n<ol>\n<li>一个行列式，如果其中第i行所有元素除<span>$a_{ij}$</span><!-- Has MathJax -->之外全为零，那么这个行列式等于<span>$a_{ij}$</span><!-- Has MathJax -->与他的代数余子式<span>$A_{ij}$</span><!-- Has MathJax -->的乘积。</li>\n<li>行列式等于他的任意一行（列）的各个元素与其对应的代数余子式的乘积之和。（行列式的按行、按列展开）</li>\n</ol>\n<h4 id=\"克拉默法则\"><a href=\"#克拉默法则\" class=\"headerlink\" title=\"克拉默法则\"></a>克拉默法则</h4><p>含有n个未知数的n个线性方程的方程组<br><span>$$\\left\\{\\begin{matrix}\na_{11}x_1 +  a_{12}x_2 + ...+ a_{1n}x_n = b_1\\\\ \na_{21}x_1 +  a_{22}x_2 + ...+ a_{2n}x_n = b_2\\\\ \n......\\\\\na_{n1}x_1 +  a_{n2}x_2 + ...+ a_{nn}x_n = b_n\n\\end{matrix}\\right.$$</span><!-- Has MathJax --><br>如果线性方程组的系数不等于零，即<br><span>$$D = \\begin{vmatrix}\na_{11}\\ \\ a_{12}\\ ... a_{1n}\\\\ \na_{21}\\ \\ a_{22}\\ ... a_{2n}\\\\ \n.....\\\\\na_{n1}\\ \\ a_{n2}\\ ... a_{nn}\n\\end{vmatrix}\\neq 0,$$</span><!-- Has MathJax --><br>那么，方程组有唯一解<br><span>$x_1 = \\frac{D_1}{D}, x_2 = \\frac{D_2}{D},..., x_n = \\frac{D_n}{D},$</span><!-- Has MathJax --><br>其中，<span>$D_j(j = 1,2,...,n)$</span><!-- Has MathJax -->是把系数行列式D中的第j列用方程式组右端的常数项替换后所得的n阶行列式。</p>\n<p>根据克拉默法则，可以得出如下定理，</p>\n<ol>\n<li>如果n阶线性方程组的系数行列式不等于0，则方程组一定有唯一解。</li>\n<li>如果n元线性方程组无解或者有两个不同的解，则它的系数行列式必为0</li>\n<li>如果n元齐次方程组（方程组右端为0）的系数行列式不等于0，则齐次方程组没有非零解。</li>\n<li>如果齐次方程组有非零解，则它的系数行列式必为0.</li>\n</ol>\n<h3 id=\"第二章：矩阵及其运算\"><a href=\"#第二章：矩阵及其运算\" class=\"headerlink\" title=\"第二章：矩阵及其运算\"></a>第二章：矩阵及其运算</h3><h4 id=\"矩阵定义\"><a href=\"#矩阵定义\" class=\"headerlink\" title=\"矩阵定义\"></a>矩阵定义</h4><ol>\n<li>由<span>$m \\times n$</span><!-- Has MathJax -->个数排成的m行n列的数表称为m行n列矩阵，简称<span>$m \\times n$</span><!-- Has MathJax -->矩阵,记作<span>$$A = \\begin{bmatrix}\na_{11}\\ \\ a_{12}\\ ... a_{1n}\\\\ \na_{21}\\ \\ a_{22}\\ ... a_{2n}\\\\ \n.....\\\\\na_{m1}\\ \\ a_{m2}\\ ... a_{mn}\n\\end{bmatrix}\\neq 0,$$</span><!-- Has MathJax -->\n简记作<span>$A_{m \\times n}$</span><!-- Has MathJax --></li>\n<li>元素是实数的矩阵称为实矩阵，元素为复数的矩阵称为复矩阵</li>\n<li>行数和列数都为n的矩阵称为n阶方阵，记为<span>$A_n$</span><!-- Has MathJax --></li>\n<li>只有一行的矩阵称为<strong>行矩阵</strong>，又叫做<strong>行向量</strong></li>\n<li>只有一列的矩阵称为<strong>列矩阵</strong>，又叫做<strong>列向量</strong></li>\n<li>两个行数和列数均分别相等的矩阵，称为<strong>同型矩阵</strong></li>\n</ol>\n<span>$$</span><!-- Has MathJax -->"},{"title":"Android APP更换字体策略精要","url":"http://yoursite.com/2016/09/12/Android-APP更换字体策略精要/","content":"<p><strong>前言</strong><br>近期项目需要在我们的APP中使用指定的字体库。经过搜集资料，研读源码，和别人探讨请教，最终产出了一些比较好的方案。不敢专享，写成文章分享出来，希望对大家的实际开发工作有所帮助。喜欢探讨Android开发技术的同学可以加<strong>学习小组QQ群: 193765960</strong>。</p>\n<p>本文只总结了较优方案，其他诸如自定义textView类，遍历layout_root_view这样的方案，作者认为限制较大，使用麻烦，就不在这里介绍了，感兴趣的朋友请自行百度。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<h3 id=\"Android字体机制介绍\"><a href=\"#Android字体机制介绍\" class=\"headerlink\" title=\"Android字体机制介绍\"></a>Android字体机制介绍</h3><h4 id=\"关键类：\"><a href=\"#关键类：\" class=\"headerlink\" title=\"关键类：\"></a>关键类：</h4><ul>\n<li><strong>Typeface:</strong><br>字体类，定义了字体类型到字体库的映射关系，Android有<strong>DEFAULT</strong>, <strong>MONOSPACE</strong>, <strong>SERIF</strong>, <strong>SANS_SERIF</strong>几种字体，根据各自的NORMAL(常规),BOLD(加粗),ITALIC(倾斜),BOLD_ITALIC(加粗倾斜)等几种样式，总共可以映射到至少16种字体库。</li>\n<li><strong>TextAppearance:</strong><br>字体外观类，定义了字体的外观比如，typeface，textsize,textcolor等外观属性。</li>\n</ul>\n<h4 id=\"TextView的字体显示机制\"><a href=\"#TextView的字体显示机制\" class=\"headerlink\" title=\"TextView的字体显示机制\"></a>TextView的字体显示机制</h4><p>先看一下TextView的构造方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TextView</span><span class=\"params\">(Context context)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TextView</span><span class=\"params\">(Context context, @Nullable AttributeSet attrs)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TextView</span><span class=\"params\">(Context context, @Nullable AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TextView</span><span class=\"params\">(</span></span></div><div class=\"line\">            Context context, @Nullable AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr, <span class=\"keyword\">int</span> defStyleRes);</div></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>AttributeSet：</strong>xml中设置的属性</li>\n<li><strong>defStyleAttr：</strong>系统默认的属性</li>\n<li><strong>defStyleRes：</strong>系统默认的样式，<strong>这个是我们需要注意的参数哈</strong></li>\n</ul>\n<p><strong>Textview的字体设置逻辑：</strong><br>1）查看xml中是否设置了TextAppearance属性，如果设置了就判断外观中是否设置了字体。否则就执行第二步。<br>2）查看xml中是否设置了Typeface属性，指明了字体。否则执行第三步<br>3）使用系统的默认样式：defStyleRes</p>\n<blockquote>\n<p>所以，假如我们的xml中对字体没有做设置，要是想要修改字体又不想修改xml，那么我们就要想其他办法了。<br>我最终的方案（方案一）是在APP的theme中去设置修改系统的默认样式（最终走到这个思路上是经过了比较酸爽的经过的，就不在这里细说了）。</p>\n</blockquote>\n<h3 id=\"方案一（底层方案）：通过反射机制，修改Typeface类的字体库引用\"><a href=\"#方案一（底层方案）：通过反射机制，修改Typeface类的字体库引用\" class=\"headerlink\" title=\"方案一（底层方案）：通过反射机制，修改Typeface类的字体库引用\"></a>方案一（底层方案）：通过反射机制，修改Typeface类的字体库引用</h3><p><strong>第一步：</strong>通过反射机制修改Typeface字体指向的字体库到我们的字体库。</p>\n<ul>\n<li><p>定义修改字体库的方法类（示例）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Typeface;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FontsUtils</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setDefaultFont</span><span class=\"params\">(Context context,</span></span></div><div class=\"line\">      String staticTypefaceFieldName, String fontAssetName) &#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> Typeface regular = Typeface.createFromAsset(context.getAssets(),</div><div class=\"line\">  fontAssetName);</div><div class=\"line\">      replaceFont(staticTypefaceFieldName, regular);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">replaceFont</span><span class=\"params\">(String staticTypefaceFieldName,</span></span></div><div class=\"line\">    <span class=\"keyword\">final</span> Typeface newTypeface) &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Field staticField = Typeface.class</div><div class=\"line\">        .getDeclaredField(staticTypefaceFieldName);</div><div class=\"line\">        staticField.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">        staticField.set(<span class=\"keyword\">null</span>, newTypeface);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在工程assets目录下新建fonts文件夹，把我们需要的字库放在里面，比如：FZLTHJW.TTF</p>\n</li>\n<li><p>在MyApplication.oncreate()中调用修改字体库：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">FontsUtils.setDefaultFont(<span class=\"keyword\">this</span>, <span class=\"string\">\"DEFAULT\"</span>, <span class=\"string\">\"fonts/FZLTHJW.TTF\"</span>);</div><div class=\"line\">FontsUtils.setDefaultFont(<span class=\"keyword\">this</span>, <span class=\"string\">\"MONOSPACE\"</span>, <span class=\"string\">\"fonts/FZLTHJW.TTF\"</span>);</div><div class=\"line\">FontsUtils.setDefaultFont(<span class=\"keyword\">this</span>, <span class=\"string\">\"SERIF\"</span>, <span class=\"string\">\"fonts/FZLTHJW.TTF\"</span>);</div><div class=\"line\">FontsUtils.setDefaultFont(<span class=\"keyword\">this</span>, <span class=\"string\">\"SANS_SERIF\"</span>, <span class=\"string\">\"fonts/FZLTHJW.TTF\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>第二步：</strong>修改APP theme的默认属性。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=\"AppTheme\" parent=\"AppBaseTheme\"&gt;</div><div class=\"line\">\t&lt;item name=\"android:textViewStyle\"&gt;@style/FontTextviewstyle&lt;/item&gt;</div><div class=\"line\">\t&lt;item name=\"android:buttonStyle\"&gt;@style/FontButtonstyle&lt;/item&gt;</div><div class=\"line\">\t&lt;item name=\"editTextStyle\"&gt;@style/FontEditTextstyle&lt;/item&gt;</div><div class=\"line\">\t&lt;item name=\"android:radioButtonStyle\"&gt;@style/FontradioButtonstyle&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;style name=\"FontTextviewstyle\" parent=\"android:style/Widget.TextView\"&gt;</div><div class=\"line\">\t&lt;item name=\"android:textAppearance\"&gt;@style/FontTextAppearance&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;style name=\"FontButtonstyle\" parent=\"android:style/Widget.Button\"&gt;</div><div class=\"line\">\t&lt;item name=\"android:textAppearance\"&gt;@style/FontTextAppearance&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;style name=\"FontradioButtonstyle\" parent=\"android:style/Widget.CompoundButton.RadioButton\"&gt;</div><div class=\"line\">\t&lt;item name=\"android:textAppearance\"&gt;@style/FontTextAppearance&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;style name=\"FontEditTextstyle\" parent=\"Widget.AppCompat.EditText\"&gt;</div><div class=\"line\">\t&lt;item name=\"android:textAppearance\"&gt;@style/FontTextAppearance&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;style name=\"FontTextAppearance\" parent=\"@android:style/TextAppearance\"&gt;</div><div class=\"line\">        &lt;item name=\"android:typeface\"&gt;monospace&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>总结：</strong></p>\n<ul>\n<li><strong>优点：</strong><ul>\n<li>不用修改xml，没有为每个activity创建字体的实例。</li>\n<li>除了常见的控件外，对Material Design的新控件也有作业</li>\n</ul>\n</li>\n<li><strong>缺陷：</strong><ul>\n<li>对于alertDialog还没有实现style的默认适配</li>\n<li>因为是修改的底层逻辑，相较于方案二，稍复杂。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"方案二（顶层方案）：自定义布局加载器，在加载layout-xml时对view-tree的-view做字体的逻辑处理\"><a href=\"#方案二（顶层方案）：自定义布局加载器，在加载layout-xml时对view-tree的-view做字体的逻辑处理\" class=\"headerlink\" title=\"方案二（顶层方案）：自定义布局加载器，在加载layout_xml时对view tree的 view做字体的逻辑处理\"></a>方案二（顶层方案）：自定义布局加载器，在加载layout_xml时对view tree的 view做字体的逻辑处理</h3><ul>\n<li><strong>使用：</strong>如下方代码所示，在oncreatview的回调中，对view做类型判断，设置view的字体。</li>\n<li><strong>优点：</strong>该方案代码逻辑清晰，使用简单，几行代码就可以搞定问题，不用修改xml等。</li>\n<li><strong>缺陷：</strong><ul>\n<li>在一些第三方的控件或者自定义控件上可能使用会有限制，如果控件没有提供修改控件字体的接口的话（待验证）</li>\n<li>需要注意的是，对于Material Design的<strong>android.support.design.widget.TextInputLayout</strong>，<strong>android.support.design.widget.TabLayout</strong>这样的控件不起作用，需要对这种类型设置*textAppearance这样的属性。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">replaceFont</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> Typeface typeface = Typeface.createFromAsset(getAssets(), <span class=\"string\">\"fonts/fangzheng.ttf\"</span>);</div><div class=\"line\">\t\tLayoutInflaterCompat.setFactory(LayoutInflater.from(<span class=\"keyword\">this</span>), <span class=\"keyword\">new</span> LayoutInflaterFactory() &#123;</div><div class=\"line\">\t\t\t   </div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t\t\tAppCompatDelegate delegate = getDelegate();</div><div class=\"line\">\t\t\t\tView view = delegate.createView(parent, name, context, attrs);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(view != <span class=\"keyword\">null</span> )&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(view <span class=\"keyword\">instanceof</span> TextView)&#123;</div><div class=\"line\">\t\t\t\t\t\t((TextView)view).setTypeface(typeface);</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(view <span class=\"keyword\">instanceof</span> Button)&#123;</div><div class=\"line\">\t\t\t\t\t\t((Button)view).setTypeface(typeface);</div><div class=\"line\">\t\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(view <span class=\"keyword\">instanceof</span> RadioButton)&#123;</div><div class=\"line\">\t\t\t\t\t\t((RadioButton)view).setTypeface(typeface);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> view;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">*  BaseActivity.java</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\treplaceFont();<span class=\"comment\">//注意需要在super方法之前调用，否则会报异常</span></div><div class=\"line\">\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>总结：</strong></p>\n<ul>\n<li>通过这个方案，其实我们应该学习到一种<strong>统一对xml viewTree中某种控件设置某种属性的方法。</strong></li>\n<li>举一反三，针对刚才上述的缺陷，我们其实也可以尝试设置textAppearance属性（相较于设置typeface麻烦些），感兴趣的同学可以去试验下。</li>\n</ul>\n"},{"title":"那些年,Android我们踩过的坑","url":"http://yoursite.com/2016/09/11/那些年，Android我们踩过的坑/","content":"<p><strong>前言</strong></p>\n<p>笔记贴，记录平时开发遇到的一些值得总结的bug。欢迎加入<strong>学习小组QQ群: 193765960</strong>。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<h2 id=\"ViewPager-fragment-生命周期\"><a href=\"#ViewPager-fragment-生命周期\" class=\"headerlink\" title=\"ViewPager + fragment: 生命周期\"></a>ViewPager + fragment: 生命周期</h2><p>当viewpger和fragment搭配使用时，一定会遇到过各种各样的问题。<br>诸如，二次进入界面，数据丢失了，界面空白等等。<br><strong>但凡viepager+fragment的种种问题，都可以从此种情况下fragment的生命周期得到解释和解决。</strong><br>因为预加载的缘故，当现实<strong>当前fragment</strong>时，<strong>下一页fragment</strong>已预加载好（resume状态）。<strong>上一页fragment</strong>(如果当前页不是第一页)也处于resumed状态。<br><strong>简单粗暴点说，viewpager同时有三个页处于onresume状态，其中中间那个页处于可见状态。</strong><br>以现实页为中心的三页(三剑客)作为一个整体，这个整体的上一页和下一页都处于ondestroyview状态（之前已经加载过）。<br>“三剑客”的前一个或者下一个再次显示的时候，需要经oncreatview启动显示。所以，如果在oncreatview和ondestroyview中的UI和数据处理不合理，就会导致各种内存浪费，数据空指针等问题。</p>\n<p>我建议：<br><strong>在onAttach方法中来初始化context、adapter等</strong>，例如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAttach</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">\tmContext = context;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == mAdapter)&#123;</div><div class=\"line\">\t\tmAdapter = <span class=\"keyword\">new</span> HomePageListAdapter(mContext, data);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">super</span>.onAttach(context);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>在onDetach方法中来释放非view类资源</strong>，例如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetach</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tmContext = <span class=\"keyword\">null</span>;</div><div class=\"line\">\tjump2activity = <span class=\"keyword\">null</span>;</div><div class=\"line\">\tmAdapter = <span class=\"keyword\">null</span>;</div><div class=\"line\">\tdata = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"keyword\">super</span>.onDetach();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>在onCreateView方法中来初始化view类资源</strong>，例如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\t\tView view = inflater.inflate(R.layout.fragment_xxxx, container,<span class=\"keyword\">false</span>);</div><div class=\"line\">\t\tlv_orders = (ListView)view.findViewById(R.id.lv_orders);</div><div class=\"line\">\t\tlv_orders.setAdapter(mAdapter);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> view;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>在onCreateView方法中来初释放view类资源</strong>，例如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tlv_orders = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"keyword\">super</span>.onDestroyView();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Activity-fragment-二次进入fragment-某个button点击效果没有了\"><a href=\"#Activity-fragment-二次进入fragment-某个button点击效果没有了\" class=\"headerlink\" title=\"Activity + fragment: 二次进入fragment 某个button点击效果没有了\"></a>Activity + fragment: 二次进入fragment 某个button点击效果没有了</h2><p><strong>Q: 通过replace方法，切换fragment，后来发现某个button的点击效果没有了。</strong><br><strong>A: </strong>通过private OnClickListener mListener  = new OnClickListener{…}方式声明的对象在第二次进入fragment的时候成为了null。<br>没有搞懂为啥，但是先把解决办法记录下来吧，很傻的方案：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> OnClickListener mListener  = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, @Nullable ViewGroup container,</span></span></div><div class=\"line\">\t\t@Nullable Bundle savedInstanceState) &#123;</div><div class=\"line\">\t<span class=\"keyword\">super</span>.onCreateView(inflater, container, savedInstanceState);</div><div class=\"line\">\t......</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == mListener)&#123;</div><div class=\"line\">\t\tmListener = <span class=\"keyword\">new</span> OnClickListener() &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//TODO</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> view;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>笔记贴，持续更新记录……</p>\n</blockquote>\n"},{"title":"跟着源码学设计：Glide框架及源码解析（五）","url":"http://yoursite.com/2016/09/11/跟着源码学设计：Glide框架及源码解析（五）/","content":"<p><strong>前言</strong></p>\n<p>近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。<strong>学习小组QQ群: 193765960</strong>。</p>\n<p>本篇是Glide框架及源码解析的第五篇，主要是总结记录Glide的一些使用技巧（会持续更新）。如果这篇文章对大家学习Glide有帮助，还望大家多多转载。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<p><strong>往期文章：</strong></p>\n<p><a href=\"https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（一）</a><br><a href=\"https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（二）</a><br><a href=\"https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（三）</a><br><a href=\"https://xiaodanchen.github.io/2016/08/23/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E5%9B%9B%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（四）</a></p>\n<h3 id=\"显示拍照或者相册中的照片：Uri\"><a href=\"#显示拍照或者相册中的照片：Uri\" class=\"headerlink\" title=\"显示拍照或者相册中的照片：Uri\"></a>显示拍照或者相册中的照片：Uri</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Glide.with(<span class=\"keyword\">this</span>).load(uri).into(im_car_pic);</div></pre></td></tr></table></figure>\n<h3 id=\"将资源转换成base64数据\"><a href=\"#将资源转换成base64数据\" class=\"headerlink\" title=\"将资源转换成base64数据\"></a>将资源转换成base64数据</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.util.Base64;</div><div class=\"line\">......</div><div class=\"line\">Glide.with(<span class=\"keyword\">this</span>).load(datastr).asBitmap().toBytes().into(<span class=\"keyword\">new</span> SimpleTarget&lt;<span class=\"keyword\">byte</span>[]&gt;(<span class=\"number\">320</span>,<span class=\"number\">150</span>) &#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResourceReady</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes, GlideAnimation&lt;? <span class=\"keyword\">super</span> <span class=\"keyword\">byte</span>[]&gt; arg1)</span> </span>&#123;</div><div class=\"line\">    String base64Data = Base64.encodeToString(bytes, Base64.DEFAULT);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>更多用法，持续更新中……</p>\n</blockquote>\n"},{"title":"使用MVP-Retrofit-Rxjava搭建工程实战","url":"http://yoursite.com/2016/09/04/使用MVP-Retrofit-Rxjava搭建工程实战/","content":"<p><strong>前言</strong><br>最近使用MVP+Retrofit+Rxjava搭建了新项目的工程框架和网络请求回调框架。在网上也查看了一些资料，但是没有找到很贴合实际项目各自不同的请求及响应报文协议的解决方案。无奈，自己苦逼的一番摸索踩坑，终于搭建出了一个基本还算满意的解决方案，在这里和大家分享一下，希望能够帮助开发工程师们省去一些苦恼。<br>随着深入地开发，这个方案肯定还会陆续暴露出一些坑，我会一直维护这篇文章，将对应的坑和解决办法记录下来。决定使用我这个工程框架的同学还希望能够加<strong>学习小组QQ群</strong>: 193765960，将实际开发中遇到的坑在群中进行讨论和分享。<br>如果这篇文章对大家实际开发有所帮助，还望大家多多转发。</p>\n<p>在阅读这篇文章之前要求读者对MVP，retrofit，rxjava，Gson具有一定的了解。<br>我在这里帮大家整理了一些比较好的文章，需要的同学自行查看。<br><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0303/4029.html\" target=\"_blank\" rel=\"external\">《Retrofit使用教程(一)》</a><br><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0323/4074.html\" target=\"_blank\" rel=\"external\">《Retrofit使用教程(二)》</a><br><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/2016/0325/4082.html\" target=\"_blank\" rel=\"external\">《Retrofit使用教程(三) : Retrofit与RxJava初相逢》</a><br><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0518/4270.html\" target=\"_blank\" rel=\"external\">《你真的会用Retrofit2吗?Retrofit2完全教程》</a><br><a href=\"http://www.jianshu.com/p/e740196225a4\" target=\"_blank\" rel=\"external\">《你真的会用Gson吗?Gson使用指南》</a><br><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1012/3572.html\" target=\"_blank\" rel=\"external\">《给 Android 开发者的 RxJava 详解》</a></p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/</a> </p>\n</blockquote>\n<h3 id=\"MVP部分\"><a href=\"#MVP部分\" class=\"headerlink\" title=\"MVP部分\"></a>MVP部分</h3><p>本篇不讲解什么是MVP，不懂MVP的童鞋请自行百度。</p>\n<h4 id=\"基类\"><a href=\"#基类\" class=\"headerlink\" title=\"基类\"></a>基类</h4><p><strong>BasePresenter.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasePresenter</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * View的引用，使用弱引用，当弱引用所引用的对象被销毁，软引用也会被释放</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">protected</span> WeakReference&lt;T&gt; mViewRef;</div><div class=\"line\">\t\t </div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * Presenter与View关联</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> view</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attachView</span><span class=\"params\">(T view)</span></span>&#123;</div><div class=\"line\">\t\tmViewRef = <span class=\"keyword\">new</span> WeakReference&lt;T&gt;(view);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * Presenter与View解除关联</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">detacheView</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(mViewRef != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\tmViewRef.clear();</div><div class=\"line\">\t\t\tmViewRef = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> T <span class=\"title\">getView</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(mViewRef != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> mViewRef.get();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * Presenter与View是否已关联</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isViewAttached</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mViewRef != <span class=\"keyword\">null</span> &amp;&amp; mViewRef.get() != <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>.<br><strong>BaseActivity.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@param</span> &lt;V&gt; 子activity的view接口</div><div class=\"line\"> * <span class=\"doctag\">@param</span> &lt;T&gt; 子activity关联的presenter： T extends BasePresenter&lt;V&gt;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseActivity</span>&lt;<span class=\"title\">V</span>, <span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasePresenter</span>&lt;<span class=\"title\">V</span>&gt;&gt;  <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">protected</span> T mPresenter;</div><div class=\"line\">\t......</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"> </div><div class=\"line\">\t\t<span class=\"comment\">//初始化Presenter</span></div><div class=\"line\">\t\tmPresenter = createPresenter();</div><div class=\"line\">\t\t<span class=\"comment\">//presenter与View绑定</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != mPresenter)&#123;</div><div class=\"line\">\t\t\tmPresenter.attachView((V)<span class=\"keyword\">this</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t......</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 创建presenter</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> T <span class=\"title\">createPresenter</span><span class=\"params\">()</span></span>;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//presenter与activity解绑定</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != mPresenter)&#123;</div><div class=\"line\">\t\t\tmPresenter.detacheView();</div><div class=\"line\">\t\t\tmPresenter = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t......</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上是我编写的两个基类，非本文重点，实际开发中大家也可以自己开发自己的基类。下面我将以登录界面做为业务类的demo讲解。由于项目原因，我会隐去部分细节，请谅解。</p>\n<h4 id=\"业务类：登录\"><a href=\"#业务类：登录\" class=\"headerlink\" title=\"业务类：登录\"></a>业务类：登录</h4><p>在我的login业务文件夹下，我将要完成三个类的编写：LoginContract.java, LoginPresenter.java, LoginActivity.java<br><strong>LoginContract.java</strong><br>契约类，将约束定义MVP中V，P的接口<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LoginContract</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\"> \t<span class=\"comment\">//IBaseView定义了一些View的公共方法，根据实际需要可自行定义。</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">View</span> <span class=\"keyword\">extends</span> <span class=\"title\">IBaseView</span> </span>&#123;</div><div class=\"line\">    \t<span class=\"comment\">//User：Model bean</span></div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loginSucceed</span><span class=\"params\">(User user)</span></span>;</div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loginFailed</span><span class=\"params\">(String errMessage)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Presenter</span></span>&#123;</div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String name, String pwd)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>LoginPresenter.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginPresenter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasePresenter</span>&lt;<span class=\"title\">LoginContract</span>.<span class=\"title\">View</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">LoginContract</span>.<span class=\"title\">Presenter</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoginPresenter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String name, String pwd)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//因为login的业务逻辑比较简单，我就不再专门去定义Model的接口了</span></div><div class=\"line\">\t\t </div><div class=\"line\">\t\t<span class=\"comment\">//登录请求及回调（后面细讲）</span></div><div class=\"line\">\t\t......</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>LoginActivity.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span>&lt;<span class=\"title\">LoginContract</span>.<span class=\"title\">View</span>,<span class=\"title\">LoginPresenter</span>&gt; </span></div><div class=\"line\"><span class=\"keyword\">implements</span> <span class=\"title\">LoginContract</span>.<span class=\"title\">View</span>&#123;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">private</span> EditText Edt_name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> EditText Edt_pwd;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\t\tsetContentView(R.layout.activity_login);</div><div class=\"line\">\t\tinitData();</div><div class=\"line\">\t\tinitView();</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></div><div class=\"line\"> </div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tEdt_name = (EditText) findViewById(R.id.edt_name);</div><div class=\"line\">\t\tEdt_pwd = (EditText) findViewById(R.id.edt_pwd);</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> LoginPresenter <span class=\"title\">createPresenter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LoginPresenter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLogin</span><span class=\"params\">(View v)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//由于是Demo,所以逻辑上不会那么严格，主要讲清楚关键点，各种null检查啥的自己搞</span></div><div class=\"line\">\t\tmPresenter.login(Edt_name.getText().toString(),Edt_pwd.getText().toString());</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loginSucceed</span><span class=\"params\">(User user)</span> </span>&#123;</div><div class=\"line\">\t\tBaseFun.makeToast(getApplicationContext(), <span class=\"string\">\"登录成功！\"</span>+user.getNickName());</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loginFailed</span><span class=\"params\">(String errMessage)</span> </span>&#123;</div><div class=\"line\">\t\tBaseFun.makeToast(getApplicationContext(), errMessage);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>好了，一个基本的MVP框架算是有了，Model的部分根据实际的业务可以灵活的去定义接口或业务类。</p>\n<h3 id=\"网络通讯部分\"><a href=\"#网络通讯部分\" class=\"headerlink\" title=\"网络通讯部分\"></a>网络通讯部分</h3><blockquote>\n<p>网络框架采用的是retrofit+okhttp+gson+rxjava来进行搭建。在搭建的过程中，请注意各个库之间的版本问题，这个比较让人蛋疼。使用eclipse开发的读者也可以加<strong>学习小组QQ群: 193765960</strong>去下载我提供的jar包。</p>\n</blockquote>\n<p><strong>构建获取Retrofit对象</strong><br>我封装了一个工具类RetrofitUtils.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Retrofit工具类</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetrofitUtils</span> </span>&#123;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取retrofit对象</div><div class=\"line\">\t * </div><div class=\"line\">\t * retrofit对象默认使用我们自己的URL：DatasConfig.HOST</div><div class=\"line\">\t * 如果想要指定具体的url,请调用build(baseUrl)方法</div><div class=\"line\">\t * 设置了Rxjava的请求回调机制</div><div class=\"line\">\t * 设置了Gson：json-Java bean的自动解析（序列化和反序列化）</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Retrofit <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tRetrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</div><div class=\"line\">\t\t\t\t.baseUrl(DatasConfig.HOST)</div><div class=\"line\">\t\t\t\t.addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">\t\t\t\t.addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">\t\t\t\t.client(RetrofitUtils.genericClient())</div><div class=\"line\">\t\t\t\t.build();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> retrofit;</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取retrofit对象</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@param</span> baseUrl </div><div class=\"line\">\t * </div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Retrofit <span class=\"title\">build</span><span class=\"params\">(String baseUrl)</span> </span>&#123;</div><div class=\"line\">\t\tRetrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder().baseUrl(baseUrl)</div><div class=\"line\">\t\t\t\t.addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">\t\t\t\t.addConverterFactory(GsonConverterFactory.create()).client(RetrofitUtils.genericClient())<span class=\"comment\">// 添加自定义的头信息</span></div><div class=\"line\">\t\t\t\t.build();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> retrofit;</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 定制client</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> OkHttpClient <span class=\"title\">genericClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//日志打印：添加打印对我们开发非常重要哈，这个东西一定要有</span></div><div class=\"line\">\t\tHttpLoggingInterceptor logging = <span class=\"keyword\">new</span> HttpLoggingInterceptor();</div><div class=\"line\">\t\tlogging.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//设置HTTP请求通用的协议头 </span></div><div class=\"line\">\t\tInterceptor proheaders = <span class=\"keyword\">new</span> Interceptor() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">\t\t\t\tRequest request = chain.request().newBuilder()</div><div class=\"line\">\t\t\t\t\t\t.addHeader(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded; charset=UTF-8\"</span>)</div><div class=\"line\">\t\t\t\t\t\t.addHeader(<span class=\"string\">\"Accept-Encoding\"</span>, <span class=\"string\">\"gzip, deflate\"</span>)</div><div class=\"line\">\t\t\t\t\t\t.addHeader(<span class=\"string\">\"Connection\"</span>, <span class=\"string\">\"keep-alive\"</span>)</div><div class=\"line\">\t\t\t\t\t\t.addHeader(<span class=\"string\">\"Accept\"</span>,<span class=\"string\">\"*/*\"</span>)</div><div class=\"line\">\t\t\t\t\t\t.addHeader(<span class=\"string\">\"Cookie\"</span>, <span class=\"string\">\"add cookies here\"</span>)</div><div class=\"line\">\t\t\t\t\t\t.build();</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> chain.proceed(request);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t </div><div class=\"line\">\t\t<span class=\"comment\">//设置OkHttpClient</span></div><div class=\"line\">\t\tOkHttpClient httpClient = <span class=\"keyword\">new</span> OkHttpClient.Builder()</div><div class=\"line\">\t\t\t\t.addInterceptor(logging)<span class=\"comment\">//添加日志打印功能</span></div><div class=\"line\">\t\t\t\t.addInterceptor(proheaders)<span class=\"comment\">//自定义http headers设置</span></div><div class=\"line\">\t\t\t\t.readTimeout(<span class=\"number\">60</span>, TimeUnit.SECONDS)<span class=\"comment\">//设置超时</span></div><div class=\"line\">\t\t\t\t.connectTimeout(<span class=\"number\">60</span>, TimeUnit.SECONDS)</div><div class=\"line\">\t\t\t\t.build();</div><div class=\"line\"> </div><div class=\"line\">\t\t<span class=\"keyword\">return</span> httpClient;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如代码，在开发中一定要加入日志<strong>logging功能</strong>，注意jar包的版本问题，你要是实在搞不定，就去加我的那个QQ群获取jar包吧。</p>\n<p><strong>定义登录业务的retrofit服务接口: LoginService.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LoginService</span></span>&#123;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"comment\">//使用retrofit的回调，返回的是User对象</span></div><div class=\"line\">\t<span class=\"meta\">@POST</span>(DatasConfig.CMD_USER_LOGINYP)</div><div class=\"line\">\tCall&lt;BUResponse&lt;User&gt;&gt; login(<span class=\"meta\">@Body</span> BURequset requset);</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"comment\">//使用Rxjava的回调，返回的是User对象</span></div><div class=\"line\">\t<span class=\"meta\">@POST</span>(DatasConfig.CMD_USER_LOGINYP)</div><div class=\"line\">\tObservable&lt;BUResponse&lt;User&gt;&gt; Rxlogin(<span class=\"meta\">@Body</span> BURequset requset);</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"comment\">//使用Rxjava的回调，但是返回的是原始的响应体数据</span></div><div class=\"line\">\t<span class=\"meta\">@POST</span>(DatasConfig.CMD_USER_LOGINYP)</div><div class=\"line\">\t<span class=\"function\">Observable&lt;ResponseBody&gt; <span class=\"title\">RxJsonlogin</span><span class=\"params\">(@Body BURequset requset)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我在上面给大家实例了三种写法。</p>\n<ul>\n<li>第一种不使用rxjava，返回的是Gson将响应报文反序列化后的User bean对象。</li>\n<li>第二种使用rxjava，返回的是Gson将响应报文反序列化后的User bean对象。</li>\n<li>第三种rxjava，返回的是okhttp的原始响应体ResponseBody，这样我们就可以获取原始的jsonString来自行解析。</li>\n</ul>\n<p>以上都不是重点，从网上都可以找到很多文章。我要说的<strong>重点是</strong>我们可能需要根据实际的请求和响应的报文协议来<strong>自定义BUResponse和BURequset</strong>这两个类。这一块在网上实在是没有很多讲到这一块的文章，搞不懂这一块，整个的请求和响应流程就无法打通，估计开发者会哭死。</p>\n<p>先来看一下示例的请求和响应的协议：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    “head”:&#123;”timestamp”:<span class=\"number\">123456</span>,&#125;,</div><div class=\"line\">    “body”:&#123;“name”:”abcd”,”pwd”:”<span class=\"number\">123456</span>”&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>BURequset.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BURequset</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\"> \t<span class=\"comment\">//最重点的就是这里:为啥采用TreeMap来声明head和body?</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> TreeMap&lt;String, Object&gt; head;</div><div class=\"line\">\t<span class=\"keyword\">private</span> TreeMap&lt;String, Object&gt; body;<span class=\"comment\">//排序</span></div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BURequset</span><span class=\"params\">()</span> </span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\thead = DemoApplication.reqHead;<span class=\"comment\">//因为是统一的请求头，所以只定义一个就好了</span></div><div class=\"line\">\t\tbody = <span class=\"keyword\">new</span> TreeMap&lt;String, Object&gt;();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> TreeMap&lt;String, Object&gt; <span class=\"title\">getHead</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> head;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHead</span><span class=\"params\">(TreeMap&lt;String, Object&gt; head)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.head = head;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> TreeMap&lt;String, Object&gt; <span class=\"title\">getBody</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> body;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBody</span><span class=\"params\">(TreeMap&lt;String, Object&gt; body)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.body = body;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如代码所示，为啥要用TreeMap?<br>其实我最开始的时候设计这个类，使用的是JsonObject，但是通过查看log发现，请求报文的jsonString多了一层name_value_pairs的封装。啥意思？即我们希望的json结构是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"xxxx\"</span>:<span class=\"string\">\"zzzzzzz\"</span>,</div><div class=\"line\">    <span class=\"string\">\"yyyy\"</span>:<span class=\"string\">\"uuuuuuu\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>而实际生成的却是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name_value_pairs\"</span>: &#123;</div><div class=\"line\">                        <span class=\"string\">\"xxxx\"</span>:<span class=\"string\">\"zzzzzzz\"</span>,</div><div class=\"line\">                        <span class=\"string\">\"yyyy\"</span>:<span class=\"string\">\"uuuuuuu\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>为啥会这样呢？原来是因为JsonObject的结构是这样的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONObject</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; nameValuePairs;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>而retrofit采用<strong>Gson</strong>做json的序列化时，会将JSONObject的<strong>nameValuePairs</strong>封装进序列化结果中。<br>那咋办？我后来<strong>采用了Map来封装我的head，body。</strong>最终得到了我想要的结果，自己也暗自得意。<br>可是，后来<strong>为啥要改成TreeMap呢？</strong>因为我在请我们公司的技术大牛帮我审查这套框架的时候，大牛给指了出来很多的坑。其中一个便是不能用Map,因为Map中的键值对是按照添加顺序排序的，而JsonObject是按照key的升序排序的，而我们常常会用报文来参与生成我们的校验sign。如果用Map的话，我同样的两个参数，put的顺序不同，得到的sign也不同，这显然是不对的。所以，最后<strong>采用了TreeMap来封装head和body，因为TreeMap是默认升序排序的。</strong><br>大家如果要自己封装自己的请求和响应类的时候，一定要注意这个问题。</p>\n<p><strong>BUResponse.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BUResponse</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">private</span> ResHead head;</div><div class=\"line\">\t<span class=\"keyword\">private</span> T body;<span class=\"comment\">//使用泛型来应对我们各种类型的响应</span></div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ResHead <span class=\"title\">getHead</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> head;</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHead</span><span class=\"params\">(ResHead head)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.head = head;</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getBody</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> body;</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBody</span><span class=\"params\">(T body)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.body = body;</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResHead</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> timestamp;</div><div class=\"line\">\t\t </div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getTimestamp</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> timestamp;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t </div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTimestamp</span><span class=\"params\">(<span class=\"keyword\">long</span> timestamp)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.timestamp = timestamp;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>response采用泛型来设计实现通用（响应的结构都一样，特殊的响应结构就再单独处理吧）。</p>\n<p><strong>业务的调用和回调</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginPresenter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasePresenter</span>&lt;<span class=\"title\">LoginContract</span>.<span class=\"title\">View</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">LoginContract</span>.<span class=\"title\">Presenter</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoginPresenter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String name, String pwd)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//因为login的业务逻辑比较简单，我就不再专门去定义Model的接口了</span></div><div class=\"line\">\t\t<span class=\"comment\">//构建请求</span></div><div class=\"line\">\t\tBURequset request = <span class=\"keyword\">new</span> BURequset();</div><div class=\"line\">\t\trequest.getBody().put(<span class=\"string\">\"pwd\"</span>, pwd);</div><div class=\"line\">\t\trequest.getBody().put(<span class=\"string\">\"name\"</span>, name);</div><div class=\"line\">\t\t </div><div class=\"line\">\t\t<span class=\"comment\">//获取接口服务</span></div><div class=\"line\">\t\tLoginService service = RetrofitUtils.build().create(LoginService.class);</div><div class=\"line\">\t\t<span class=\"comment\">//第二种方法：使用RxJava的调用</span></div><div class=\"line\">\t\tservice.Rxlogin(request)</div><div class=\"line\">\t\t\t\t.subscribeOn(Schedulers.newThread()) <span class=\"comment\">// 子线程访问网络</span></div><div class=\"line\">\t\t\t\t.observeOn(AndroidSchedulers.mainThread()) <span class=\"comment\">// 回调到主线程</span></div><div class=\"line\">\t\t\t\t.subscribe(<span class=\"keyword\">new</span> Observer&lt;BUResponse&lt;User&gt;&gt;() &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 所有任务执行完毕</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tgetView().loginFailed(e.toString());</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"> </div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(BUResponse&lt;User&gt; result)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tResHead head = result.getHead();</div><div class=\"line\">\t\t\t\t\t\t\tUser user = result.getBody();</div><div class=\"line\">\t\t\t\t\t\t\tgetView().loginSucceed(user);</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Gson的使用\"><a href=\"#Gson的使用\" class=\"headerlink\" title=\"Gson的使用\"></a>Gson的使用</h4><p>Gson实现Java Bean和JsonString之间的相互转化。但是现实往往是：</p>\n<ul>\n<li>java bean 和jsonString不是完全匹配的，换句话说，我们的java bean中有很多的属性是额外的。</li>\n<li>java bean的命名和报文的key是不匹配的，尤其是java bean在多个地方复用的时候。</li>\n</ul>\n<p>不用担心，这些Gson都替你考虑到了，具体的请去参考<a href=\"http://www.jianshu.com/p/e740196225a4\" target=\"_blank\" rel=\"external\">《你真的会用Gson吗?Gson使用指南》</a></p>\n<p>注意：<br>这篇文章中所用到的代码项目原因可能具有版权问题，大家是在实际开发中还是以参考借鉴为主吧。最后，如果这篇文章对大家有帮助，还是希望多多转发，让更多的朋友能够参与进这个框架的讨论中来，彼此受益。</p>\n"},{"title":"图解Android：View的绘制机制与源码解析","url":"http://yoursite.com/2016/08/27/图解Android：View的绘制机制与源码解析/","content":"<p><strong>前言</strong></p>\n<p>Android的视图是如何绘制的？深入了解一下UI的绘制原理无论对我们APP的性能优化还是对我们的自定义view都有很大的帮助。下文将和大家一道探究一下Android的viewTree的绘制原理，希望对大家的开发和学习有所帮助。</p>\n<p>本篇是<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">图解Android</a>系列第二篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Android有帮助，还望大家多多转载。<strong>学习小组QQ群: 193765960</strong>。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<hr>\n<h3 id=\"Activity的视图结构\"><a href=\"#Activity的视图结构\" class=\"headerlink\" title=\"Activity的视图结构\"></a>Activity的视图结构</h3><p><strong>先看一下activity的视图结构图</strong></p>\n<p><img src=\"/hello-world/img/activity_view.png\" alt=\"Activity的视图结构\"></p>\n<ul>\n<li>每个activity都有一个Window(实际是phonewindow)</li>\n<li>Phonewindow含有一个DecorView，这是我们window的topview</li>\n<li>DecorView是继承自Framelayout，换言之其为整个ViewTree的根节点viewGroup</li>\n</ul>\n<p><strong>再看一下Phonewindow的类图</strong></p>\n<p><img src=\"/hello-world/img/decorview.png\" alt=\"Activity的视图结构\"></p>\n<p><strong>接下来我们来看一下单个Activity的viewTree的结构，我选择了两版sdk来查看</strong></p>\n<p>1）Android4.4系统的activity：<br><img src=\"/hello-world/img/viewTree4.4.png\" alt=\"Activity的视图结构\"><br>2）Android6.0系统的activity：<br><img src=\"/hello-world/img/viewTree6.0.png\" alt=\"Activity的视图结构\"></p>\n<h3 id=\"ViewTree的绘制\"><a href=\"#ViewTree的绘制\" class=\"headerlink\" title=\"ViewTree的绘制\"></a>ViewTree的绘制</h3><p><strong>id</strong>为<strong>“content”</strong>的ContentFrameLayout是我们的布局文件加载显示的区域，更确切地说是我们activity的setcontentView()方法设置的视图显示的区域。下面我么就看看ContentFrameLayout中整个viewTree是如何绘制出来的。<br><img src=\"/hello-world/img/viewTreeDemo.png\" alt=\"Activity的视图结构\"><br>在<a href=\"https://xiaodanchen.github.io/2016/08/25/%E5%9B%BE%E8%A7%A3Android%EF%BC%9A%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/\" target=\"_blank\" rel=\"external\">《图解Android：事件传递机制》</a>中我们说过Android中的任何一个布局、任何一个控件包括我们自定义的控件其实都是直接或间接继承自View实现的，所以说这些View应该都具有相同的绘制流程与机制才能显示到屏幕上（可能每个控件的具体绘制逻辑有差异， 但是主流程都是一样的）。每一个View的绘制过程都必须经历三个最主要的过程，也就是measure()、layout()和draw()。<br>先看一下类图：<br><img src=\"/hello-world/img/viewUI.png\" alt=\"Activity的视图结构\"></p>\n<p>那么，<strong>整个Android的UI绘制机制是从哪里开始的即入口在哪里呢？</strong>答案就是<strong>ViewRootImpl</strong>类的<strong>performTraversals()</strong>方法。ViewRootImpl这个类是一个隐藏类，所以如果你是使用Eclipse开发的话可能看不到这个文件（AndroidStudio可以），没关系，根据路径（androidSDK\\android-sdk-windows\\sources\\android-23\\android\\view\\）去找到ViewRootImpl.Java文件，然后用文本阅读工具直接打开就好。<br>看一下官方对ViewRootImpl的介绍：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* The top of a view hierarchy, implementing the needed protocol between View</div><div class=\"line\">* and the WindowManager.  This is for the most part an internal implementation</div><div class=\"line\">* detail of &#123;<span class=\"doctag\">@link</span> WindowManagerGlobal&#125;.</div><div class=\"line\">*</div><div class=\"line\">* &#123;<span class=\"doctag\">@hide</span>&#125;</div><div class=\"line\">*/</div></pre></td></tr></table></figure></p>\n<p>上面这段注释啥意思呢？说白了就是<strong>ViewRootImpl是一个window中的viewTree的入口，实现了window对viewTree管理的必需逻辑。</strong></p>\n<blockquote>\n<p>ViewRootImpl类performTraversals()代码，源代码长的恐怖，这里给大家过滤一下</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      ......</div><div class=\"line\">      <span class=\"comment\">//lp.width和lp.height在创建ViewGroup实例时值为MATCH_PARENT</span></div><div class=\"line\">      <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</div><div class=\"line\">      <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</div><div class=\"line\">      ......</div><div class=\"line\">      performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">      ......</div><div class=\"line\">      performLayout(lp, desiredWindowWidth, desiredWindowHeight);</div><div class=\"line\">      ......</div><div class=\"line\">      performDraw();</div><div class=\"line\">      ......</div><div class=\"line\">  &#125;</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//执行rootView的测量</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> childWidthMeasureSpec, <span class=\"keyword\">int</span> childHeightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">      Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class=\"string\">\"measure\"</span>);</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      \t<span class=\"comment\">//ViewGroup的measure()方法</span></div><div class=\"line\">          mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">          Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">    </div><div class=\"line\">  <span class=\"comment\">//执行layout操作</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performLayout</span><span class=\"params\">(WindowManager.LayoutParams lp, <span class=\"keyword\">int</span> desiredWindowWidth,</span></span></div><div class=\"line\">          <span class=\"keyword\">int</span> desiredWindowHeight) &#123;</div><div class=\"line\">      mLayoutRequested = <span class=\"keyword\">false</span>;</div><div class=\"line\">      mScrollMayChange = <span class=\"keyword\">true</span>;</div><div class=\"line\">      mInLayout = <span class=\"keyword\">true</span>;</div><div class=\"line\">      <span class=\"keyword\">final</span> View host = mView;</div><div class=\"line\">      ......</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      \t<span class=\"comment\">//viewRoot先进行layout</span></div><div class=\"line\">          host.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</div><div class=\"line\">          mInLayout = <span class=\"keyword\">false</span>;</div><div class=\"line\">          <span class=\"comment\">//需要layout的子view的数量</span></div><div class=\"line\">          <span class=\"keyword\">int</span> numViewsRequestingLayout = mLayoutRequesters.size();</div><div class=\"line\">          <span class=\"keyword\">if</span> (numViewsRequestingLayout &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          \t<span class=\"comment\">//需要layout的子view</span></div><div class=\"line\">              ArrayList&lt;View&gt; validLayoutRequesters = getValidLayoutRequesters(mLayoutRequesters,</div><div class=\"line\">                      <span class=\"keyword\">false</span>);</div><div class=\"line\">              <span class=\"keyword\">if</span> (validLayoutRequesters != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  <span class=\"comment\">//如果view中有调用requestLayout()方法，则说明界面需要刷新</span></div><div class=\"line\">                  mHandlingLayoutInLayoutRequest = <span class=\"keyword\">true</span>;</div><div class=\"line\">                  <span class=\"keyword\">int</span> numValidRequests = validLayoutRequesters.size();</div><div class=\"line\">                  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numValidRequests; ++i) &#123;</div><div class=\"line\">                      <span class=\"keyword\">final</span> View view = validLayoutRequesters.get(i);</div><div class=\"line\">                      view.requestLayout();</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  <span class=\"comment\">//整个viewTree重新measure</span></div><div class=\"line\">                  measureHierarchy(host, lp, mView.getContext().getResources(),</div><div class=\"line\">                          desiredWindowWidth, desiredWindowHeight);</div><div class=\"line\">                  mInLayout = <span class=\"keyword\">true</span>;</div><div class=\"line\">                  <span class=\"comment\">//整个viewTree重新layout</span></div><div class=\"line\">                  host.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</div><div class=\"line\"></div><div class=\"line\">                  mHandlingLayoutInLayoutRequest = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"comment\">// 再次检查是否有view需要刷新</span></div><div class=\"line\">                  validLayoutRequesters = getValidLayoutRequesters(mLayoutRequesters, <span class=\"keyword\">true</span>);</div><div class=\"line\">                  <span class=\"keyword\">if</span> (validLayoutRequesters != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                      <span class=\"keyword\">final</span> ArrayList&lt;View&gt; finalRequesters = validLayoutRequesters;</div><div class=\"line\">                      <span class=\"comment\">// Post请求，在下一帧的显示的时候去执行刷新</span></div><div class=\"line\">                      getRunQueue().post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                          <span class=\"meta\">@Override</span></div><div class=\"line\">                          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                              <span class=\"keyword\">int</span> numValidRequests = finalRequesters.size();</div><div class=\"line\">                              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numValidRequests; ++i) &#123;</div><div class=\"line\">                                  <span class=\"keyword\">final</span> View view = finalRequesters.get(i);</div><div class=\"line\">                                  view.requestLayout();</div><div class=\"line\">                              &#125;</div><div class=\"line\">                          &#125;</div><div class=\"line\">                      &#125;);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">          Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">      &#125;</div><div class=\"line\">      mInLayout = <span class=\"keyword\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">    </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performDraw</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      ......</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          draw(fullRedrawNeeded);</div><div class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">          mIsDrawing = <span class=\"keyword\">false</span>;</div><div class=\"line\">          Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class=\"line\">      &#125;</div><div class=\"line\">      ......</div><div class=\"line\">  &#125;</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fullRedrawNeeded)</span> </span>&#123;</div><div class=\"line\">      ......</div><div class=\"line\">      <span class=\"keyword\">if</span> (mAttachInfo.mHardwareRenderer != <span class=\"keyword\">null</span> &amp;&amp; mAttachInfo.mHardwareRenderer.isEnabled()) &#123;</div><div class=\"line\">\t<span class=\"comment\">//使用硬件渲染，比如GPU</span></div><div class=\"line\">      \tmAttachInfo.mHardwareRenderer.draw(mView, mAttachInfo, <span class=\"keyword\">this</span>);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">//使用软件渲染</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (!drawSoftware(surface, mAttachInfo, xOffset, yOffset, scalingRequired, dirty)) &#123;</div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">......</div><div class=\"line\">  &#125;</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * <span class=\"doctag\">@return</span> true if drawing was successful, false if an error occurred</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawSoftware</span><span class=\"params\">(Surface surface, AttachInfo attachInfo, <span class=\"keyword\">int</span> xoff, <span class=\"keyword\">int</span> yoff,</span></span></div><div class=\"line\">          <span class=\"keyword\">boolean</span> scalingRequired, Rect dirty) &#123;</div><div class=\"line\">      <span class=\"comment\">// Draw with software renderer.</span></div><div class=\"line\">      <span class=\"keyword\">final</span> Canvas canvas;</div><div class=\"line\">      ......</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          canvas.translate(-xoff, -yoff);</div><div class=\"line\">          <span class=\"keyword\">if</span> (mTranslator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          mTranslator.translateCanvas(canvas);</div><div class=\"line\">          &#125;</div><div class=\"line\">          canvas.setScreenDensity(scalingRequired ? mNoncompatDensity : <span class=\"number\">0</span>);</div><div class=\"line\">          attachInfo.mSetIgnoreDirtyState = <span class=\"keyword\">false</span>;</div><div class=\"line\"> </div><div class=\"line\">          mView.draw(canvas);</div><div class=\"line\">           </div><div class=\"line\">          drawAccessibilityFocusedDrawableIfNeeded(canvas);</div><div class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!attachInfo.mSetIgnoreDirtyState) &#123;</div><div class=\"line\">          attachInfo.mIgnoreDirtyState = <span class=\"keyword\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      ......</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"measure相关\"><a href=\"#measure相关\" class=\"headerlink\" title=\"measure相关\"></a>measure相关</h4><blockquote>\n<p>View类的UI绘制相关函数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//final说明该函数不允许被子类override,不需要关注细节</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">       ......</div><div class=\"line\">       <span class=\"comment\">//widthMeasureSpec，heightMeasureSpec是由parent决定的</span></div><div class=\"line\">\tonMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">\t......</div><div class=\"line\">   &#125;</div><div class=\"line\">    </div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> widthMeasureSpec horizontal space requirements as imposed by the parent.</div><div class=\"line\">    * </div><div class=\"line\">    * <span class=\"doctag\">@param</span> heightMeasureSpec vertical space requirements as imposed by the parent.</div><div class=\"line\">    * </div><div class=\"line\">    * <span class=\"doctag\">@see</span> #getMeasuredWidth()</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #getMeasuredHeight()</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #setMeasuredDimension(int, int)</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #getSuggestedMinimumHeight()</div><div class=\"line\">    * <span class=\"doctag\">@see</span> #getSuggestedMinimumWidth()</div><div class=\"line\">    * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getMode(int)</div><div class=\"line\">    * <span class=\"doctag\">@see</span> android.view.View.MeasureSpec#getSize(int)</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">   \t<span class=\"comment\">//View类的默认实现，如果自定义view的话，需要我们自己override</span></div><div class=\"line\">   \t<span class=\"comment\">//child的宽高有来自parent的widthMeasureSpec、heightMeasureSpec和子的MeasureSpecMode共同决定</span></div><div class=\"line\">       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class=\"line\">               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>注意onMeasure（int widthMeasureSpec, int heightMeasureSpec）入参的含义：<br>  1) widthMeasureSpec和heightMeasureSpec是parent暴露给child的尺寸<br>  2) widthMeasureSpec和heightMeasureSpec是32位的数值，其中高16位为MeasureSpecMode，低16位为MeasureSpecSize<br>  3) MeasureSpecMode有三种取值：<pre><code>* MeasureSpec.EXACTLY：child为精准尺寸（layout_with=mach_parent、24dp的情况）\n* MeasureSpec.AT_MOST：child为最大尺寸（layout_with=wrap_content的情况）\n* MeasureSpec.UNSPECIFIED：child未指定尺寸\n</code></pre></li>\n<li>child的尺寸有parent穿过来的widthMeasureSpec、heightMeasureSpec和子的MeasureSpecMode共同决定</li>\n</ul>\n<h4 id=\"layout相关\"><a href=\"#layout相关\" class=\"headerlink\" title=\"layout相关\"></a>layout相关</h4><blockquote>\n<p>View的layout相关代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//非final类型，子类可以重载</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">        ......</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> oldL = mLeft;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldT = mTop;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldB = mBottom;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldR = mRight;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</div><div class=\"line\">                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</div><div class=\"line\">            onLayout(changed, l, t, r, b);</div><div class=\"line\">            ......</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t......</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">//View的onlayout函数默认为空（如果自定义view中需要，可重载）</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;  </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>ViewGroup的layout相关代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!mSuppressLayout &amp;&amp; (mTransition == <span class=\"keyword\">null</span> || !mTransition.isChangingLayout())) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (mTransition != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              mTransition.layoutChange(<span class=\"keyword\">this</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">//view的layout方法</span></div><div class=\"line\">          <span class=\"keyword\">super</span>.layout(l, t, r, b);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          mLayoutCalledWhileSuppressed = <span class=\"keyword\">true</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 抽象方法，子类必须实现（因为内部必然存在多个view控件，需要layout）</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed,</span></span></div><div class=\"line\">          <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\">    * ViewGroup的onLayout()方法都需要子类去实现</div><div class=\"line\">    * 所以我们来看一下LinearLayout的实现</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;  </div><div class=\"line\">            layoutVertical();  </div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">            layoutHorizontal();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">   <span class=\"comment\">//以垂直方向的布局为例</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutVertical</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        ......  </div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();  </div><div class=\"line\">        ......</div><div class=\"line\">\t\t<span class=\"comment\">//遍历child</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;  </div><div class=\"line\">            <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);  </div><div class=\"line\">            <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">                childTop += measureNullChild(i);  </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;  </div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();  </div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();  </div><div class=\"line\">                ......</div><div class=\"line\">                <span class=\"comment\">//递归child调用layout</span></div><div class=\"line\">                setChildFrame(child, childLeft, childTop + getLocationOffset(child),  </div><div class=\"line\">                        childWidth, childHeight);  </div><div class=\"line\">                ......  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setChildFrame</span><span class=\"params\">(View child, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;          </div><div class=\"line\">    \tchild.layout(left, top, left + width, top + height);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ul>\n<li>View.layout方法可被重载，ViewGroup.layout为final的不可重载，ViewGroup.onLayout为abstract的，子类必须重载实现自己的位置逻辑。</li>\n<li>measure操作完成后得到的是对每个View经测量过的measuredWidth和measuredHeight，layout操作 完成之后得到的是对每个View进行位置分配后的mLeft、mTop、mRight、mBottom，这些值都是相对于父View来说的。</li>\n<li>凡是layout_XXX的布局属性基本都针对的是包含子View的ViewGroup的，当对一个没有父容器的View设置相关layout_XXX属性是没有任何意义的。</li>\n<li>使用View的getWidth()和getHeight()方法来获取View测量的宽高，必须保证这两个方法在onLayout流程之后被调用才能返回有效值。</li>\n</ul>\n<h4 id=\"draw相关\"><a href=\"#draw相关\" class=\"headerlink\" title=\"draw相关\"></a>draw相关</h4><blockquote>\n<p>View的draw相关代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        ......</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * Draw traversal performs several drawing steps which must be executed</div><div class=\"line\">         * in the appropriate order:</div><div class=\"line\">         *</div><div class=\"line\">         *      1. Draw the background</div><div class=\"line\">         *      2. If necessary, save the canvas' layers to prepare for fading</div><div class=\"line\">         *      3. Draw view's content</div><div class=\"line\">         *      4. Draw children</div><div class=\"line\">         *      5. If necessary, draw the fading edges and restore layers</div><div class=\"line\">         *      6. Draw decorations (scrollbars for instance)</div><div class=\"line\">         */</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// Step 1, draw the background, if needed</span></div><div class=\"line\">        ......</div><div class=\"line\">        <span class=\"keyword\">if</span> (!dirtyOpaque) &#123;</div><div class=\"line\">            drawBackground(canvas);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// skip step 2 &amp; 5 if possible (common case)</span></div><div class=\"line\">        ......</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// Step 2, save the canvas' layers</span></div><div class=\"line\">        ......</div><div class=\"line\">            <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">                canvas.saveLayer(left, top, right, top + length, <span class=\"keyword\">null</span>, flags);</div><div class=\"line\">            &#125;</div><div class=\"line\">        ......</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// Step 3, draw the content</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!dirtyOpaque) onDraw(canvas);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// Step 4, draw the children</span></div><div class=\"line\">        dispatchDraw(canvas);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// Step 5, draw the fade effect and restore layers</span></div><div class=\"line\">        ......</div><div class=\"line\">        <span class=\"keyword\">if</span> (drawTop) &#123;</div><div class=\"line\">            matrix.setScale(<span class=\"number\">1</span>, fadeHeight * topFadeStrength);</div><div class=\"line\">            matrix.postTranslate(left, top);</div><div class=\"line\">            fade.setLocalMatrix(matrix);</div><div class=\"line\">            p.setShader(fade);</div><div class=\"line\">            canvas.drawRect(left, top, right, top + length, p);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ......</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// Step 6, draw decorations (scrollbars)</span></div><div class=\"line\">        onDrawScrollBars(canvas);</div><div class=\"line\">        ......</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ul>\n<li>View的onDraw()方法为空，需要用户自己实现</li>\n<li>关于draw，官方的注释已经很清楚，我们需要注意的是第四步：递归调用完成viewTree的绘制</li>\n<li>dispatchdraw()为空，需要在子类去实现</li>\n</ul>\n<blockquote>\n<p>ViewGroup的draw相关代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 遍历各种类型的情况的child，并draw</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">boolean</span> usingRenderNodeProperties = canvas.isRecordingFor(mRenderNode);</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childrenCount = mChildrenCount;</div><div class=\"line\">       <span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">       </div><div class=\"line\">       ......</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childrenCount; i++) &#123;</div><div class=\"line\">           ......</div><div class=\"line\">           <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               more |= drawChild(canvas, child, drawingTime);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">while</span> (transientIndex &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">           ......</div><div class=\"line\">           <span class=\"keyword\">if</span> ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||</div><div class=\"line\">                   transientChild.getAnimation() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               more |= drawChild(canvas, transientChild, drawingTime);</div><div class=\"line\">           &#125;</div><div class=\"line\">           ......</div><div class=\"line\">       &#125;</div><div class=\"line\">        </div><div class=\"line\">       <span class=\"keyword\">if</span> (mDisappearingChildren != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           ......</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = disappearingCount; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> View child = disappearingChildren.get(i);</div><div class=\"line\">               more |= drawChild(canvas, child, drawingTime);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">      ......</div><div class=\"line\">   &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">drawChild</span><span class=\"params\">(Canvas canvas, View child, <span class=\"keyword\">long</span> drawingTime)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> child.draw(canvas, <span class=\"keyword\">this</span>, drawingTime);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"关于invalidate方法\"><a href=\"#关于invalidate方法\" class=\"headerlink\" title=\"关于invalidate方法\"></a>关于invalidate方法</h4><p>invalidate系列方法请求重绘View树（也就是draw方法），如果View大小没有发生变化就不会调用layout过程，并且只绘制那 些“需要重绘的”View，也就是哪个View(View只绘制该View，ViewGroup绘制整个ViewGroup)请求invalidate系 列方法，就绘制该View。</p>\n<p>有以下几种触发invalidate方法的情况：</p>\n<ul>\n<li>直接调用invalidate方法：会绘制调用者本身。</li>\n<li>触发setSelection方法：会绘制调用者本身。</li>\n<li>触发setVisibility方法：当View可视状态在INVISIBLE转换VISIBLE时会间接调用invalidate方法，继而绘制该View。当View的可视状态在 INVISIBLE\\VISIBLE 转换为GONE状态时会间接调用requestLayout和invalidate方法，同时由于View树大小发生了变化，所以会请求measure过 程以及draw过程，同样只绘制需要“重新绘制”的视图。</li>\n<li>触发setEnabled方法：不会重新绘制任何View包括该调用者本身。</li>\n<li>触发requestFocus方法：只绘制“需要重绘”的View。</li>\n</ul>\n"},{"title":"图解Android：Touch事件传递机制","url":"http://yoursite.com/2016/08/25/图解Android：事件传递机制/","content":"<p><strong>前言</strong></p>\n<p>Android事件管理机制是一名专业Android研发工程师必须要了解的核心知识之一，深入了解一下该机制无论对我们日常开发还是找工作，乃至于对我们的架构思想都有很大的帮助。Android中我们用到的最多的事件是InputEvent，主要是两类：MotionEvent和KeyEvent。由于事件传递模型基本一致，我将以更常用到的MotionEvent为目标来讲解。</p>\n<p>根据实际开发的需要，本文仅讲解touch事件在viewTree中的传递机制，为广大开发者搞清原理、扫清障碍。文章参考了Kelin童鞋的<a href=\"http://www.jianshu.com/p/e99b5e8bd67b\" target=\"_blank\" rel=\"external\">图解Android事件传递机制</a>，写的很好大家也可以去看看。</p>\n<p>本篇是<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">图解Android</a>系列第一篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Android有帮助，还望大家多多转载。<strong>学习小组QQ群</strong>: 193765960。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<hr>\n<h3 id=\"Touch事件的分发、传递、消费所涉及的类与函数\"><a href=\"#Touch事件的分发、传递、消费所涉及的类与函数\" class=\"headerlink\" title=\"Touch事件的分发、传递、消费所涉及的类与函数\"></a>Touch事件的分发、传递、消费所涉及的类与函数</h3><p>老规矩，让我们先来看一张类图：<br><img src=\"/hello-world/img/viewgroup.png\" alt=\"Touch事件相关回调接口图谱\"></p>\n<ul>\n<li>View类定义了两个Touch事件传递分发的函数：<ul>\n<li>public boolean dispatchTouchEvent(MotionEvent event)</li>\n<li>public boolean onTouchEvent(MotionEvent event)</li>\n</ul>\n</li>\n<li>ViewGroup继承自View类，其重写了定义了两个 Touch事件传递分发的函数<ul>\n<li>@Override public boolean dispatchTouchEvent(MotionEvent ev)</li>\n<li>public boolean onInterceptTouchEvent(MotionEvent ev) </li>\n</ul>\n</li>\n<li>Activity类定义了两个Touch事件传递分发的函数：<ul>\n<li>public boolean dispatchTouchEvent(MotionEvent event)</li>\n<li>public boolean onTouchEvent(MotionEvent event)</li>\n</ul>\n</li>\n<li>Activity类的viewRoot实际上是PhoneWindow的DecorView（ViewGroup）<ul>\n<li>DecorView维护了一个LinearLayout对象，这个对象包括两部分：TitleView和ContentViews（FrameLayout）</li>\n<li>我们定义的layout.xml其实是被加载到TitleView和ContentViews中的</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Touch事件在Activity的viewTree中的传递分发，如图</p>\n</blockquote>\n<p><img src=\"/hello-world/img/touchevent.png\" alt=\"Touch事件在Activity的viewTree中的传递分发\"></p>\n<ul>\n<li>箭头的上面字代表方法返回值:return true、return false、return super.xxxxx(),super 的意思是调用父类实现。</li>\n<li>dispatchTouchEvent和 onTouchEvent的框里有个[true—-&gt;消费]的字，表示的意思是如果方法返回true，那么代表事件就此消费，不会继续往别的地方传了，事件终止。</li>\n<li>目前所有的图的事件是针对ACTION_DOWN的，对于ACTION_MOVE和ACTION_UP我们最后做分析。</li>\n</ul>\n<hr>\n<h3 id=\"事件分发入口：Activity类的dispatchTouchEvent-方法\"><a href=\"#事件分发入口：Activity类的dispatchTouchEvent-方法\" class=\"headerlink\" title=\"事件分发入口：Activity类的dispatchTouchEvent()方法\"></a>事件分发入口：Activity类的dispatchTouchEvent()方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 处理屏幕触摸事件。该方法是activity事件传递的入口。</div><div class=\"line\">    * 你可以通过override这个方法来拦截所有touch事件使不传递给viewTree。</div><div class=\"line\">    * </div><div class=\"line\">    * <span class=\"doctag\">@return</span> 如果事件最终被消费将会返回 true.</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">           onUserInteraction();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">//将事件分发给viewTree：以DecorView为RootView的viewTree</span></div><div class=\"line\">       <span class=\"comment\">//DecorView为ViewGroup</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class=\"line\">       \t<span class=\"comment\">//viewTree存在元素消费了该事件，返回true</span></div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       &#125;‘</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"comment\">//viewTree不存在元素消费了该事件，调用activity的onTouchEvent(ev)</span></div><div class=\"line\">       <span class=\"keyword\">return</span> onTouchEvent(ev);</div><div class=\"line\">   &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    * 当activity中没有任何view可以消费该事件时将会调用该方法. </div><div class=\"line\">    * 该方法常用来处理发生在activity的window边界之外的触摸事件。</div><div class=\"line\">    * (联想：Dialog类型的activity点击外侧弹框消失应该是这货起的作用吧？)</div><div class=\"line\">    * </div><div class=\"line\">    * <span class=\"doctag\">@return</span> 如果你需要消费touch事件，返回true，否则返回false</div><div class=\"line\">    * 默认是返回false的</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (mWindow.shouldCloseOnTouch(<span class=\"keyword\">this</span>, event)) &#123;</div><div class=\"line\">           finish();</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"ViewGroup-中touch事件是如何传递的\"><a href=\"#ViewGroup-中touch事件是如何传递的\" class=\"headerlink\" title=\"ViewGroup 中touch事件是如何传递的\"></a>ViewGroup 中touch事件是如何传递的</h3><blockquote>\n<p>ViewGroup的dispatchTouchEvent()方法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * ViewGroup.java</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">      </div><div class=\"line\">      ...<span class=\"comment\">//次要代码，在此省略</span></div><div class=\"line\"> </div><div class=\"line\">      <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(ev)) &#123;</div><div class=\"line\">       </div><div class=\"line\">\t...<span class=\"comment\">//次要代码，在此省略</span></div><div class=\"line\">\t</div><div class=\"line\">\t <span class=\"comment\">//标志是否拦截事件</span></div><div class=\"line\">          <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> intercepted;</div><div class=\"line\">          <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN</div><div class=\"line\">                  || mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              ...</div><div class=\"line\">              <span class=\"keyword\">if</span> (!disallowIntercept) &#123;</div><div class=\"line\">              \t<span class=\"comment\">//当前ViewGroup是否需要拦截该事件</span></div><div class=\"line\">                  intercepted = onInterceptTouchEvent(ev);</div><div class=\"line\">                  ev.setAction(action); </div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              intercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          </div><div class=\"line\">          ...</div><div class=\"line\">          TouchTarget newTouchTarget = <span class=\"keyword\">null</span>;</div><div class=\"line\">          <span class=\"keyword\">boolean</span> alreadyDispatchedToNewTouchTarget = <span class=\"keyword\">false</span>;</div><div class=\"line\">          <span class=\"comment\">//如果当前ViewGroup不拦截该事件，则继续向叶子节点分发该事件</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (!canceled &amp;&amp; !intercepted) &#123;</div><div class=\"line\">              ...</div><div class=\"line\">              <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">                  ...</div><div class=\"line\">                  <span class=\"comment\">//叶子节点的数量</span></div><div class=\"line\">                  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childrenCount = mChildrenCount;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (newTouchTarget == <span class=\"keyword\">null</span> &amp;&amp; childrenCount != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                      <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> x = ev.getX(actionIndex);</div><div class=\"line\">                      <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> y = ev.getY(actionIndex);</div><div class=\"line\">                      ...</div><div class=\"line\">                      <span class=\"comment\">//根据Z-order得到拍好序的children</span></div><div class=\"line\">                      <span class=\"keyword\">final</span> ArrayList&lt;View&gt; preorderedList = buildOrderedChildList();</div><div class=\"line\">                      ...</div><div class=\"line\">                      <span class=\"comment\">//找到一个能接受Event的子View，再对子View的View树进行遍历</span></div><div class=\"line\">                      <span class=\"keyword\">final</span> View[] children = mChildren;</div><div class=\"line\">                      <span class=\"comment\">//遍历叶子节点</span></div><div class=\"line\">                      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = childrenCount - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">                          ...</div><div class=\"line\">                          <span class=\"keyword\">final</span> View child = (preorderedList == <span class=\"keyword\">null</span>)</div><div class=\"line\">                                  ? children[childIndex] : preorderedList.get(childIndex);</div><div class=\"line\">\t\t\t\t\t...</div><div class=\"line\">                          <span class=\"comment\">//当前叶子view不能接收该touch事件，或者该叶子view不在触摸事件的触摸区域内，则查看下一个叶子</span></div><div class=\"line\">                          <span class=\"keyword\">if</span> (!canViewReceivePointerEvents(child)</div><div class=\"line\">                                  || !isTransformedTouchPointInView(x, y, child, <span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\">                              ev.setTargetAccessibilityFocus(<span class=\"keyword\">false</span>);</div><div class=\"line\">                              <span class=\"comment\">//跳出本次循环，遍历下一个叶子</span></div><div class=\"line\">                              <span class=\"keyword\">continue</span>;</div><div class=\"line\">                          &#125;</div><div class=\"line\">                        </div><div class=\"line\">                          <span class=\"comment\">//找到了可以接收该事件并处于触摸区域内的叶子view: child</span></div><div class=\"line\">                          </div><div class=\"line\">                          newTouchTarget = getTouchTarget(child);</div><div class=\"line\">                          <span class=\"comment\">//child已经存在target链表中</span></div><div class=\"line\">                          <span class=\"keyword\">if</span> (newTouchTarget != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                              <span class=\"comment\">// 如果touch事件之前已经被该child消费，则后续touch事件不会继续向下层viewtree分发</span></div><div class=\"line\">                              <span class=\"keyword\">break</span>;</div><div class=\"line\">                          &#125;</div><div class=\"line\">                          <span class=\"comment\">//将事件分发给该叶子的viewTree</span></div><div class=\"line\">                          <span class=\"keyword\">if</span> (dispatchTransformedTouchEvent(ev, <span class=\"keyword\">false</span>, child, idBitsToAssign)) &#123;</div><div class=\"line\">                          \t<span class=\"comment\">//叶子dispatch最终返回true</span></div><div class=\"line\">                              ...</div><div class=\"line\">                              <span class=\"comment\">//将child加入到target链表中</span></div><div class=\"line\">                              newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class=\"line\">                              alreadyDispatchedToNewTouchTarget = <span class=\"keyword\">true</span>;</div><div class=\"line\">                              <span class=\"comment\">//终止遍历</span></div><div class=\"line\">                              <span class=\"keyword\">break</span>;</div><div class=\"line\">                          &#125;</div><div class=\"line\">                          <span class=\"comment\">//设置标志：当前遍历没有找到可消费事件的view，事件可继续正常分发</span></div><div class=\"line\">                          ev.setTargetAccessibilityFocus(<span class=\"keyword\">false</span>);</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// 找不到可以消费该事件的view</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (mFirstTouchTarget == <span class=\"keyword\">null</span>) &#123; </div><div class=\"line\">              <span class=\"comment\">//继续事件传递流程</span></div><div class=\"line\">              handled = dispatchTransformedTouchEvent(ev, canceled, <span class=\"keyword\">null</span>,</div><div class=\"line\">                      TouchTarget.ALL_POINTER_IDS);</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              </div><div class=\"line\">              TouchTarget predecessor = <span class=\"keyword\">null</span>;</div><div class=\"line\">              TouchTarget target = mFirstTouchTarget;</div><div class=\"line\">              <span class=\"comment\">//找到可以消费该事件的view</span></div><div class=\"line\">              <span class=\"keyword\">while</span> (target != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  <span class=\"keyword\">final</span> TouchTarget next = target.next;</div><div class=\"line\">                  <span class=\"comment\">//之前已经分发同类事件给了view</span></div><div class=\"line\">                  <span class=\"keyword\">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</div><div class=\"line\">                      <span class=\"comment\">//返回true</span></div><div class=\"line\">                      handled = <span class=\"keyword\">true</span>;</div><div class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                      <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> cancelChild = resetCancelNextUpFlag(target.child)</div><div class=\"line\">                              || intercepted;</div><div class=\"line\">                       <span class=\"comment\">//将事件分发给他</span></div><div class=\"line\">                      <span class=\"keyword\">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,</div><div class=\"line\">                              target.child, target.pointerIdBits)) &#123;</div><div class=\"line\">                        <span class=\"comment\">//返回true  </span></div><div class=\"line\">                        handled = <span class=\"keyword\">true</span>;</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//返回ViewTree的事件传递消费结果：true 事件被消费；false 事件没有被消费</span></div><div class=\"line\">      <span class=\"keyword\">return</span> handled;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>ViewGroup的dispatchTransformedTouchEvent()方法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 将touch事件根据view的坐标系进行变换，</div><div class=\"line\">    * 如果view==null，则将事件传递给viewgroup继续分发事件</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTransformedTouchEvent</span><span class=\"params\">(MotionEvent event, <span class=\"keyword\">boolean</span> cancel,</span></span></div><div class=\"line\">           View child, <span class=\"keyword\">int</span> desiredPointerIdBits) &#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> handled;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//cacel事件</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> oldAction = event.getAction();</div><div class=\"line\">       <span class=\"keyword\">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;</div><div class=\"line\">           event.setAction(MotionEvent.ACTION_CANCEL);</div><div class=\"line\">           <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               handled = <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               handled = child.dispatchTouchEvent(event);</div><div class=\"line\">           &#125;</div><div class=\"line\">           event.setAction(oldAction);</div><div class=\"line\">           <span class=\"comment\">//cacel事件不需要转换，处理后在此返回处理结果</span></div><div class=\"line\">           <span class=\"keyword\">return</span> handled;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       ...</div><div class=\"line\">       <span class=\"keyword\">final</span> MotionEvent transformedEvent;</div><div class=\"line\">       <span class=\"keyword\">if</span> (newPointerIdBits == oldPointerIdBits) &#123;</div><div class=\"line\">        \t<span class=\"comment\">//child不可以消费该事件，继续分发</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span> || child.hasIdentityMatrix()) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               \t<span class=\"comment\">//不存在可以消费该事件的child，父节点继续事件分发</span></div><div class=\"line\">                   handled = <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> offsetX = mScrollX - child.mLeft;</div><div class=\"line\">                   <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> offsetY = mScrollY - child.mTop;</div><div class=\"line\">                   event.offsetLocation(offsetX, offsetY);</div><div class=\"line\"></div><div class=\"line\">                   handled = child.dispatchTouchEvent(event);</div><div class=\"line\"></div><div class=\"line\">                   event.offsetLocation(-offsetX, -offsetY);</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"comment\">//返回分发结果</span></div><div class=\"line\">               <span class=\"keyword\">return</span> handled;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"comment\">//child可以消费该事件</span></div><div class=\"line\">           transformedEvent = MotionEvent.obtain(event);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">       \t<span class=\"comment\">//手指点数变化</span></div><div class=\"line\">           transformedEvent = event.split(newPointerIdBits);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">       \t<span class=\"comment\">// 手指点数变化后，child无法对事件消费，则父节点继续分发</span></div><div class=\"line\">           handled = <span class=\"keyword\">super</span>.dispatchTouchEvent(transformedEvent);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"comment\">//child可以消费该事件，坐标系变换</span></div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> offsetX = mScrollX - child.mLeft;</div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> offsetY = mScrollY - child.mTop;</div><div class=\"line\">           transformedEvent.offsetLocation(offsetX, offsetY);</div><div class=\"line\">           <span class=\"keyword\">if</span> (! child.hasIdentityMatrix()) &#123;</div><div class=\"line\">               transformedEvent.transform(child.getInverseMatrix());</div><div class=\"line\">           &#125;</div><div class=\"line\">\t\t<span class=\"comment\">//child分发事件</span></div><div class=\"line\">           handled = child.dispatchTouchEvent(transformedEvent);</div><div class=\"line\">       &#125;</div><div class=\"line\">      </div><div class=\"line\">       transformedEvent.recycle();</div><div class=\"line\">       <span class=\"comment\">//返回child的分发处理结果</span></div><div class=\"line\">       <span class=\"keyword\">return</span> handled;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>ViewGroup的onInterceptTouchEvent()方法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * <span class=\"doctag\">@return</span>  true: 拦截事件并交给ViewGroup的onTouchEvent()处理</div><div class=\"line\">    * \t\t\tfalse: ViewGroup不消费事件，继续向子view分发事件</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">   \t<span class=\"comment\">//如果子类不override该方法，则默认返回false</span></div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"View-中touch事件是如何传递的\"><a href=\"#View-中touch事件是如何传递的\" class=\"headerlink\" title=\"View 中touch事件是如何传递的\"></a>View 中touch事件是如何传递的</h3><blockquote>\n<p>View的onInterceptTouchEvent()方法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 将屏幕的touch事件传递给目标view或者view自己（view本身就是目标view）</div><div class=\"line\">    * </div><div class=\"line\">    * <span class=\"doctag\">@return</span> True if the event was handled by the view, false otherwise.</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">       ...</div><div class=\"line\">       <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (mInputEventConsistencyVerifier != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mInputEventConsistencyVerifier.onTouchEvent(event, <span class=\"number\">0</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> actionMasked = event.getActionMasked();</div><div class=\"line\">       <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class=\"line\">           <span class=\"comment\">// Defensive cleanup for new gesture</span></div><div class=\"line\">           stopNestedScroll();</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class=\"line\">           ListenerInfo li = mListenerInfo;</div><div class=\"line\">           <span class=\"comment\">//如果view设置了touchlistener并且view是enable状态，则在listener中处理事件</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnTouchListener != <span class=\"keyword\">null</span></div><div class=\"line\">                   &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class=\"line\">                   &amp;&amp; li.mOnTouchListener.onTouch(<span class=\"keyword\">this</span>, event)) &#123;</div><div class=\"line\">               result = <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">\t\t<span class=\"comment\">//lsitener未处理（包括未定义listener），则交给ontouchEvent()</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class=\"line\">               result = <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//如果该view未消费该事件，则标记event交由父节点处理</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (!result &amp;&amp; mInputEventConsistencyVerifier != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           mInputEventConsistencyVerifier.onUnhandledEvent(event, <span class=\"number\">0</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_UP ||</div><div class=\"line\">               actionMasked == MotionEvent.ACTION_CANCEL ||</div><div class=\"line\">               (actionMasked == MotionEvent.ACTION_DOWN &amp;&amp; !result)) &#123;</div><div class=\"line\">           stopNestedScroll();</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">return</span> result;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>View的onTouchEvent()方法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * Implement this method to handle touch screen motion events.</div><div class=\"line\">    * <span class=\"doctag\">@return</span> True if the event was handled, false otherwise.</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> x = event.getX();</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> y = event.getY();</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> viewFlags = mViewFlags;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> action = event.getAction();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class=\"line\">           <span class=\"comment\">//view如果是disabled状态，该view仍然消费该事件，但是不会做出UI的相应</span></div><div class=\"line\">           <span class=\"keyword\">return</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE</div><div class=\"line\">                   || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</div><div class=\"line\">                   || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (mTouchDelegate != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</div><div class=\"line\">               (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE) ||</div><div class=\"line\">               (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) &#123;</div><div class=\"line\">           <span class=\"keyword\">switch</span> (action) &#123;</div><div class=\"line\">               <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                   ...</div><div class=\"line\">                   <span class=\"keyword\">break</span>;</div><div class=\"line\">               <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">                   ...</div><div class=\"line\">                   &#125;</div><div class=\"line\">                   <span class=\"keyword\">break</span>;</div><div class=\"line\">               <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:</div><div class=\"line\">                   ...</div><div class=\"line\">                   <span class=\"keyword\">break</span>;</div><div class=\"line\">               <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">                   ...</div><div class=\"line\">                   <span class=\"keyword\">break</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果事件不被中断，整个事件流向是一个类U型图，我们来看下这张图，可能更能理解U型图的意思。</p>\n</blockquote>\n<p><img src=\"/hello-world/img/Utouchevent.png\" alt=\"U型事件传递模型\"><br><strong>注意</strong>：这张图只是一张事件的传递模型的示意图，事件传递的实际实现细节跟图中不太一致，但最终事件的传递方向是一致的。</p>\n<p>通过代码我们注意到，每一层的dispatchtouchevent（）都是该层的事件的入口，在每一层的逻辑都大致遵循如下调用规则：</p>\n<ul>\n<li>dispatchtouchevent捕获到上层分发过来的事件</li>\n<li>调用oninterceptTouchevent用来逻辑判断该事件是否需要在本层处理</li>\n<li>如果oninterceptTouchevent 返回false，则调用下一层的viewtree的dispatchtouchevent（递归），子viewtree的返回结果会作为本层dispatchtouchevent的结果返回</li>\n<li>如果oninterceptTouchevent返回true，则调用本层的ontouchevent方法</li>\n<li>ontouchevent的逻辑处理结果会返回给dispatchtouchevent座位结果返回</li>\n<li>最终本层的dispatchtouchevent的处理结果会返回给父view</li>\n</ul>\n<p>整个viewtree其实都是在按照同样的逻辑进行着层层的递归。<br>希望读者能够好好的把握一下代码和递归逻辑，这样在我们的view中就可以根据实际需要灵活使用时间分发、拦截和处理的三种接口，灵活的控制事件的传递和消费。</p>\n<h3 id=\"ACTION-MOVE和ACTION-UP事件\"><a href=\"#ACTION-MOVE和ACTION-UP事件\" class=\"headerlink\" title=\"ACTION_MOVE和ACTION_UP事件\"></a>ACTION_MOVE和ACTION_UP事件</h3><p>我们上文中讲到的事件传递流程是ACTION_DOWN的处理流程。<br>由于ACTION_DOWN事件是touch事件的第一个事件，所以其处理流程会相对复杂。而后续的一系列其他事件，其处理逻辑收到ACTION_DOWN事件的处理结果的影响而更加的智能。系统不会傻傻的把前人走过的死路让后人再走一遍。换句话说，一旦ACTION_DOWN事件找到了target，后续的一些列事件就会直达target，而不会再分发往更底层进行逻辑迭代。<br>还是那句话，看图（再次感谢kelin童鞋做出了这么优雅的图片）：<br><img src=\"/hello-world/img/touchevent2.png\" alt=\"ACTION_MOVE和ACTION_UP事件\"></p>\n<ul>\n<li>红色的箭头代表ACTION_DOWN 事件的流向</li>\n<li>蓝色的箭头代表ACTION_MOVE 和 ACTION_UP 事件的流向</li>\n</ul>\n<p>本篇是Glide框架及源码解析的第一篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/2016/08/25/%E5%9B%BE%E8%A7%A3Android%EF%BC%9A%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/\" target=\"_blank\" rel=\"external\">原文链接</a>）</p>\n"},{"title":"跟着源码学设计：Glide框架及源码解析（四）","url":"http://yoursite.com/2016/08/23/跟着源码学设计：Glide框架及源码解析（四）/","content":"<p><strong>前言</strong></p>\n<p>近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。<strong>学习小组QQ群</strong>: 193765960。</p>\n<p>本篇是Glide框架及源码解析的第四篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Glide有帮助，还望大家多多转载。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<p><strong>往期文章：</strong></p>\n<p><a href=\"https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（一）</a><br><a href=\"https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（二）</a><br><a href=\"https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（三）</a></p>\n<p>在之前的文章中，我们已经知道了Glide请求是如何被加载到请求队列中并执行的，也了解了资源是如何管理的。本篇文章我们将探究一下资源是如何获取并分发的。</p>\n<h3 id=\"资源请求和回调机制类图\"><a href=\"#资源请求和回调机制类图\" class=\"headerlink\" title=\"资源请求和回调机制类图\"></a>资源请求和回调机制类图</h3><p><img src=\"/hello-world/img/Engin.png\" alt=\"资源请求和回调机制类图\"></p>\n<h3 id=\"request开启请求\"><a href=\"#request开启请求\" class=\"headerlink\" title=\"request开启请求\"></a>request开启请求</h3><p>request被加载到requestTracker中统一管理启动获取资源，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</div><div class=\"line\">  requests.add(request);</div><div class=\"line\">  <span class=\"keyword\">if</span> (!isPaused) &#123;</div><div class=\"line\">  \trequest.begin();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  \tpendingRequests.add(request);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>request的执行从其begin()方法开始：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void runRequest(Request request) &#123;</div><div class=\"line\">  requests.add(request);</div><div class=\"line\">  <span class=\"keyword\">if</span> (!isPaused) &#123;</div><div class=\"line\">  \trequest.begin();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  \tpendingRequests.add(request);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"获取Engin对象并封装任务\"><a href=\"#获取Engin对象并封装任务\" class=\"headerlink\" title=\"获取Engin对象并封装任务\"></a>获取Engin对象并封装任务</h3><ul>\n<li>获取engine对象，在load()方法中创建EnginJob任务</li>\n<li>为Enginjob创建异步线程EnginRunnable</li>\n<li>为EnginRunnable初始化资源获取解析任务DecodJob<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> &lt;T, Z, R&gt; <span class=\"function\">LoadStatus <span class=\"title\">load</span><span class=\"params\">(Key signature, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, DataFetcher&lt;T&gt; fetcher,</span></span></div><div class=\"line\">DataLoadProvider&lt;T, Z&gt; loadProvider, Transformation&lt;Z&gt; transformation, ResourceTranscoder&lt;Z, R&gt; transcoder,</div><div class=\"line\">Priority priority, <span class=\"keyword\">boolean</span> isMemoryCacheable, DiskCacheStrategy diskCacheStrategy, ResourceCallback cb) &#123;</div><div class=\"line\"> </div><div class=\"line\">  Util.assertMainThread();</div><div class=\"line\">  <span class=\"keyword\">long</span> startTime = LogTime.getLogTime();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">final</span> String id = fetcher.getId();</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//获取key</span></div><div class=\"line\">  EngineKey key = keyFactory.buildKey(id, signature, width, height, loadProvider.getCacheDecoder(),</div><div class=\"line\">  loadProvider.getSourceDecoder(), transformation, loadProvider.getEncoder(),</div><div class=\"line\">  transcoder, loadProvider.getSourceEncoder());</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">//查找LruResourceCache</span></div><div class=\"line\">  EngineResource&lt;?&gt; cached = loadFromCache(key, isMemoryCacheable);</div><div class=\"line\">  <span class=\"keyword\">if</span> (cached != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    cb.onResourceReady(cached);</div><div class=\"line\">    <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class=\"line\">    \tlogWithTimeAndKey(<span class=\"string\">\"Loaded resource from cache\"</span>, startTime, key);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">//查找ActiveResourceCache</span></div><div class=\"line\">  EngineResource&lt;?&gt; active = loadFromActiveResources(key, isMemoryCacheable);</div><div class=\"line\">  <span class=\"keyword\">if</span> (active != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    cb.onResourceReady(active);</div><div class=\"line\">    <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class=\"line\">      logWithTimeAndKey(<span class=\"string\">\"Loaded resource from active resources\"</span>, startTime, key);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">//任务排重</span></div><div class=\"line\">  EngineJob current = jobs.get(key);</div><div class=\"line\">  <span class=\"keyword\">if</span> (current != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    current.addCallback(cb);</div><div class=\"line\">    <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class=\"line\">    \tlogWithTimeAndKey(<span class=\"string\">\"Added to existing load\"</span>, startTime, key);</div><div class=\"line\">    &#125;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LoadStatus(cb, current);</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//创建EngineJob</span></div><div class=\"line\">  EngineJob engineJob = engineJobFactory.build(key, isMemoryCacheable);</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//创建DecodeJob:注意fetcher（数据加载器）</span></div><div class=\"line\">  DecodeJob&lt;T, Z, R&gt; decodeJob = <span class=\"keyword\">new</span> DecodeJob&lt;T, Z, R&gt;(key, width, height, fetcher, loadProvider, transformation,</div><div class=\"line\">  transcoder, diskCacheProvider, diskCacheStrategy, priority);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//创建任务线程</span></div><div class=\"line\">  EngineRunnable runnable = <span class=\"keyword\">new</span> EngineRunnable(engineJob, decodeJob, priority);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//将任务加入管理队列</span></div><div class=\"line\">  jobs.put(key, engineJob);</div><div class=\"line\">  engineJob.addCallback(cb);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//启动任务</span></div><div class=\"line\">  engineJob.start(runnable);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class=\"line\">  \tlogWithTimeAndKey(<span class=\"string\">\"Started new load\"</span>, startTime, key);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LoadStatus(cb, engineJob);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"执行任务获取数据并解析\"><a href=\"#执行任务获取数据并解析\" class=\"headerlink\" title=\"执行任务获取数据并解析\"></a>执行任务获取数据并解析</h3><ul>\n<li><p>DecodJob通过数据获取器DataFetcher获取数据文件（流）<br>request被加载到requestTracker中统一管理启动获取资源，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//EngineRunnable的run()方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isCancelled) &#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  Exception exception = <span class=\"keyword\">null</span>;</div><div class=\"line\">  Resource&lt;?&gt; resource = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    resource = decode();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class=\"line\">    Log.v(TAG, <span class=\"string\">\"Exception decoding\"</span>, e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    exception = e;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (isCancelled) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (resource != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      resource.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">  \t<span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (resource == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  \tonLoadFailed(exception);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  \tonLoadComplete(resource);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"keyword\">private</span> Resource&lt;?&gt; decode() <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (isDecodingFromCache()) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> decodeFromCache();</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> decodeFromSource();</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\">    </div><div class=\"line\"> <span class=\"keyword\">private</span> Resource&lt;?&gt; decodeFromSource() <span class=\"keyword\">throws</span> Exception &#123;</div><div class=\"line\"> \t<span class=\"keyword\">return</span> decodeJob.decodeFromSource();</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据解析器对data数据解析生成resource资源对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Resource&lt;T&gt; <span class=\"title\">decodeSource</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    Resource&lt;T&gt; decoded = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> startTime = LogTime.getLogTime();</div><div class=\"line\">        <span class=\"comment\">//数据加载器获取数据</span></div><div class=\"line\">        <span class=\"keyword\">final</span> A data = fetcher.loadData(priority);</div><div class=\"line\">        <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class=\"line\">            logWithTimeAndKey(<span class=\"string\">\"Fetched data\"</span>, startTime);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isCancelled) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//data数据解析生成resource资源对象</span></div><div class=\"line\">        decoded = decodeFromSourceData(data);</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">    \tfetcher.cleanup();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> decoded;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//HttpUrlFetcher：网络资源加载器</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">loadData</span><span class=\"params\">(Priority priority)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> loadDataWithRedirects(glideUrl.toURL(), <span class=\"number\">0</span> <span class=\"comment\">/*redirects*/</span>, <span class=\"keyword\">null</span> <span class=\"comment\">/*lastUrl*/</span>, glideUrl.getHeaders());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>resource资源进一步封装成为EnginResource对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Runnable的方法，在run()方法中调用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadComplete</span><span class=\"params\">(Resource resource)</span> </span>&#123;</div><div class=\"line\">\tmanager.onResourceReady(resource);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//manager.onResourceReady(resource)实际回调了Enginjob的接口实现</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResourceReady</span><span class=\"params\">(<span class=\"keyword\">final</span> Resource&lt;?&gt; resource)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.resource = resource;</div><div class=\"line\">  MAIN_THREAD_HANDLER.obtainMessage(MSG_COMPLETE, <span class=\"keyword\">this</span>).sendToTarget();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过监听接口回传EnginResource对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handleResultOnMainThread</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isCancelled) &#123;</div><div class=\"line\">    resource.recycle();</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cbs.isEmpty()) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Received a resource without any callbacks to notify\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  engineResource = engineResourceFactory.build(resource, isCacheable);</div><div class=\"line\">  hasResource = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Hold on to resource for duration of request so we don't recycle it in the middle of notifying if it</span></div><div class=\"line\">  <span class=\"comment\">// synchronously released by one of the callbacks.</span></div><div class=\"line\">  engineResource.acquire();</div><div class=\"line\">  listener.onEngineJobComplete(key, engineResource);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (ResourceCallback cb : cbs) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isInIgnoredCallbacks(cb)) &#123;</div><div class=\"line\">      engineResource.acquire();</div><div class=\"line\">      <span class=\"comment\">//回传engineResource到request中，request获取到资源后开始刷新UI</span></div><div class=\"line\">      cb.onResourceReady(engineResource);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// Our request is complete, so we can release the resource.</span></div><div class=\"line\">  engineResource.release();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>（本篇是Glide框架及源码解析的第四篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/2016/08/23/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E5%9B%9B%EF%BC%89/\" target=\"_blank\" rel=\"external\">原文链接</a>）</p>\n"},{"title":"跟着源码学设计：Glide框架及源码解析（三）","url":"http://yoursite.com/2016/08/22/跟着源码学设计：Glide框架及源码解析（三）/","content":"<p><strong>前言</strong></p>\n<p>近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。<strong>学习小组QQ群</strong>: 193765960。</p>\n<p>本篇是Glide框架及源码解析的第三篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Glide有帮助，还望大家多多转载。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<p><strong>往期文章：</strong></p>\n<p><a href=\"https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（一）</a><br><a href=\"https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/\" target=\"_blank\" rel=\"external\">跟着源码学设计：Glide框架及源码解析（二）</a></p>\n<h3 id=\"Glide内存缓存机制\"><a href=\"#Glide内存缓存机制\" class=\"headerlink\" title=\"Glide内存缓存机制\"></a>Glide内存缓存机制</h3><p>在之前的两篇中我们剖析了Glide的生命周期绑定机制和Glide的请求管理机制。接下来按说应该讲到request实际请求资源并回调刷新界面这一块了，但是为了更好的理解Glide在这一块的设计，我先大致的讲一讲Glide的内存缓存和管理机制。<br>不同于其他常见网络加载框架只有LruCatch一种缓存机制，Glide内存为三块（非常牛逼巧妙的设计）：</p>\n<ul>\n<li>ActiveResourceCache：缓存当前正在使用的资源（注意是弱引用）</li>\n<li>LruResourceCache： 缓存最近使用过但是当前未使用的资源，LRU算法</li>\n<li>BitmapPool：缓存所有被释放的图片，内存复用，LRU算法</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>LruResourceCache和ActiveResourceCache设计是为了尽可能的资源复用</li>\n<li>BitmapPool的设计目的是为了尽可能的内存复用</li>\n</ul>\n<p>说的比较抽象，是不是懵逼了？别急，上图：<br><img src=\"/hello-world/img/MemoryCacheManager.png\" alt=\"Glide内存缓存及管理机制\"></p>\n<ul>\n<li>当我们需要显示某个资源时，Glide会先去查找LruResourceCache，找到了则将资源从LruResourceCache移除加入到ActiveResourceCache；</li>\n<li>LruResourceCache找不到资源则查找ActiveResourceCache。</li>\n<li>如果在ActiveResourceCache也找不到合适的资源，则会根据加载策略从硬盘或者网络加载资源。</li>\n<li>获取数据后Glide会从BitmapPool中找寻合适的可供内存复用的废弃recycled bitmap（找不到则会重新创建bitmap对象），然后刷新bitmap的数据。</li>\n<li>bitmap被转换封装为Resource缓存入ActiveResourceCache和Request对象中。</li>\n<li><p>Request的target会获取resource中引用的bitmap并展示。</p>\n</li>\n<li><p>当target的资源需要release时，resource会根据缓存策略被缓存到LruResourceCache，同时ActiveResourceCache中的弱引用会被删除。如果，该资源不能缓存到LruResourceCache，则资源将被recycle到BitmapPool。</p>\n</li>\n<li><p>当需要回收内存时（比如系统内存不足或者生命周期结束），LruResourceCache将根据LRU算法recycle一些resource到BitmapPool。</p>\n</li>\n<li>BitmapPool会根据缓存池的尺寸和recycled resource的缓存策略来缓存resource的bitmap。</li>\n<li>BitmapPool会根据LRU算法和缓存池的尺寸来释放一些老旧资源。</li>\n<li>当系统GC时，则会回收可回收的资源释放内存</li>\n</ul>\n<p>这样就完成了一个资源的完整的循环。</p>\n<h3 id=\"BitmapPool的内存复用机制\"><a href=\"#BitmapPool的内存复用机制\" class=\"headerlink\" title=\"BitmapPool的内存复用机制\"></a>BitmapPool的内存复用机制</h3><p>知识储备：</p>\n<ul>\n<li>BitmapFactory.Options.inBitmap是AndroiD3.0新增的一个属性，如果设置了这个属性则会重用这个Bitmap的内存从而提升性能。</li>\n<li>在SDK 11 -&gt; 18之间，重用的bitmap大小必须是一致的，例如给inBitmap赋值的图片大小为100-100，那么新申请的bitmap必须也为100-100才能够被重用。从SDK 19开始，新申请的bitmap大小必须小于或者等于已经赋值过的bitmap大小。</li>\n<li>新申请的bitmap与旧的bitmap必须有相同的解码格式，例如大家都是8888的，如果前面的bitmap是8888，那么就不能支持4444与565格式的bitmap了</li>\n</ul>\n<h4 id=\"使用inbitmap前，内存占用情况\"><a href=\"#使用inbitmap前，内存占用情况\" class=\"headerlink\" title=\"使用inbitmap前，内存占用情况\"></a>使用inbitmap前，内存占用情况</h4><p><img src=\"/hello-world/img/inbitmap_null.png\" alt=\"使用inbitmap前，内存占用情况\"></p>\n<h4 id=\"使用inbitmap后，内存占用情况\"><a href=\"#使用inbitmap后，内存占用情况\" class=\"headerlink\" title=\"使用inbitmap后，内存占用情况\"></a>使用inbitmap后，内存占用情况</h4><p><img src=\"/hello-world/img/inbitmap.png\" alt=\"使用inbitmap后，内存占用情况\"></p>\n<p>下面看一下核心代码：Downsampler的downsampleWithSize()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Bitmap <span class=\"title\">downsampleWithSize</span><span class=\"params\">(MarkEnforcingInputStream is, RecyclableBufferedInputStream  bufferedStream,</span></span></div><div class=\"line\">BitmapFactory.Options options, BitmapPool pool, <span class=\"keyword\">int</span> inWidth, <span class=\"keyword\">int</span> inHeight, <span class=\"keyword\">int</span> sampleSize,</div><div class=\"line\">DecodeFormat decodeFormat) &#123;</div><div class=\"line\">  <span class=\"comment\">// Prior to KitKat, the inBitmap size must exactly match the size of the bitmap we're decoding.</span></div><div class=\"line\">  Bitmap.Config config = getConfig(is, decodeFormat);</div><div class=\"line\">  options.inSampleSize = sampleSize;</div><div class=\"line\">  options.inPreferredConfig = config;</div><div class=\"line\">  <span class=\"keyword\">if</span> ((options.inSampleSize == <span class=\"number\">1</span> || Build.VERSION_CODES.KITKAT &lt;= Build.VERSION.SDK_INT) &amp;&amp; shouldUsePool(is)) &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> targetWidth = (<span class=\"keyword\">int</span>) Math.ceil(inWidth / (<span class=\"keyword\">double</span>) sampleSize);</div><div class=\"line\">    <span class=\"keyword\">int</span> targetHeight = (<span class=\"keyword\">int</span>) Math.ceil(inHeight / (<span class=\"keyword\">double</span>) sampleSize);</div><div class=\"line\">    <span class=\"comment\">// BitmapFactory will clear out the Bitmap before writing to it, so getDirty is safe.</span></div><div class=\"line\">    setInBitmap(options, pool.getDirty(targetWidth, targetHeight, config));</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> decodeStream(is, bufferedStream, options);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setInBitmap</span><span class=\"params\">(BitmapFactory.Options options, Bitmap recycled)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (Build.VERSION_CODES.HONEYCOMB &lt;= Build.VERSION.SDK_INT) &#123;</div><div class=\"line\">  \toptions.inBitmap = recycled;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"让我们先看一下我们最常见到的LruMemoryCache机制\"><a href=\"#让我们先看一下我们最常见到的LruMemoryCache机制\" class=\"headerlink\" title=\"让我们先看一下我们最常见到的LruMemoryCache机制\"></a>让我们先看一下我们最常见到的LruMemoryCache机制</h3><p><img src=\"/hello-world/img/NormalLruMemory.png\" alt=\"ActiveResourceCache的设计\"></p>\n<ul>\n<li>如图，当系统内存不足时，LruMemoryCache会根据LRU算法移除一些资源（bitmap）</li>\n<li>针对移除的资源，系统在GC时会回收资源(bitmap)以释放内存</li>\n<li>当应用再次需要次资源时，需要重新分配内存，重新对资源文件进行解析生成bitmap<br>1）这样会造成内存抖动；<br>2）比较耗费时间，影响流畅度（GC也比较频繁）</li>\n</ul>\n<h3 id=\"让我们再来看一下Glide的机制\"><a href=\"#让我们再来看一下Glide的机制\" class=\"headerlink\" title=\"让我们再来看一下Glide的机制\"></a>让我们再来看一下Glide的机制</h3><p><img src=\"/hello-world/img/GlideMemoryResourceCache.png\" alt=\"ActiveResourceCache的设计\"></p>\n<ul>\n<li>如图，当系统内存不足时，LruResourceCache会根据LRU算法移除一些资源（resource）到BitmapPool</li>\n<li>到BitmapPool会根据LRU算法移除一些资源（bitmap）</li>\n<li>当应用再次需要资源时，会优先复用到BitmapPool中的bitmap对象（复用其内存），只需刷新bitmap的像素数据<br>1）这样能有效地降低内存抖动；<br>2）由于很多情况下可以复用废弃bitmap的内存，因此避免了内存分配等造成的性能损耗，系统比较流畅<br>3）降低了系统GC的频率<br>4）LruResourceCache和BitmapPool中都是当前不在使用的资源，做整体的资源回收那叫一个酸爽。</li>\n</ul>\n<p>（本篇是Glide框架及源码解析的第三篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/2016/08/22/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/\" target=\"_blank\" rel=\"external\">原文链接</a>）</p>\n"},{"title":"跟着源码学设计：Glide框架及源码解析（二）","url":"http://yoursite.com/2016/08/22/跟着源码学设计：Glide框架及源码解析（二）/","content":"<p><strong>前言</strong><br>近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。<strong>学习小组QQ群</strong>: 193765960。</p>\n<p>本篇是Glide框架及源码解析的第二篇，更多文章敬请关注后续文章。如果这篇文章对大家学习Glide有帮助，还望大家多多转载。</p>\n<blockquote>\n<p>版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/archives/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/archives/</a> </p>\n</blockquote>\n<p><strong>往期文章：</strong><br><a href=\"https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/\" target=\"_blank\" rel=\"external\"> 跟着源码学设计：Glide框架及源码解析（一）</a></p>\n<h3 id=\"Request管理机制\"><a href=\"#Request管理机制\" class=\"headerlink\" title=\"Request管理机制\"></a>Request管理机制</h3><p>在上一篇中我们剖析了Glide的生命周期绑定机制，这一篇我们紧接着Glide的处理流程来学习一下Glide的请求管理机制。<br>我们先来看一下Glide的最简单的使用代码示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ImageView ivImage = (ImageView) findViewById(R.id.ivImage);</div><div class=\"line\">Glide.with(ivImage.getContext()) <span class=\"comment\">//获取RequestManager对象</span></div><div class=\"line\">     .load(url); <span class=\"comment\">//设置Request对象需要的资源链接</span></div><div class=\"line\">     .into(ivImage); <span class=\"comment\">//获取Request对象并绑定viewTarget -&gt; 发起网络请求</span></div></pre></td></tr></table></figure></p>\n<p>该段代码十分简洁，但是内部实现的功能却十分的强大，比如：</p>\n<ul>\n<li>request的生命周期管理（如：退出或者隐藏了界面，需求就取消或暂停了）</li>\n<li>viewTarget的生命周期管理</li>\n<li>资源的复用和释放</li>\n<li>灵活的配置（request的builder模式）</li>\n</ul>\n<p>针对这些问题，后面将会一一展开剖析。</p>\n<h3 id=\"request及其生命周期管理\"><a href=\"#request及其生命周期管理\" class=\"headerlink\" title=\"request及其生命周期管理\"></a>request及其生命周期管理</h3><ul>\n<li>通过上一篇的学习，我们知道了Glide内部生命周期接口为LifecycleListener</li>\n<li>RequestManager具有生命周期（实现了LifecycleListener接口）</li>\n<li>request由RequestManager的into()方法族获得</li>\n<li>request的生命周期由RequestManager统一管理</li>\n</ul>\n<h3 id=\"RequestManager是如何生成request并管理request队列的？\"><a href=\"#RequestManager是如何生成request并管理request队列的？\" class=\"headerlink\" title=\"RequestManager是如何生成request并管理request队列的？\"></a>RequestManager是如何生成request并管理request队列的？</h3><p>老规矩，先上图：<br><img src=\"/hello-world/img/GlideRequestManager.png\" alt=\"Glide请求管理机制类图\"></p>\n<ul>\n<li>如图， RequestManager持有一个RequestTracker对象requestTracker。</li>\n<li>requestTracker对象维护request的队列集合</li>\n<li>RequestManager的load()函数用于获取GenericRequestBuilder对象（其实是子类对象）<ul>\n<li>load()内部调用loadGeneric()方法，将requestTracker对象引用传递给GenericRequestBuilder类</li>\n<li>load()实际调用GenericRequestBuilder.load()方法完成request的URL设置</li>\n</ul>\n</li>\n<li>GenericRequestBuilder的into()方法是实际产生request和消费request的地方。<ul>\n<li>GenericRequestBuilder的into(target)方法调用obtainReauest()获取到GenericRequest对象request，request与target相互绑定并被requestTracker维护。</li>\n</ul>\n</li>\n</ul>\n<p>下面看一下核心代码：GenericRequestBuilder的into(target)方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class=\"function\">Y <span class=\"title\">into</span><span class=\"params\">(Y target)</span> </span>&#123;</div><div class=\"line\">  Util.assertMainThread();</div><div class=\"line\">  <span class=\"keyword\">if</span> (target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  \t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"You must pass in a non null Target\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!isModelSet) &#123;</div><div class=\"line\">  \t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"You must first set a model (try #load())\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//因为target和request是相互绑定的，所以考虑到复用的情景时，可以先获取一下request</span></div><div class=\"line\">  Request previous = target.getRequest();</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//previous != null说明target有复用，需要释放之前绑定的资源</span></div><div class=\"line\">  <span class=\"comment\">//注意：request内部是绑定了资源的，这里还没有讲到，先知道这回事，后面会讲</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (previous != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">//释放资源，防内存泄漏</span></div><div class=\"line\">    <span class=\"comment\">//这段代码是精华，需要好好体会：</span></div><div class=\"line\">    <span class=\"comment\">//Glidek肯定支持view的复用（对吧？），那么复用的view资源是如何绑定和释放的？</span></div><div class=\"line\">    <span class=\"comment\">//这里就是资源释放的地方（入口），资源在何时绑定会在后续的课程讲到。</span></div><div class=\"line\">    previous.clear();</div><div class=\"line\">    requestTracker.removeRequest(previous);</div><div class=\"line\">    previous.recycle();</div><div class=\"line\">  &#125;</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//获取需求对象（对象绑定了target）</span></div><div class=\"line\">  Request request = buildRequest(target);</div><div class=\"line\">  <span class=\"comment\">//target绑定需求</span></div><div class=\"line\">  target.setRequest(request);</div><div class=\"line\">  <span class=\"comment\">//因为target具有生命周期，即实现了LifecycleListener方法，所以将其注册给ActivityFragmentLifecycle统一管理（不知道是啥的去看上一篇文章）</span></div><div class=\"line\">  lifecycle.addListener(target);</div><div class=\"line\">  <span class=\"comment\">//将需求加入队列并执行需求</span></div><div class=\"line\">  <span class=\"comment\">//注意是单线程</span></div><div class=\"line\">  requestTracker.runRequest(request);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">return</span> target;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"request的生命周期管理：\"><a href=\"#request的生命周期管理：\" class=\"headerlink\" title=\"request的生命周期管理：\"></a>request的生命周期管理：</h3><ul>\n<li>根据上文得知，request都被加入到requestTracker中来管理</li>\n<li>requestTracker由RequestManager创建和管理</li>\n<li>RequestManager具有生命周期</li>\n</ul>\n<p>下面让我们看看RequestManager在各个生命周期回调里都做了什么</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tresumeRequests();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tpauseRequests();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\trequestTracker.clearRequests();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pauseRequests</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tUtil.assertMainThread();</div><div class=\"line\">\trequestTracker.pauseRequests();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resumeRequests</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tUtil.assertMainThread();</div><div class=\"line\">\trequestTracker.resumeRequests();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//下面的两个回调其实和request的关系没有那么直接，先放在这里留个印象    </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTrimMemory</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>&#123;</div><div class=\"line\">\tglide.trimMemory(level);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLowMemory</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tglide.clearMemory();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 代码很清楚了吧。细心的同学可能注意到了onTrimMemory(int level)和onLowMemory()，这俩货是系统在资源不足时调用的，说白了就是释放内存，具体怎么搞得，后续文章会专门讲到Glide的内存管理机制（也是精华）</p>\n<p>最后让我们看看requestTracker都干啥了吧</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestTracker</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;Request&gt; requests = Collections.newSetFromMap(<span class=\"keyword\">new</span> WeakHashMap&lt;Request, Boolean&gt;());</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"MismatchedQueryAndUpdateOfCollection\"</span>)</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Request&gt; pendingRequests = <span class=\"keyword\">new</span> ArrayList&lt;Request&gt;();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isPaused;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Starts tracking the given request.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</div><div class=\"line\">    requests.add(request);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isPaused) &#123;</div><div class=\"line\">    \trequest.begin();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">   \t\tpendingRequests.add(request);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// Visible for testing.</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</div><div class=\"line\">  \trequests.add(request);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Stops tracking the given request.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</div><div class=\"line\">  \trequests.remove(request);</div><div class=\"line\">  \tpendingRequests.remove(request);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Returns &#123;<span class=\"doctag\">@code</span> true&#125; if requests are currently paused, and &#123;<span class=\"doctag\">@code</span> false&#125; otherwise.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPaused</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> isPaused;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Stops any in progress requests.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pauseRequests</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    isPaused = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Request request : Util.getSnapshot(requests)) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (request.isRunning()) &#123;</div><div class=\"line\">      \trequest.pause();</div><div class=\"line\">      \tpendingRequests.add(request);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Starts any not yet completed or failed requests.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resumeRequests</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    isPaused = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Request request : Util.getSnapshot(requests)) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!request.isComplete() &amp;&amp; !request.isCancelled() &amp;&amp; !request.isRunning()) &#123;</div><div class=\"line\">      \trequest.begin();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    pendingRequests.clear();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Cancels all requests and clears their resources.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearRequests</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Request request : Util.getSnapshot(requests)) &#123;</div><div class=\"line\">    \trequest.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">    pendingRequests.clear();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">  * Restarts failed requests and cancels and restarts in progress requests.</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restartRequests</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Request request : Util.getSnapshot(requests)) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!request.isComplete() &amp;&amp; !request.isCancelled()) &#123;</div><div class=\"line\">        <span class=\"comment\">// Ensure the request will be restarted in onResume.</span></div><div class=\"line\">        request.pause();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isPaused) &#123;</div><div class=\"line\">          request.begin();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          pendingRequests.add(request);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>（本篇是Glide框架及源码解析的第二篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/\" target=\"_blank\" rel=\"external\">原文链接</a>）</p>\n"},{"title":"跟着源码学设计：Glide 框架及源码解析（一）","url":"http://yoursite.com/2016/08/19/跟着源码学设计：Glide框架及源码解析（一）/","content":"<p><strong>前言</strong><br>近期研究了一下Glide的图片加载框架，在这里和大家分享一下。由于代码研读有限，难免有错误的地方，了解的童鞋还望指正。如果这篇文章对大家学习Glide有帮助，还望大家多多转载。<strong>学习小组QQ群</strong>: 193765960。</p>\n<blockquote>\n<p>本篇是Glide框架及源码解析的第一篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/\" target=\"_blank\" rel=\"external\">https://xiaodanchen.github.io/</a> </p>\n</blockquote>\n<h3 id=\"Glide-简介\"><a href=\"#Glide-简介\" class=\"headerlink\" title=\"Glide 简介\"></a>Glide 简介</h3><p>Glide是一个性能优良的第三方网络图片加载框架，Google官方对其较为推荐。Glide的优良性能在节省内存和快速流畅加载方面具有较好体现。究其内部机制，发现其优良性能得益于以下几点：</p>\n<ul>\n<li>与使用环境生命周期相绑定：RequestManagerFragment &amp; SupportRequestManagerFragment</li>\n<li>内存的三级缓存池：LruMemoryResources, ActiveResources, BitmapPool</li>\n<li>内存复用机制：BitmapPool</li>\n</ul>\n<p>更多的关于Glide的介绍网上资料很多，在这里不再赘述，下文中将针对Glide的内部机制展开说明。</p>\n<h3 id=\"为什么要绑定生命周期（有什么优点）？\"><a href=\"#为什么要绑定生命周期（有什么优点）？\" class=\"headerlink\" title=\"为什么要绑定生命周期（有什么优点）？\"></a>为什么要绑定生命周期（有什么优点）？</h3><ul>\n<li>可以实现网络请求根据生命周期而暂停、执行、恢复、释放等</li>\n<li>可以实现资源比如图片的自动释放</li>\n<li>降低了内存的压力</li>\n<li>降低了内存泄漏的风险</li>\n</ul>\n<h3 id=\"绑定原理\"><a href=\"#绑定原理\" class=\"headerlink\" title=\"绑定原理\"></a>绑定原理</h3><ul>\n<li>原理的知识基础：Android中FragmentManager（简称fm）中的所有fragment（通过fm.add()添加进来）都与fm所处的context环境具有生命周期的绑定。例如：我们的activity中的fragment的生命周期自动通过activity的fm和activity的生命周期绑定。</li>\n</ul>\n<ul>\n<li>Glide内部定义封装了RequestManagerFragment 和 SupportRequestManagerFragment两种fragment用来实现绑定。该两类Fragment不具有任何的界面和其他功能，通过入口传入的context获取到的fm绑定生命周期到context上。</li>\n<li>Glide内部的生命周期绑定机制进一步通过基于xxxxRequestManagerFragment 的生命周期接口的回调实现。</li>\n</ul>\n<h3 id=\"话不多说，先来张类图\"><a href=\"#话不多说，先来张类图\" class=\"headerlink\" title=\"话不多说，先来张类图\"></a>话不多说，先来张类图</h3><p><img src=\"/hello-world/img/GlideLifeCycle.png\" alt=\"Glide生命周期绑定机制类图\"></p>\n<h3 id=\"关键类：RequestManagerRetriever-单例模式-：\"><a href=\"#关键类：RequestManagerRetriever-单例模式-：\" class=\"headerlink\" title=\"关键类：RequestManagerRetriever(单例模式)：\"></a>关键类：RequestManagerRetriever(单例模式)：</h3><ul>\n<li>根据context获取fm;</li>\n<li>获取xxxxRequestManagerFragment实例</li>\n<li>获取RequestManager实例</li>\n<li>相互绑定xxxxRequestManagerFragment和RequestManager</li>\n<li>xxxxRequestManagerFragment绑定到context生命周期</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Note: 根据context类型，获取fm</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (Util.isOnBackgroundThread() || Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> get(activity.getApplicationContext());</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">     assertNotDestroyed(activity);</div><div class=\"line\">     android.app.FragmentManager fm = activity.getFragmentManager();</div><div class=\"line\">     <span class=\"keyword\">return</span> fragmentGet(activity, fm);</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Note: new RequestManager(context,lifecycle,RequestManagerTreeNode)中，绑定了lifecycle;</div><div class=\"line\"> * current.setRequestManager(requestManager):requestManager绑定到fragment</div><div class=\"line\"> */</div><div class=\"line\"> <span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</div><div class=\"line\"> <span class=\"function\">RequestManager <span class=\"title\">fragmentGet</span><span class=\"params\">(Context context, android.app.FragmentManager fm)</span> </span>&#123;</div><div class=\"line\">   RequestManagerFragment current = getRequestManagerFragment(fm);</div><div class=\"line\">   RequestManager requestManager = current.getRequestManager();</div><div class=\"line\">   <span class=\"keyword\">if</span> (requestManager == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">     requestManager = <span class=\"keyword\">new</span> RequestManager(context, current.getLifecycle(),current.getRequestManagerTreeNode());</div><div class=\"line\">     current.setRequestManager(requestManager);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> requestManager;</div><div class=\"line\"> &#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Note: fm.beginTransaction().add(current, FRAGMENT_TAG): fragment绑定context生命周期</div><div class=\"line\"> */</div><div class=\"line\"> <span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.JELLY_BEAN_MR1)</div><div class=\"line\"> <span class=\"function\">RequestManagerFragment <span class=\"title\">getRequestManagerFragment</span><span class=\"params\">(<span class=\"keyword\">final</span> android.app.FragmentManager fm)</span> </span>&#123;</div><div class=\"line\">   RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);</div><div class=\"line\">   <span class=\"keyword\">if</span> (current == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">     current = pendingRequestManagerFragments.get(fm);</div><div class=\"line\">     <span class=\"keyword\">if</span> (current == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">       current = <span class=\"keyword\">new</span> RequestManagerFragment();</div><div class=\"line\">       pendingRequestManagerFragments.put(fm, current);</div><div class=\"line\">       fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();</div><div class=\"line\">       handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget();</div><div class=\"line\">     &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> current;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关键类：xxxxRequestManagerFragment-绑定context的生命周期\"><a href=\"#关键类：xxxxRequestManagerFragment-绑定context的生命周期\" class=\"headerlink\" title=\"关键类：xxxxRequestManagerFragment(绑定context的生命周期)\"></a>关键类：xxxxRequestManagerFragment(绑定context的生命周期)</h3><ul>\n<li>内部绑定一个RequestManager对象;</li>\n<li>内部绑定一个ActivityFragmentLifecycle对象</li>\n<li>在生命周期的回调中调用ActivityFragmentLifecycle的相应生命周期方法</li>\n<li>RequestManager通过注册到ActivityFragmentLifecycle的lifecycleListeners集合实现生命周期绑定</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ActivityFragmentLifecycle lifecycle;</div><div class=\"line\"><span class=\"keyword\">private</span> RequestManager requestManager;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RequestManagerFragment</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>(<span class=\"keyword\">new</span> ActivityFragmentLifecycle());</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">RequestManagerFragment(ActivityFragmentLifecycle lifecycle) &#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.lifecycle = lifecycle;</div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* Sets the current &#123;<span class=\"doctag\">@link</span> com.bumptech.glide.RequestManager&#125;.</div><div class=\"line\">* <span class=\"doctag\">@param</span> requestManager The request manager to use.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRequestManager</span><span class=\"params\">(RequestManager requestManager)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.requestManager = requestManager;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 生命周期：Glide通过xxxxRequestManagerFragment的生命周期回调实现内部生命周期回调</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onStart();</div><div class=\"line\">  lifecycle.onStart();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onStop();</div><div class=\"line\">  lifecycle.onStop();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">  lifecycle.onDestroy();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关键类：ActivityFragmentLifecycle\"><a href=\"#关键类：ActivityFragmentLifecycle\" class=\"headerlink\" title=\"关键类：ActivityFragmentLifecycle\"></a>关键类：ActivityFragmentLifecycle</h3><ul>\n<li>管理同一个xxxxRequestManagerFragment分支下的所有LifecycleListener（具有生命周期）</li>\n<li>被xxxxRequestManagerFragment生命周期接口回调</li>\n<li>遍历回调所有LifecycleListener生命周期接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * A &#123;<span class=\"doctag\">@link</span> com.bumptech.glide.manager.Lifecycle&#125; implementation for tracking and notifying listeners of</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> android.app.Fragment&#125; and &#123;<span class=\"doctag\">@link</span> android.app.Activity&#125; lifecycle events.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityFragmentLifecycle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Lifecycle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;LifecycleListener&gt; lifecycleListeners =</div><div class=\"line\">            Collections.newSetFromMap(<span class=\"keyword\">new</span> WeakHashMap&lt;LifecycleListener, Boolean&gt;());</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isStarted;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isDestroyed;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addListener</span><span class=\"params\">(LifecycleListener listener)</span> </span>&#123;</div><div class=\"line\">        lifecycleListeners.add(listener);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isDestroyed) &#123;</div><div class=\"line\">            listener.onDestroy();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isStarted) &#123;</div><div class=\"line\">            listener.onStart();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            listener.onStop();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        isStarted = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</div><div class=\"line\">            lifecycleListener.onStart();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        isStarted = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</div><div class=\"line\">            lifecycleListener.onStop();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        isDestroyed = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</div><div class=\"line\">            lifecycleListener.onDestroy();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关键类：RequestManager\"><a href=\"#关键类：RequestManager\" class=\"headerlink\" title=\"关键类：RequestManager\"></a>关键类：RequestManager</h3><ul>\n<li>RequestManager被绑定于xxxxRequestManagerFragment</li>\n<li>RequestManager实现了LifecycleListener接口</li>\n<li>RequestManager注册给xxxxRequestManagerFragment的ActivityFragmentLifecycle</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RequestManager</span><span class=\"params\">(Context context, Lifecycle lifecycle, RequestManagerTreeNode treeNode)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, lifecycle, treeNode, <span class=\"keyword\">new</span> RequestTracker(), <span class=\"keyword\">new</span> ConnectivityMonitorFactory());</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> RequestManager(Context context, <span class=\"keyword\">final</span> Lifecycle lifecycle, RequestManagerTreeNode treeNode,</div><div class=\"line\"> RequestTracker requestTracker, ConnectivityMonitorFactory factory) &#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.context = context.getApplicationContext();</div><div class=\"line\">   <span class=\"keyword\">this</span>.lifecycle = lifecycle;</div><div class=\"line\">   <span class=\"keyword\">this</span>.treeNode = treeNode;</div><div class=\"line\">   <span class=\"keyword\">this</span>.requestTracker = requestTracker;</div><div class=\"line\">   <span class=\"keyword\">this</span>.glide = Glide.get(context);</div><div class=\"line\">   <span class=\"keyword\">this</span>.optionsApplier = <span class=\"keyword\">new</span> OptionsApplier();</div><div class=\"line\"> </div><div class=\"line\">  ConnectivityMonitor connectivityMonitor = factory.build(context,</div><div class=\"line\">  <span class=\"keyword\">new</span> RequestManagerConnectivityListener(requestTracker));</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">if</span> (Util.isOnBackgroundThread()) &#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> Handler(Looper.getMainLooper()).post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">          lifecycle.addListener(RequestManager.<span class=\"keyword\">this</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  \tlifecycle.addListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  lifecycle.addListener(connectivityMonitor);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"生命周期时序图\"><a href=\"#生命周期时序图\" class=\"headerlink\" title=\"生命周期时序图\"></a>生命周期时序图</h3><p><img src=\"/hello-world/img/GlideLifeCycleCallBack.png\" alt=\"Glide生命周期绑定机制时序图\"></p>\n<p>（本篇是Glide框架及源码解析的第一篇，更多文章敬请关注后续文章。版权归作者所有，如有转发，请注明文章出处：<a href=\"https://xiaodanchen.github.io/2016/08/19/%E8%B7%9F%E7%9D%80%E6%BA%90%E7%A0%81%E5%AD%A6%E8%AE%BE%E8%AE%A1%EF%BC%9AGlide%E6%A1%86%E6%9E%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/\" target=\"_blank\" rel=\"external\">原文链接</a>）</p>\n"},{"title":"about","url":"http://yoursite.com/about/index.html","content":""},{"title":"category","url":"http://yoursite.com/category/index.html","content":""},{"title":"hello world","url":"http://yoursite.com/hello-world/index.html","content":""},{"title":"search","url":"http://yoursite.com/search/index.html","content":""},{"title":"link","url":"http://yoursite.com/link/index.html","content":""},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":""}]